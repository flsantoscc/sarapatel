Package sarapatel;

Helpers
    letter = ['a' .. 'z'] | ['A' .. 'Z'];
    under = '_';
    digit = ['0' .. '9'];
    sp = ' ';
    rc = 13;
    nl = 10;
    tab = 9;
    eof = (nl | rc | rc nl);
    all = [0 .. 0xFFFF];
    all_no_rc_nl = [all - [rc + nl]];
    all_no_braces = [[all - '{'] - '}'];
    all_no_apos = [all - '''];

Tokens
     // Keywords
     var = 'var';
     const = 'const';
     se = 'se';
     senao = 'senao';
     enquanto = 'enquanto';
     funcao = 'funcao';
     procedimento = 'procedimento';
     e = 'e';
     ou = 'ou';
     negacao = 'nao';
     comece = 'comece';
     termine = 'termine';

     // Type Keywords
     int_kw = 'inteiro';
     float_kw = 'real';
     string_kw = 'cadeia';
     bool_kw = 'booleano';

     // Primitive Types
     int = (('-')? digit+) | ('0b' ('1' | '0')+);
     float = ('-')? digit+ ',' digit+;
     string = ''' all_no_apos* ''';
     bool = 'verdade' | 'falso';

     // Operators
     plus = '+';
     minus = '-';
     star = '*';
     div = '/';
     mod = '%';
     greater = '>';
     greater_eq = '>=';
     equal = '=';
     l_par = '(';
     r_par = ')';
     l_brkt = '[';
     r_brkt = ']';

     // Declarators
     dd = '<<';
     main_init = '>>';
     semi = ';';
     pipe = '|';
     colon = ':';

     // Misc
     id = (under|letter) (under|letter|digit)*;
     comment = '{' all_no_braces* '}';
     ml_comment = '--' all_no_rc_nl* (eof)?;
     blank = (rc | nl | sp | tab)+;

Ignored Tokens
    blank, comment, ml_comment;

Productions

    programa { -> programa  } =
        {programa1} dec_proc_or_dec_func_list                           { -> New programa([], [dec_proc_or_dec_func_list.dec_proc_or_dec_func]) }                                               |
        {programa2} dec_var_or_dec_const_list dec_proc_or_dec_func_list { -> New programa([dec_var_or_dec_const_list.dec_var_or_dec_const], [dec_proc_or_dec_func_list.dec_proc_or_dec_func]) } ;

    dec_var_or_dec_const_list { -> dec_var_or_dec_const * } = 
        {single} dec_var_or_dec_const                             { -> [dec_var_or_dec_const] }                                                 |
        {multiple} dec_var_or_dec_const dec_var_or_dec_const_list { -> [dec_var_or_dec_const, dec_var_or_dec_const_list.dec_var_or_dec_const] } ;

    dec_var_or_dec_const { -> dec_var_or_dec_const } =
        {dec_var} dec_var     { -> New dec_var_or_dec_const.dec_var(dec_var) }     |
        {dec_const} dec_const { -> New dec_var_or_dec_const.dec_const(dec_const) } ;

    dec_var { -> dec_var } = 
        {dec_var1} var colon tipo id semi            { -> New dec_var.id(tipo, id) }                       |
        {dec_var2} var colon tipo id_atribuicao semi { -> New dec_var.id_atribuicao(tipo, id_atribuicao) } ;
        
    dec_const { -> dec_const  } = 
        const colon tipo id_atribuicao semi { -> New dec_const(tipo , id_atribuicao) } ;

    tipo { -> tipo  } =
        {base} tipo_base             { -> New tipo.base(tipo_base) } |
        {arr} tipo l_brkt exp r_brkt { -> New tipo.arr(tipo, exp) }  ;

    tipo_base{ -> tipo_base } =
        {int} int_kw       { -> New tipo_base.int(int_kw) }       |
        {bool} bool_kw     { -> New tipo_base.bool(bool_kw) }     |
        {real} float_kw    { -> New tipo_base.real(float_kw) }    |
        {cadeia} string_kw { -> New tipo_base.cadeia(string_kw) } ;

    id_atribuicao { -> id_atribuicao } =
        valor dd exp { -> New id_atribuicao(valor, exp)} ;

    array_comp { -> array_comp } = l_brkt id pipe exp r_brkt { -> New array_comp(id, exp) } ;

    dec_proc_or_dec_func_list { -> dec_proc_or_dec_func* } =
        {single} dec_proc_or_dec_func                             { -> [dec_proc_or_dec_func] }                                                 |
        {multiple} dec_proc_or_dec_func dec_proc_or_dec_func_list { -> [dec_proc_or_dec_func, dec_proc_or_dec_func_list.dec_proc_or_dec_func] } ;
    
    dec_proc_or_dec_func { -> dec_proc_or_dec_func } =
        {dec_var} dec_proc   { -> New dec_proc_or_dec_func.dec_proc(dec_proc) } |
        {dec_const} dec_func { -> New dec_proc_or_dec_func.dec_func(dec_func) } ;

    dec_proc { -> dec_proc } =
        {adecproc1} procedimento colon id l_par r_par comando                      { -> New dec_proc(id, [], comando) }                     |
        {adecproc2} main_init procedimento colon id l_par r_par comando            { -> New dec_proc(id, [], comando) }                     |
        {adecproc3} procedimento colon id l_par parametros r_par comando           { -> New dec_proc(id, [parametros.parametro], comando) } |
        {adecproc4} main_init procedimento colon id l_par parametros r_par comando { -> New dec_proc(id, [parametros.parametro], comando) } ;

    dec_func { -> dec_func } =
        {adecfunc1} funcao colon tipo id l_par r_par exp            { -> New dec_func(tipo, id, [], exp) }                     |
        {adecfunc2} funcao colon tipo id l_par parametros r_par exp { -> New dec_func(tipo, id, [parametros.parametro], exp) } ;

    parametros { -> parametro* } =
        {single} parametro                   { -> [parametro] }                       |
        {multiple} parametro pipe parametros { -> [parametro, parametros.parametro] } ;

    parametro { -> parametro  } =
        {parametro} tipo_param id { -> New parametro(tipo_param, id) } ;

    tipo_param { -> tipo_param  } =
        {par} tipo_base                    { -> New tipo_param.par(tipo_base) }      |
        {arr_par} tipo_param l_brkt r_brkt { -> New tipo_param.arr_par(tipo_param) } ;

    comando_list { -> comando* } =
        {single} comando                { -> [comando] }                       |
        {multiple} comando comando_list { -> [comando, comando_list.comando] } ;

    comando { -> comando } =
        {se} se l_par exp r_par comando                                                  { -> New comando.se(exp, comando) }                                                                                |
        {se_senao} se l_par exp r_par comando_aux senao comando                          { -> New comando.se_senao(exp, comando_aux, comando) }                                                             |
        {enquanto} enquanto l_par exp r_par comando                                      { -> New comando.enquanto(exp, comando) }                                                                          |
        {id_atribuicao} id_atribuicao semi                                               { -> New comando.id_atribuicao(id_atribuicao) }                                                                    |
        {proc} chamada_procedimento semi                                                 { -> New comando.proc(chamada_procedimento) }                                                                      |
        {bloco_vazio} comece termine                                                     { -> New comando.dec_var_or_dec_const([], []) }                                                                    |       
        {b_dec_var_or_dec_const} comece dec_var_or_dec_const_list termine                { -> New comando.dec_var_or_dec_const([dec_var_or_dec_const_list.dec_var_or_dec_const], []) }                      |             
        {b_dec_var_or_dec_const2} comece dec_var_or_dec_const_list comando_list termine  { -> New comando.dec_var_or_dec_const ([dec_var_or_dec_const_list.dec_var_or_dec_const], [comando_list.comando]) } |
        {bloco_comando} comece comando_list termine                                      { -> New comando.dec_var_or_dec_const([], [comando_list.comando]) }                                                ;

    comando_aux { -> comando_aux  } =
        {se} se l_par exp r_par [then]:comando_aux senao [else]:comando_aux             { -> New comando_aux.se(exp, then, else) }                                                                             |
        {enquanto} enquanto l_par exp r_par comando_aux                                 { -> New comando_aux.enquanto(exp, comando_aux) }                                                                      |
        {proc} chamada_procedimento semi                                                { -> New comando_aux.proc(chamada_procedimento) }                                                                      |
        {id_atribuicao} id_atribuicao semi                                              { -> New comando_aux.id_atribuicao(id_atribuicao) }                                                                    |
        {bloco_vazio} comece termine                                                    { -> New comando_aux.dec_var_or_dec_const([], []) }                                                                    |
        {b_dec_var_or_dec_const} comece dec_var_or_dec_const_list termine               { -> New comando_aux.dec_var_or_dec_const([dec_var_or_dec_const_list.dec_var_or_dec_const], []) }                      |
        {b_dec_var_or_dec_const2} comece dec_var_or_dec_const_list comando_list termine { -> New comando_aux.dec_var_or_dec_const ([dec_var_or_dec_const_list.dec_var_or_dec_const], [comando_list.comando]) } |
        {bloco_comando} comece comando_list termine                                     { -> New comando_aux.dec_var_or_dec_const([], [comando_list.comando]) }                                                ;

    valor { -> valor } =
        {id} id                       { -> New valor.id(id) }          |
        {exp} valor l_brkt exp r_brkt { -> New valor.exp(valor ,exp) } ;

    exp_list { -> exp* } =
        {single} exp                 { -> [exp] }               |
        {multiple} exp pipe exp_list { -> [exp, exp_list.exp] } ;

    exp { -> exp } =
        {se} se l_par [if]:exp r_par [then]:exp senao [else]:disjucao { -> New exp.se(if.exp, then.exp, else.exp) } |
        {disjucao} disjucao                                           { -> disjucao.exp }                           ;

    disjucao { -> exp } =
        {ou} [left]:disjucao ou [right]:conjuncao { -> New exp.ou(left.exp, right.exp) } |
        {conj} conjuncao                          { -> conjuncao.exp }                   ;

    conjuncao { -> exp } =
        {e} [left]:conjuncao e [right]:comparador { -> New exp.e(left.exp, right.exp) } |
        {comparador} comparador                   { -> comparador.exp }                 ;
        
    comparador { -> exp } =
        {equal} [left]:comparador equal [right]:adicao           { -> New exp.equal(left.exp, right.exp) }      |
        {greater_eq} [left]:comparador greater_eq [right]:adicao { -> New exp.greater_eq(left.exp, right.exp) } |
        {greater} [left]:comparador greater [right]:adicao       { -> New exp.greater(left.exp, right.exp) }    |
        {adicao} adicao                                          { -> adicao.exp }                              ;

    adicao { -> exp } =
        {soma} [left]:adicao plus [right]:produto { -> New exp.soma(left.exp, right.exp) }  |
        {sub} [left]:adicao minus [right]:produto { -> New exp.minus(left.exp, right.exp) } |
        {produto} produto                         { -> produto.exp }                        ;
        
    produto { -> exp } =    
        {mult}[left]:produto star [right]:rel_unaria { -> New exp.mult(left.exp, right.exp) } |
        {div} [left]:produto div [right]:rel_unaria  { -> New exp.div(left.exp, right.exp) }  |
        {mod} [left]:produto mod [right]:rel_unaria  { -> New exp.mod(left.exp, right.exp) }  |
        {rel_unaria} rel_unaria                      { -> rel_unaria.exp }                    ;
        
    rel_unaria { -> exp } =    
        {incremento} plus value  { -> New exp.incremento(value.exp) } |
        {decremento} minus value { -> New exp.decremento(value.exp) } |
        {negacao} negacao value  { -> New exp.negacao(value.exp) }    |
        {value} value            { -> value.exp }                     ;

    value { -> exp } =
        {int} int                { -> New exp.int(int) }                |
        {bool} bool              { -> New exp.bool(bool) }              |
        {real} float             { -> New exp.real(float) }             |
        {cadeia} string          { -> New exp.cadeia(string) }          |
        {valor} valor            { -> New exp.valor(valor) }            |
        {par} l_par exp r_par    { -> New exp.par(exp) }                |
        {c_func} chamada_funcao  { -> New exp.c_func(chamada_funcao) }  |
        {b_exp} bloco_expressoes { -> New exp.b_exp(bloco_expressoes) } |
        {array_comp} array_comp  { -> New exp.array_comp(array_comp) }  ;

    bloco_expressoes { -> bloco_expressoes } =
        {b_exp} comece exp termine { -> New bloco_expressoes([], exp) }                              |
        {b_dec_const_exp} comece dec_const exp termine { -> New bloco_expressoes([dec_const], exp) } ;

    chamada_funcao { -> chamada_funcao } =
        {achamadafuncao1} id l_par r_par          { -> New chamada_funcao(id, []) }             |
        {achamadafuncao2} id l_par exp_list r_par { -> New chamada_funcao(id, [exp_list.exp]) } ;

    chamada_procedimento { -> chamada_procedimento } =
        {achamadaprocedimento1} id l_par r_par          { -> New chamada_procedimento(id, []) }             |
        {achamadaprocedimento2} id l_par exp_list r_par { -> New chamada_procedimento(id, [exp_list.exp]) } ;    
        
Abstract Syntax Tree
    programa = dec_var_or_dec_const* dec_proc_or_dec_func+ ;

    dec_var =
        {id} tipo id                       |
        {id_atribuicao} tipo id_atribuicao ;

    dec_const = tipo id_atribuicao ;

    dec_var_or_dec_const =
        {dec_var} dec_var     |
        {dec_const} dec_const ;

    tipo =
        {base} tipo_base |
        {arr} tipo exp   ;

    tipo_base =
        {int} int_kw       |
        {bool} bool_kw     |
        {real} float_kw    |
        {cadeia} string_kw ;

    id_atribuicao = valor exp;

    valor =
        {id} id         |
        {exp} valor exp ;

    dec_proc_or_dec_func =
        {dec_proc} dec_proc |
        {dec_func} dec_func ;

    dec_proc = id parametro* comando ;

    dec_func = tipo id parametro* exp ;

    parametro = tipo_param id ;

    tipo_param =
        {par} tipo_base      |
        {arr_par} tipo_param ;

    comando =
        {se} exp comando                                      |
        {se_senao} exp comando_aux comando                    |
        {enquanto} exp comando                                |
        {id_atribuicao} id_atribuicao                         |
        {proc} chamada_procedimento                           |
        {dec_var_or_dec_const} dec_var_or_dec_const* comando* ;

    comando_aux =
        {se} exp [then]:comando_aux [else]:comando_aux        |
        {enquanto} exp comando_aux                            |
        {proc} chamada_procedimento                           |
        {id_atribuicao} id_atribuicao                         |
        {dec_var_or_dec_const} dec_var_or_dec_const* comando* ;

    exp =
        {int} int                               |
        {bool} bool                             |
        {real} float                            |
        {cadeia} string                         |
        {valor} valor                           |
        {c_func} chamada_funcao                 |
        {array_comp} array_comp                 |
        {incremento} exp                        |
        {decremento} exp                        |
        {se} [if]:exp [then]:exp [else]:exp     |
        {soma} [left]:exp [right]:exp           |
        {minus} [left]:exp [right]:exp          |
        {mult} [left]:exp [right]:exp           |
        {div} [left]:exp [right]:exp            |
        {mod} [left]:exp [right]:exp            |
        {equal} [left]:exp [right]:exp          |
        {greater_eq} [left]:exp [right]:exp     |
        {greater} [left]:exp [right]:exp        |
        {e} [left]:exp [right]:exp              |
        {ou} [left]:exp [right]:exp             | 
        {par} exp                               |
        {negacao} exp                           |
        {b_exp} bloco_expressoes                |
        {b_dec_const_exp} dec_const* exp        ;

    bloco_expressoes = dec_const* exp ;
    
    array_comp = id exp ;

    chamada_funcao = id exp* ;
    
    chamada_procedimento = id exp* ;
