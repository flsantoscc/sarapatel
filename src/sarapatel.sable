Package sarapatel;

Helpers
    all = [0..0xFFFF];
    digit = ['0'..'9'];
    non_digit = ['_' + [['a'..'z'] + ['A'..'Z']]];
    nonzero_digit = [digit - '0'];
    binary_digit = '0' | '1';

    binary_constant = '0b' binary_digit+;
    decimal_constant = nonzero_digit digit*;

    tab = 9;
    lf = 10;
    cr = 13;
    eol = cr lf | cr | lf;
    not_cr_lf = [all - [cr + lf]];
    blank = (' ' | tab | eol)+;
    not_lbkt = [all - '}'];

    short_comment = '--' not_cr_lf* eol;
    long_comment = '{' (short_comment | not_lbkt)* '}';

Tokens
    digit = digit;
    letter = non_digit;
    dot = '.';
    comma = ',';
    colon = ':';
    semicolon = ';';
    l_par = '(';
    r_par = ')';
    l_bracket = '[';
    r_bracket = ']';
    l_brace = '{';
    r_brace = '}';
    star = '*';
    div = '/';
    mod = '%';
    plus = '+';
    minus = '-';

    attr = '<<';
    e = 'e';
    ou = 'ou';
    nao = 'nao';
    greater = '>';
    greater_or_equal = '>=';
    equal = '=';
    se = 'se';
    senao = 'senao';
    funcao = 'funcao';
    procedimento = 'procedimento';
    enquanto = 'enquanto';
    comece = 'comece';
    termine = 'termine';
    var = 'var';
    const = 'const';
    imprima = 'imprima';
    leia = 'leia';
    size = 'size';

    t_inteiro = 'inteiro';
    t_real = 'real';
    t_cadeia = 'cadeia';
    t_booleano = 'booleano';

    floating_constant = nonzero_digit digit+ ',' digit+;
    integer_constant = binary_constant | decimal_constant;
    cadeia_constant = ''' [not_cr_lf - ''']+ ''';
    boolean_constant = 'verdade' | 'falso';

    eol = eol;
    blank = blank;

    comment = short_comment | long_comment;
    identifier = non_digit (digit | non_digit)*;

Ignored Tokens
    blank,
    comment,
    eol;

Productions
    type_specifier =
        {boolean} boolean_specifier |
        {integer} integer_specifier |
        {float}   float_specifier   |
        {string}  string_specifier;

    integer_specifier = t_inteiro;
    boolean_specifier = t_booleano;
    string_specifier = t_cadeia;
    float_specifier = t_real;

    array_declarator =
        {identifier} l_bracket integer_constant r_bracket identifier |
        {array}      array_declarator l_bracket integer_constant r_bracket;

    array_declaration = var colon type_specifier array_declarator semicolon;