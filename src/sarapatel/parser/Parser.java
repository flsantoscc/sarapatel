/* This file was generated by SableCC (http://www.sablecc.org/). */

package sarapatel.parser;

import sarapatel.lexer.*;
import sarapatel.node.*;
import sarapatel.analysis.*;
import java.util.*;

import java.io.DataInputStream;
import java.io.BufferedInputStream;
import java.io.IOException;

@SuppressWarnings("nls")
public class Parser
{
    public final Analysis ignoredTokens = new AnalysisAdapter();

    protected ArrayList<Object> nodeList;

    private final Lexer lexer;
    private final ListIterator<Object> stack = new LinkedList<Object>().listIterator();
    private int last_pos;
    private int last_line;
    private Token last_token;
    private final TokenIndex converter = new TokenIndex();
    private final int[] action = new int[2];

    private final static int SHIFT = 0;
    private final static int REDUCE = 1;
    private final static int ACCEPT = 2;
    private final static int ERROR = 3;

    public Parser(@SuppressWarnings("hiding") Lexer lexer)
    {
        this.lexer = lexer;
    }

    @SuppressWarnings({"unchecked","unused"})
    private void push(int numstate, ArrayList<Object> listNode) throws ParserException, LexerException, IOException
    {
        this.nodeList = listNode;

        if(!this.stack.hasNext())
        {
            this.stack.add(new State(numstate, this.nodeList));
            return;
        }

        State s = (State) this.stack.next();
        s.state = numstate;
        s.nodes = this.nodeList;
    }

    private int goTo(int index)
    {
        int state = state();
        int low = 1;
        int high = gotoTable[index].length - 1;
        int value = gotoTable[index][0][1];

        while(low <= high)
        {
            // int middle = (low + high) / 2;
            int middle = (low + high) >>> 1;

            if(state < gotoTable[index][middle][0])
            {
                high = middle - 1;
            }
            else if(state > gotoTable[index][middle][0])
            {
                low = middle + 1;
            }
            else
            {
                value = gotoTable[index][middle][1];
                break;
            }
        }

        return value;
    }

    private int state()
    {
        State s = (State) this.stack.previous();
        this.stack.next();
        return s.state;
    }

    private ArrayList<Object> pop()
    {
        return ((State) this.stack.previous()).nodes;
    }

    private int index(Switchable token)
    {
        this.converter.index = -1;
        token.apply(this.converter);
        return this.converter.index;
    }

    @SuppressWarnings("unchecked")
    public Start parse() throws ParserException, LexerException, IOException
    {
        push(0, null);
        List<Node> ign = null;
        while(true)
        {
            while(index(this.lexer.peek()) == -1)
            {
                if(ign == null)
                {
                    ign = new LinkedList<Node>();
                }

                ign.add(this.lexer.next());
            }

            if(ign != null)
            {
                this.ignoredTokens.setIn(this.lexer.peek(), ign);
                ign = null;
            }

            this.last_pos = this.lexer.peek().getPos();
            this.last_line = this.lexer.peek().getLine();
            this.last_token = this.lexer.peek();

            int index = index(this.lexer.peek());
            this.action[0] = Parser.actionTable[state()][0][1];
            this.action[1] = Parser.actionTable[state()][0][2];

            int low = 1;
            int high = Parser.actionTable[state()].length - 1;

            while(low <= high)
            {
                int middle = (low + high) / 2;

                if(index < Parser.actionTable[state()][middle][0])
                {
                    high = middle - 1;
                }
                else if(index > Parser.actionTable[state()][middle][0])
                {
                    low = middle + 1;
                }
                else
                {
                    this.action[0] = Parser.actionTable[state()][middle][1];
                    this.action[1] = Parser.actionTable[state()][middle][2];
                    break;
                }
            }

            switch(this.action[0])
            {
                case SHIFT:
		    {
		        ArrayList<Object> list = new ArrayList<Object>();
		        list.add(this.lexer.next());
                        push(this.action[1], list);
                    }
		    break;
                case REDUCE:
                    {
                        int reduction = this.action[1];
                        if(reduction < 500) reduce_0(reduction);
                    }
                    break;
                case ACCEPT:
                    {
                        EOF node2 = (EOF) this.lexer.next();
                        PPrograma node1 = (PPrograma) pop().get(0);
                        Start node = new Start(node1, node2);
                        return node;
                    }
                case ERROR:
                    throw new ParserException(this.last_token,
                        "[" + this.last_line + "," + this.last_pos + "] " +
                        Parser.errorMessages[Parser.errors[this.action[1]]]);
            }
        }
    }

    private void reduce_0(int reduction) throws IOException, LexerException, ParserException
    {
        switch(reduction)
        {
            case 0: /* reduce APrograma1Programa */
            {
                ArrayList<Object> list = new0();
                push(goTo(0), list);
            }
            break;
            case 1: /* reduce APrograma2Programa */
            {
                ArrayList<Object> list = new1();
                push(goTo(0), list);
            }
            break;
            case 2: /* reduce ASingleDecVarOrDecConstList */
            {
                ArrayList<Object> list = new2();
                push(goTo(1), list);
            }
            break;
            case 3: /* reduce AMultipleDecVarOrDecConstList */
            {
                ArrayList<Object> list = new3();
                push(goTo(1), list);
            }
            break;
            case 4: /* reduce ADecVarDecVarOrDecConst */
            {
                ArrayList<Object> list = new4();
                push(goTo(2), list);
            }
            break;
            case 5: /* reduce ADecConstDecVarOrDecConst */
            {
                ArrayList<Object> list = new5();
                push(goTo(2), list);
            }
            break;
            case 6: /* reduce ADecVar1DecVar */
            {
                ArrayList<Object> list = new6();
                push(goTo(3), list);
            }
            break;
            case 7: /* reduce ADecVar2DecVar */
            {
                ArrayList<Object> list = new7();
                push(goTo(3), list);
            }
            break;
            case 8: /* reduce ADecConst */
            {
                ArrayList<Object> list = new8();
                push(goTo(4), list);
            }
            break;
            case 9: /* reduce ABaseTipo */
            {
                ArrayList<Object> list = new9();
                push(goTo(5), list);
            }
            break;
            case 10: /* reduce AArrTipo */
            {
                ArrayList<Object> list = new10();
                push(goTo(5), list);
            }
            break;
            case 11: /* reduce AIntTipoBase */
            {
                ArrayList<Object> list = new11();
                push(goTo(6), list);
            }
            break;
            case 12: /* reduce ABoolTipoBase */
            {
                ArrayList<Object> list = new12();
                push(goTo(6), list);
            }
            break;
            case 13: /* reduce ARealTipoBase */
            {
                ArrayList<Object> list = new13();
                push(goTo(6), list);
            }
            break;
            case 14: /* reduce ACadeiaTipoBase */
            {
                ArrayList<Object> list = new14();
                push(goTo(6), list);
            }
            break;
            case 15: /* reduce AIdAtribuicao */
            {
                ArrayList<Object> list = new15();
                push(goTo(7), list);
            }
            break;
            case 16: /* reduce AArrayComp */
            {
                ArrayList<Object> list = new16();
                push(goTo(8), list);
            }
            break;
            case 17: /* reduce ASingleDecProcOrDecFuncList */
            {
                ArrayList<Object> list = new17();
                push(goTo(9), list);
            }
            break;
            case 18: /* reduce AMultipleDecProcOrDecFuncList */
            {
                ArrayList<Object> list = new18();
                push(goTo(9), list);
            }
            break;
            case 19: /* reduce ADecVarDecProcOrDecFunc */
            {
                ArrayList<Object> list = new19();
                push(goTo(10), list);
            }
            break;
            case 20: /* reduce ADecConstDecProcOrDecFunc */
            {
                ArrayList<Object> list = new20();
                push(goTo(10), list);
            }
            break;
            case 21: /* reduce AAdecproc1DecProc */
            {
                ArrayList<Object> list = new21();
                push(goTo(11), list);
            }
            break;
            case 22: /* reduce AAdecproc2DecProc */
            {
                ArrayList<Object> list = new22();
                push(goTo(11), list);
            }
            break;
            case 23: /* reduce AAdecproc3DecProc */
            {
                ArrayList<Object> list = new23();
                push(goTo(11), list);
            }
            break;
            case 24: /* reduce AAdecproc4DecProc */
            {
                ArrayList<Object> list = new24();
                push(goTo(11), list);
            }
            break;
            case 25: /* reduce AAdecfunc1DecFunc */
            {
                ArrayList<Object> list = new25();
                push(goTo(12), list);
            }
            break;
            case 26: /* reduce AAdecfunc2DecFunc */
            {
                ArrayList<Object> list = new26();
                push(goTo(12), list);
            }
            break;
            case 27: /* reduce ASingleParametros */
            {
                ArrayList<Object> list = new27();
                push(goTo(13), list);
            }
            break;
            case 28: /* reduce AMultipleParametros */
            {
                ArrayList<Object> list = new28();
                push(goTo(13), list);
            }
            break;
            case 29: /* reduce AParametroParametro */
            {
                ArrayList<Object> list = new29();
                push(goTo(14), list);
            }
            break;
            case 30: /* reduce AParTipoParam */
            {
                ArrayList<Object> list = new30();
                push(goTo(15), list);
            }
            break;
            case 31: /* reduce AArrParTipoParam */
            {
                ArrayList<Object> list = new31();
                push(goTo(15), list);
            }
            break;
            case 32: /* reduce ASingleComandoList */
            {
                ArrayList<Object> list = new32();
                push(goTo(16), list);
            }
            break;
            case 33: /* reduce AMultipleComandoList */
            {
                ArrayList<Object> list = new33();
                push(goTo(16), list);
            }
            break;
            case 34: /* reduce ASeComando */
            {
                ArrayList<Object> list = new34();
                push(goTo(17), list);
            }
            break;
            case 35: /* reduce ASeSenaoComando */
            {
                ArrayList<Object> list = new35();
                push(goTo(17), list);
            }
            break;
            case 36: /* reduce AEnquantoComando */
            {
                ArrayList<Object> list = new36();
                push(goTo(17), list);
            }
            break;
            case 37: /* reduce AIdAtribuicaoComando */
            {
                ArrayList<Object> list = new37();
                push(goTo(17), list);
            }
            break;
            case 38: /* reduce AProcComando */
            {
                ArrayList<Object> list = new38();
                push(goTo(17), list);
            }
            break;
            case 39: /* reduce ABlocoVazioComando */
            {
                ArrayList<Object> list = new39();
                push(goTo(17), list);
            }
            break;
            case 40: /* reduce ABDecVarOrDecConstComando */
            {
                ArrayList<Object> list = new40();
                push(goTo(17), list);
            }
            break;
            case 41: /* reduce ABDecVarOrDecConst2Comando */
            {
                ArrayList<Object> list = new41();
                push(goTo(17), list);
            }
            break;
            case 42: /* reduce ABlocoComandoComando */
            {
                ArrayList<Object> list = new42();
                push(goTo(17), list);
            }
            break;
            case 43: /* reduce ASeComandoAux */
            {
                ArrayList<Object> list = new43();
                push(goTo(18), list);
            }
            break;
            case 44: /* reduce AEnquantoComandoAux */
            {
                ArrayList<Object> list = new44();
                push(goTo(18), list);
            }
            break;
            case 45: /* reduce AProcComandoAux */
            {
                ArrayList<Object> list = new45();
                push(goTo(18), list);
            }
            break;
            case 46: /* reduce AIdAtribuicaoComandoAux */
            {
                ArrayList<Object> list = new46();
                push(goTo(18), list);
            }
            break;
            case 47: /* reduce ABlocoVazioComandoAux */
            {
                ArrayList<Object> list = new47();
                push(goTo(18), list);
            }
            break;
            case 48: /* reduce ABDecVarOrDecConstComandoAux */
            {
                ArrayList<Object> list = new48();
                push(goTo(18), list);
            }
            break;
            case 49: /* reduce ABDecVarOrDecConst2ComandoAux */
            {
                ArrayList<Object> list = new49();
                push(goTo(18), list);
            }
            break;
            case 50: /* reduce ABlocoComandoComandoAux */
            {
                ArrayList<Object> list = new50();
                push(goTo(18), list);
            }
            break;
            case 51: /* reduce AIdValor */
            {
                ArrayList<Object> list = new51();
                push(goTo(19), list);
            }
            break;
            case 52: /* reduce AExpValor */
            {
                ArrayList<Object> list = new52();
                push(goTo(19), list);
            }
            break;
            case 53: /* reduce ASingleExpList */
            {
                ArrayList<Object> list = new53();
                push(goTo(20), list);
            }
            break;
            case 54: /* reduce AMultipleExpList */
            {
                ArrayList<Object> list = new54();
                push(goTo(20), list);
            }
            break;
            case 55: /* reduce ASeExp */
            {
                ArrayList<Object> list = new55();
                push(goTo(21), list);
            }
            break;
            case 56: /* reduce ADisjucaoExp */
            {
                ArrayList<Object> list = new56();
                push(goTo(21), list);
            }
            break;
            case 57: /* reduce AOuDisjucao */
            {
                ArrayList<Object> list = new57();
                push(goTo(22), list);
            }
            break;
            case 58: /* reduce AConjDisjucao */
            {
                ArrayList<Object> list = new58();
                push(goTo(22), list);
            }
            break;
            case 59: /* reduce AEConjuncao */
            {
                ArrayList<Object> list = new59();
                push(goTo(23), list);
            }
            break;
            case 60: /* reduce AComparadorConjuncao */
            {
                ArrayList<Object> list = new60();
                push(goTo(23), list);
            }
            break;
            case 61: /* reduce AEqualComparador */
            {
                ArrayList<Object> list = new61();
                push(goTo(24), list);
            }
            break;
            case 62: /* reduce AGreaterEqComparador */
            {
                ArrayList<Object> list = new62();
                push(goTo(24), list);
            }
            break;
            case 63: /* reduce AGreaterComparador */
            {
                ArrayList<Object> list = new63();
                push(goTo(24), list);
            }
            break;
            case 64: /* reduce AAdicaoComparador */
            {
                ArrayList<Object> list = new64();
                push(goTo(24), list);
            }
            break;
            case 65: /* reduce ASomaAdicao */
            {
                ArrayList<Object> list = new65();
                push(goTo(25), list);
            }
            break;
            case 66: /* reduce ASubAdicao */
            {
                ArrayList<Object> list = new66();
                push(goTo(25), list);
            }
            break;
            case 67: /* reduce AProdutoAdicao */
            {
                ArrayList<Object> list = new67();
                push(goTo(25), list);
            }
            break;
            case 68: /* reduce AMultProduto */
            {
                ArrayList<Object> list = new68();
                push(goTo(26), list);
            }
            break;
            case 69: /* reduce ADivProduto */
            {
                ArrayList<Object> list = new69();
                push(goTo(26), list);
            }
            break;
            case 70: /* reduce AModProduto */
            {
                ArrayList<Object> list = new70();
                push(goTo(26), list);
            }
            break;
            case 71: /* reduce ARelUnariaProduto */
            {
                ArrayList<Object> list = new71();
                push(goTo(26), list);
            }
            break;
            case 72: /* reduce AIncrementoRelUnaria */
            {
                ArrayList<Object> list = new72();
                push(goTo(27), list);
            }
            break;
            case 73: /* reduce ADecrementoRelUnaria */
            {
                ArrayList<Object> list = new73();
                push(goTo(27), list);
            }
            break;
            case 74: /* reduce ANegacaoRelUnaria */
            {
                ArrayList<Object> list = new74();
                push(goTo(27), list);
            }
            break;
            case 75: /* reduce AValueRelUnaria */
            {
                ArrayList<Object> list = new75();
                push(goTo(27), list);
            }
            break;
            case 76: /* reduce AIntValue */
            {
                ArrayList<Object> list = new76();
                push(goTo(28), list);
            }
            break;
            case 77: /* reduce ABoolValue */
            {
                ArrayList<Object> list = new77();
                push(goTo(28), list);
            }
            break;
            case 78: /* reduce ARealValue */
            {
                ArrayList<Object> list = new78();
                push(goTo(28), list);
            }
            break;
            case 79: /* reduce ACadeiaValue */
            {
                ArrayList<Object> list = new79();
                push(goTo(28), list);
            }
            break;
            case 80: /* reduce AValorValue */
            {
                ArrayList<Object> list = new80();
                push(goTo(28), list);
            }
            break;
            case 81: /* reduce AParValue */
            {
                ArrayList<Object> list = new81();
                push(goTo(28), list);
            }
            break;
            case 82: /* reduce ACFuncValue */
            {
                ArrayList<Object> list = new82();
                push(goTo(28), list);
            }
            break;
            case 83: /* reduce ABExpValue */
            {
                ArrayList<Object> list = new83();
                push(goTo(28), list);
            }
            break;
            case 84: /* reduce AArrayCompValue */
            {
                ArrayList<Object> list = new84();
                push(goTo(28), list);
            }
            break;
            case 85: /* reduce ABExpBlocoExpressoes */
            {
                ArrayList<Object> list = new85();
                push(goTo(29), list);
            }
            break;
            case 86: /* reduce ABDecConstExpBlocoExpressoes */
            {
                ArrayList<Object> list = new86();
                push(goTo(29), list);
            }
            break;
            case 87: /* reduce AAchamadafuncao1ChamadaFuncao */
            {
                ArrayList<Object> list = new87();
                push(goTo(30), list);
            }
            break;
            case 88: /* reduce AAchamadafuncao2ChamadaFuncao */
            {
                ArrayList<Object> list = new88();
                push(goTo(30), list);
            }
            break;
            case 89: /* reduce AAchamadaprocedimento1ChamadaProcedimento */
            {
                ArrayList<Object> list = new89();
                push(goTo(31), list);
            }
            break;
            case 90: /* reduce AAchamadaprocedimento2ChamadaProcedimento */
            {
                ArrayList<Object> list = new90();
                push(goTo(31), list);
            }
            break;
        }
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new0() /* reduce APrograma1Programa */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PPrograma pprogramaNode1;
        {
            // Block
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        {
            // Block
        }
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        listNode3 = (LinkedList)nodeArrayList1.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }

        pprogramaNode1 = new APrograma(listNode2, listNode4);
        }
	nodeList.add(pprogramaNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new1() /* reduce APrograma2Programa */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PPrograma pprogramaNode1;
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        listNode2 = (LinkedList)nodeArrayList1.get(0);
	if(listNode2 != null)
	{
	  listNode3.addAll(listNode2);
	}
        }
        {
            // Block
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        listNode4 = (LinkedList)nodeArrayList2.get(0);
	if(listNode4 != null)
	{
	  listNode5.addAll(listNode4);
	}
        }

        pprogramaNode1 = new APrograma(listNode3, listNode5);
        }
	nodeList.add(pprogramaNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new2() /* reduce ASingleDecVarOrDecConstList */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        PDecVarOrDecConst pdecvarordecconstNode1;
        pdecvarordecconstNode1 = (PDecVarOrDecConst)nodeArrayList1.get(0);
	if(pdecvarordecconstNode1 != null)
	{
	  listNode2.add(pdecvarordecconstNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new3() /* reduce AMultipleDecVarOrDecConstList */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        PDecVarOrDecConst pdecvarordecconstNode1;
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        pdecvarordecconstNode1 = (PDecVarOrDecConst)nodeArrayList1.get(0);
        listNode2 = (LinkedList)nodeArrayList2.get(0);
	if(pdecvarordecconstNode1 != null)
	{
	  listNode3.add(pdecvarordecconstNode1);
	}
	if(listNode2 != null)
	{
	  listNode3.addAll(listNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new4() /* reduce ADecVarDecVarOrDecConst */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PDecVarOrDecConst pdecvarordecconstNode1;
        {
            // Block
        PDecVar pdecvarNode2;
        pdecvarNode2 = (PDecVar)nodeArrayList1.get(0);

        pdecvarordecconstNode1 = new ADecVarDecVarOrDecConst(pdecvarNode2);
        }
	nodeList.add(pdecvarordecconstNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new5() /* reduce ADecConstDecVarOrDecConst */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PDecVarOrDecConst pdecvarordecconstNode1;
        {
            // Block
        PDecConst pdecconstNode2;
        pdecconstNode2 = (PDecConst)nodeArrayList1.get(0);

        pdecvarordecconstNode1 = new ADecConstDecVarOrDecConst(pdecconstNode2);
        }
	nodeList.add(pdecvarordecconstNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new6() /* reduce ADecVar1DecVar */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PDecVar pdecvarNode1;
        {
            // Block
        PTipo ptipoNode2;
        TId tidNode3;
        ptipoNode2 = (PTipo)nodeArrayList3.get(0);
        tidNode3 = (TId)nodeArrayList4.get(0);

        pdecvarNode1 = new AIdDecVar(ptipoNode2, tidNode3);
        }
	nodeList.add(pdecvarNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new7() /* reduce ADecVar2DecVar */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PDecVar pdecvarNode1;
        {
            // Block
        PTipo ptipoNode2;
        PIdAtribuicao pidatribuicaoNode3;
        ptipoNode2 = (PTipo)nodeArrayList3.get(0);
        pidatribuicaoNode3 = (PIdAtribuicao)nodeArrayList4.get(0);

        pdecvarNode1 = new AIdAtribuicaoDecVar(ptipoNode2, pidatribuicaoNode3);
        }
	nodeList.add(pdecvarNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new8() /* reduce ADecConst */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PDecConst pdecconstNode1;
        {
            // Block
        PTipo ptipoNode2;
        PIdAtribuicao pidatribuicaoNode3;
        ptipoNode2 = (PTipo)nodeArrayList3.get(0);
        pidatribuicaoNode3 = (PIdAtribuicao)nodeArrayList4.get(0);

        pdecconstNode1 = new ADecConst(ptipoNode2, pidatribuicaoNode3);
        }
	nodeList.add(pdecconstNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new9() /* reduce ABaseTipo */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PTipo ptipoNode1;
        {
            // Block
        PTipoBase ptipobaseNode2;
        ptipobaseNode2 = (PTipoBase)nodeArrayList1.get(0);

        ptipoNode1 = new ABaseTipo(ptipobaseNode2);
        }
	nodeList.add(ptipoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new10() /* reduce AArrTipo */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PTipo ptipoNode1;
        {
            // Block
        PTipo ptipoNode2;
        PExp pexpNode3;
        ptipoNode2 = (PTipo)nodeArrayList1.get(0);
        pexpNode3 = (PExp)nodeArrayList3.get(0);

        ptipoNode1 = new AArrTipo(ptipoNode2, pexpNode3);
        }
	nodeList.add(ptipoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new11() /* reduce AIntTipoBase */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PTipoBase ptipobaseNode1;
        {
            // Block
        TIntKw tintkwNode2;
        tintkwNode2 = (TIntKw)nodeArrayList1.get(0);

        ptipobaseNode1 = new AIntTipoBase(tintkwNode2);
        }
	nodeList.add(ptipobaseNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new12() /* reduce ABoolTipoBase */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PTipoBase ptipobaseNode1;
        {
            // Block
        TBoolKw tboolkwNode2;
        tboolkwNode2 = (TBoolKw)nodeArrayList1.get(0);

        ptipobaseNode1 = new ABoolTipoBase(tboolkwNode2);
        }
	nodeList.add(ptipobaseNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new13() /* reduce ARealTipoBase */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PTipoBase ptipobaseNode1;
        {
            // Block
        TFloatKw tfloatkwNode2;
        tfloatkwNode2 = (TFloatKw)nodeArrayList1.get(0);

        ptipobaseNode1 = new ARealTipoBase(tfloatkwNode2);
        }
	nodeList.add(ptipobaseNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new14() /* reduce ACadeiaTipoBase */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PTipoBase ptipobaseNode1;
        {
            // Block
        TStringKw tstringkwNode2;
        tstringkwNode2 = (TStringKw)nodeArrayList1.get(0);

        ptipobaseNode1 = new ACadeiaTipoBase(tstringkwNode2);
        }
	nodeList.add(ptipobaseNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new15() /* reduce AIdAtribuicao */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PIdAtribuicao pidatribuicaoNode1;
        {
            // Block
        PValor pvalorNode2;
        PExp pexpNode3;
        pvalorNode2 = (PValor)nodeArrayList1.get(0);
        pexpNode3 = (PExp)nodeArrayList3.get(0);

        pidatribuicaoNode1 = new AIdAtribuicao(pvalorNode2, pexpNode3);
        }
	nodeList.add(pidatribuicaoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new16() /* reduce AArrayComp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PArrayComp parraycompNode1;
        {
            // Block
        TId tidNode2;
        PExp pexpNode3;
        tidNode2 = (TId)nodeArrayList2.get(0);
        pexpNode3 = (PExp)nodeArrayList4.get(0);

        parraycompNode1 = new AArrayComp(tidNode2, pexpNode3);
        }
	nodeList.add(parraycompNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new17() /* reduce ASingleDecProcOrDecFuncList */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        PDecProcOrDecFunc pdecprocordecfuncNode1;
        pdecprocordecfuncNode1 = (PDecProcOrDecFunc)nodeArrayList1.get(0);
	if(pdecprocordecfuncNode1 != null)
	{
	  listNode2.add(pdecprocordecfuncNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new18() /* reduce AMultipleDecProcOrDecFuncList */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        PDecProcOrDecFunc pdecprocordecfuncNode1;
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        pdecprocordecfuncNode1 = (PDecProcOrDecFunc)nodeArrayList1.get(0);
        listNode2 = (LinkedList)nodeArrayList2.get(0);
	if(pdecprocordecfuncNode1 != null)
	{
	  listNode3.add(pdecprocordecfuncNode1);
	}
	if(listNode2 != null)
	{
	  listNode3.addAll(listNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new19() /* reduce ADecVarDecProcOrDecFunc */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PDecProcOrDecFunc pdecprocordecfuncNode1;
        {
            // Block
        PDecProc pdecprocNode2;
        pdecprocNode2 = (PDecProc)nodeArrayList1.get(0);

        pdecprocordecfuncNode1 = new ADecProcDecProcOrDecFunc(pdecprocNode2);
        }
	nodeList.add(pdecprocordecfuncNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new20() /* reduce ADecConstDecProcOrDecFunc */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PDecProcOrDecFunc pdecprocordecfuncNode1;
        {
            // Block
        PDecFunc pdecfuncNode2;
        pdecfuncNode2 = (PDecFunc)nodeArrayList1.get(0);

        pdecprocordecfuncNode1 = new ADecFuncDecProcOrDecFunc(pdecfuncNode2);
        }
	nodeList.add(pdecprocordecfuncNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new21() /* reduce AAdecproc1DecProc */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PDecProc pdecprocNode1;
        {
            // Block
        TId tidNode2;
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        PComando pcomandoNode4;
        tidNode2 = (TId)nodeArrayList3.get(0);
        {
            // Block
        }
        pcomandoNode4 = (PComando)nodeArrayList6.get(0);

        pdecprocNode1 = new ADecProc(tidNode2, listNode3, pcomandoNode4);
        }
	nodeList.add(pdecprocNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new22() /* reduce AAdecproc2DecProc */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PDecProc pdecprocNode1;
        {
            // Block
        TId tidNode2;
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        PComando pcomandoNode4;
        tidNode2 = (TId)nodeArrayList4.get(0);
        {
            // Block
        }
        pcomandoNode4 = (PComando)nodeArrayList7.get(0);

        pdecprocNode1 = new ADecProc(tidNode2, listNode3, pcomandoNode4);
        }
	nodeList.add(pdecprocNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new23() /* reduce AAdecproc3DecProc */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PDecProc pdecprocNode1;
        {
            // Block
        TId tidNode2;
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        PComando pcomandoNode5;
        tidNode2 = (TId)nodeArrayList3.get(0);
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        listNode3 = (LinkedList)nodeArrayList5.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }
        pcomandoNode5 = (PComando)nodeArrayList7.get(0);

        pdecprocNode1 = new ADecProc(tidNode2, listNode4, pcomandoNode5);
        }
	nodeList.add(pdecprocNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new24() /* reduce AAdecproc4DecProc */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PDecProc pdecprocNode1;
        {
            // Block
        TId tidNode2;
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        PComando pcomandoNode5;
        tidNode2 = (TId)nodeArrayList4.get(0);
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        listNode3 = (LinkedList)nodeArrayList6.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }
        pcomandoNode5 = (PComando)nodeArrayList8.get(0);

        pdecprocNode1 = new ADecProc(tidNode2, listNode4, pcomandoNode5);
        }
	nodeList.add(pdecprocNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new25() /* reduce AAdecfunc1DecFunc */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PDecFunc pdecfuncNode1;
        {
            // Block
        PTipo ptipoNode2;
        TId tidNode3;
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        PExp pexpNode5;
        ptipoNode2 = (PTipo)nodeArrayList3.get(0);
        tidNode3 = (TId)nodeArrayList4.get(0);
        {
            // Block
        }
        pexpNode5 = (PExp)nodeArrayList7.get(0);

        pdecfuncNode1 = new ADecFunc(ptipoNode2, tidNode3, listNode4, pexpNode5);
        }
	nodeList.add(pdecfuncNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new26() /* reduce AAdecfunc2DecFunc */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PDecFunc pdecfuncNode1;
        {
            // Block
        PTipo ptipoNode2;
        TId tidNode3;
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        PExp pexpNode6;
        ptipoNode2 = (PTipo)nodeArrayList3.get(0);
        tidNode3 = (TId)nodeArrayList4.get(0);
        {
            // Block
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        listNode4 = (LinkedList)nodeArrayList6.get(0);
	if(listNode4 != null)
	{
	  listNode5.addAll(listNode4);
	}
        }
        pexpNode6 = (PExp)nodeArrayList8.get(0);

        pdecfuncNode1 = new ADecFunc(ptipoNode2, tidNode3, listNode5, pexpNode6);
        }
	nodeList.add(pdecfuncNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new27() /* reduce ASingleParametros */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        PParametro pparametroNode1;
        pparametroNode1 = (PParametro)nodeArrayList1.get(0);
	if(pparametroNode1 != null)
	{
	  listNode2.add(pparametroNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new28() /* reduce AMultipleParametros */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        PParametro pparametroNode1;
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        pparametroNode1 = (PParametro)nodeArrayList1.get(0);
        listNode2 = (LinkedList)nodeArrayList3.get(0);
	if(pparametroNode1 != null)
	{
	  listNode3.add(pparametroNode1);
	}
	if(listNode2 != null)
	{
	  listNode3.addAll(listNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new29() /* reduce AParametroParametro */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PParametro pparametroNode1;
        {
            // Block
        PTipoParam ptipoparamNode2;
        TId tidNode3;
        ptipoparamNode2 = (PTipoParam)nodeArrayList1.get(0);
        tidNode3 = (TId)nodeArrayList2.get(0);

        pparametroNode1 = new AParametro(ptipoparamNode2, tidNode3);
        }
	nodeList.add(pparametroNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new30() /* reduce AParTipoParam */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PTipoParam ptipoparamNode1;
        {
            // Block
        PTipoBase ptipobaseNode2;
        ptipobaseNode2 = (PTipoBase)nodeArrayList1.get(0);

        ptipoparamNode1 = new AParTipoParam(ptipobaseNode2);
        }
	nodeList.add(ptipoparamNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new31() /* reduce AArrParTipoParam */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PTipoParam ptipoparamNode1;
        {
            // Block
        PTipoParam ptipoparamNode2;
        ptipoparamNode2 = (PTipoParam)nodeArrayList1.get(0);

        ptipoparamNode1 = new AArrParTipoParam(ptipoparamNode2);
        }
	nodeList.add(ptipoparamNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new32() /* reduce ASingleComandoList */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        PComando pcomandoNode1;
        pcomandoNode1 = (PComando)nodeArrayList1.get(0);
	if(pcomandoNode1 != null)
	{
	  listNode2.add(pcomandoNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new33() /* reduce AMultipleComandoList */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        PComando pcomandoNode1;
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        pcomandoNode1 = (PComando)nodeArrayList1.get(0);
        listNode2 = (LinkedList)nodeArrayList2.get(0);
	if(pcomandoNode1 != null)
	{
	  listNode3.add(pcomandoNode1);
	}
	if(listNode2 != null)
	{
	  listNode3.addAll(listNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new34() /* reduce ASeComando */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PComando pcomandoNode1;
        {
            // Block
        PExp pexpNode2;
        PComando pcomandoNode3;
        pexpNode2 = (PExp)nodeArrayList3.get(0);
        pcomandoNode3 = (PComando)nodeArrayList5.get(0);

        pcomandoNode1 = new ASeComando(pexpNode2, pcomandoNode3);
        }
	nodeList.add(pcomandoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new35() /* reduce ASeSenaoComando */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PComando pcomandoNode1;
        {
            // Block
        PExp pexpNode2;
        PComandoAux pcomandoauxNode3;
        PComando pcomandoNode4;
        pexpNode2 = (PExp)nodeArrayList3.get(0);
        pcomandoauxNode3 = (PComandoAux)nodeArrayList5.get(0);
        pcomandoNode4 = (PComando)nodeArrayList7.get(0);

        pcomandoNode1 = new ASeSenaoComando(pexpNode2, pcomandoauxNode3, pcomandoNode4);
        }
	nodeList.add(pcomandoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new36() /* reduce AEnquantoComando */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PComando pcomandoNode1;
        {
            // Block
        PExp pexpNode2;
        PComando pcomandoNode3;
        pexpNode2 = (PExp)nodeArrayList3.get(0);
        pcomandoNode3 = (PComando)nodeArrayList5.get(0);

        pcomandoNode1 = new AEnquantoComando(pexpNode2, pcomandoNode3);
        }
	nodeList.add(pcomandoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new37() /* reduce AIdAtribuicaoComando */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PComando pcomandoNode1;
        {
            // Block
        PIdAtribuicao pidatribuicaoNode2;
        pidatribuicaoNode2 = (PIdAtribuicao)nodeArrayList1.get(0);

        pcomandoNode1 = new AIdAtribuicaoComando(pidatribuicaoNode2);
        }
	nodeList.add(pcomandoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new38() /* reduce AProcComando */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PComando pcomandoNode1;
        {
            // Block
        PChamadaProcedimento pchamadaprocedimentoNode2;
        pchamadaprocedimentoNode2 = (PChamadaProcedimento)nodeArrayList1.get(0);

        pcomandoNode1 = new AProcComando(pchamadaprocedimentoNode2);
        }
	nodeList.add(pcomandoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new39() /* reduce ABlocoVazioComando */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PComando pcomandoNode1;
        {
            // Block
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        }
        {
            // Block
        }

        pcomandoNode1 = new ADecVarOrDecConstComando(listNode2, listNode3);
        }
	nodeList.add(pcomandoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new40() /* reduce ABDecVarOrDecConstComando */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PComando pcomandoNode1;
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        listNode2 = (LinkedList)nodeArrayList2.get(0);
	if(listNode2 != null)
	{
	  listNode3.addAll(listNode2);
	}
        }
        {
            // Block
        }

        pcomandoNode1 = new ADecVarOrDecConstComando(listNode3, listNode4);
        }
	nodeList.add(pcomandoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new41() /* reduce ABDecVarOrDecConst2Comando */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PComando pcomandoNode1;
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        listNode2 = (LinkedList)nodeArrayList2.get(0);
	if(listNode2 != null)
	{
	  listNode3.addAll(listNode2);
	}
        }
        {
            // Block
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        listNode4 = (LinkedList)nodeArrayList3.get(0);
	if(listNode4 != null)
	{
	  listNode5.addAll(listNode4);
	}
        }

        pcomandoNode1 = new ADecVarOrDecConstComando(listNode3, listNode5);
        }
	nodeList.add(pcomandoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new42() /* reduce ABlocoComandoComando */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PComando pcomandoNode1;
        {
            // Block
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        {
            // Block
        }
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        listNode3 = (LinkedList)nodeArrayList2.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }

        pcomandoNode1 = new ADecVarOrDecConstComando(listNode2, listNode4);
        }
	nodeList.add(pcomandoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new43() /* reduce ASeComandoAux */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PComandoAux pcomandoauxNode1;
        {
            // Block
        PExp pexpNode2;
        PComandoAux pcomandoauxNode3;
        PComandoAux pcomandoauxNode4;
        pexpNode2 = (PExp)nodeArrayList3.get(0);
        pcomandoauxNode3 = (PComandoAux)nodeArrayList5.get(0);
        pcomandoauxNode4 = (PComandoAux)nodeArrayList7.get(0);

        pcomandoauxNode1 = new ASeComandoAux(pexpNode2, pcomandoauxNode3, pcomandoauxNode4);
        }
	nodeList.add(pcomandoauxNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new44() /* reduce AEnquantoComandoAux */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PComandoAux pcomandoauxNode1;
        {
            // Block
        PExp pexpNode2;
        PComandoAux pcomandoauxNode3;
        pexpNode2 = (PExp)nodeArrayList3.get(0);
        pcomandoauxNode3 = (PComandoAux)nodeArrayList5.get(0);

        pcomandoauxNode1 = new AEnquantoComandoAux(pexpNode2, pcomandoauxNode3);
        }
	nodeList.add(pcomandoauxNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new45() /* reduce AProcComandoAux */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PComandoAux pcomandoauxNode1;
        {
            // Block
        PChamadaProcedimento pchamadaprocedimentoNode2;
        pchamadaprocedimentoNode2 = (PChamadaProcedimento)nodeArrayList1.get(0);

        pcomandoauxNode1 = new AProcComandoAux(pchamadaprocedimentoNode2);
        }
	nodeList.add(pcomandoauxNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new46() /* reduce AIdAtribuicaoComandoAux */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PComandoAux pcomandoauxNode1;
        {
            // Block
        PIdAtribuicao pidatribuicaoNode2;
        pidatribuicaoNode2 = (PIdAtribuicao)nodeArrayList1.get(0);

        pcomandoauxNode1 = new AIdAtribuicaoComandoAux(pidatribuicaoNode2);
        }
	nodeList.add(pcomandoauxNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new47() /* reduce ABlocoVazioComandoAux */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PComandoAux pcomandoauxNode1;
        {
            // Block
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        }
        {
            // Block
        }

        pcomandoauxNode1 = new ADecVarOrDecConstComandoAux(listNode2, listNode3);
        }
	nodeList.add(pcomandoauxNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new48() /* reduce ABDecVarOrDecConstComandoAux */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PComandoAux pcomandoauxNode1;
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        listNode2 = (LinkedList)nodeArrayList2.get(0);
	if(listNode2 != null)
	{
	  listNode3.addAll(listNode2);
	}
        }
        {
            // Block
        }

        pcomandoauxNode1 = new ADecVarOrDecConstComandoAux(listNode3, listNode4);
        }
	nodeList.add(pcomandoauxNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new49() /* reduce ABDecVarOrDecConst2ComandoAux */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PComandoAux pcomandoauxNode1;
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        listNode2 = (LinkedList)nodeArrayList2.get(0);
	if(listNode2 != null)
	{
	  listNode3.addAll(listNode2);
	}
        }
        {
            // Block
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        listNode4 = (LinkedList)nodeArrayList3.get(0);
	if(listNode4 != null)
	{
	  listNode5.addAll(listNode4);
	}
        }

        pcomandoauxNode1 = new ADecVarOrDecConstComandoAux(listNode3, listNode5);
        }
	nodeList.add(pcomandoauxNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new50() /* reduce ABlocoComandoComandoAux */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PComandoAux pcomandoauxNode1;
        {
            // Block
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        {
            // Block
        }
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        listNode3 = (LinkedList)nodeArrayList2.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }

        pcomandoauxNode1 = new ADecVarOrDecConstComandoAux(listNode2, listNode4);
        }
	nodeList.add(pcomandoauxNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new51() /* reduce AIdValor */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PValor pvalorNode1;
        {
            // Block
        TId tidNode2;
        tidNode2 = (TId)nodeArrayList1.get(0);

        pvalorNode1 = new AIdValor(tidNode2);
        }
	nodeList.add(pvalorNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new52() /* reduce AExpValor */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PValor pvalorNode1;
        {
            // Block
        PValor pvalorNode2;
        PExp pexpNode3;
        pvalorNode2 = (PValor)nodeArrayList1.get(0);
        pexpNode3 = (PExp)nodeArrayList3.get(0);

        pvalorNode1 = new AExpValor(pvalorNode2, pexpNode3);
        }
	nodeList.add(pvalorNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new53() /* reduce ASingleExpList */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        PExp pexpNode1;
        pexpNode1 = (PExp)nodeArrayList1.get(0);
	if(pexpNode1 != null)
	{
	  listNode2.add(pexpNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new54() /* reduce AMultipleExpList */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        PExp pexpNode1;
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        pexpNode1 = (PExp)nodeArrayList1.get(0);
        listNode2 = (LinkedList)nodeArrayList3.get(0);
	if(pexpNode1 != null)
	{
	  listNode3.add(pexpNode1);
	}
	if(listNode2 != null)
	{
	  listNode3.addAll(listNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new55() /* reduce ASeExp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        PExp pexpNode2;
        PExp pexpNode3;
        PExp pexpNode4;
        pexpNode2 = (PExp)nodeArrayList3.get(0);
        pexpNode3 = (PExp)nodeArrayList5.get(0);
        pexpNode4 = (PExp)nodeArrayList7.get(0);

        pexpNode1 = new ASeExp(pexpNode2, pexpNode3, pexpNode4);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new56() /* reduce ADisjucaoExp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        pexpNode1 = (PExp)nodeArrayList1.get(0);
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new57() /* reduce AOuDisjucao */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        PExp pexpNode2;
        PExp pexpNode3;
        pexpNode2 = (PExp)nodeArrayList1.get(0);
        pexpNode3 = (PExp)nodeArrayList3.get(0);

        pexpNode1 = new AOuExp(pexpNode2, pexpNode3);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new58() /* reduce AConjDisjucao */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        pexpNode1 = (PExp)nodeArrayList1.get(0);
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new59() /* reduce AEConjuncao */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        PExp pexpNode2;
        PExp pexpNode3;
        pexpNode2 = (PExp)nodeArrayList1.get(0);
        pexpNode3 = (PExp)nodeArrayList3.get(0);

        pexpNode1 = new AEExp(pexpNode2, pexpNode3);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new60() /* reduce AComparadorConjuncao */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        pexpNode1 = (PExp)nodeArrayList1.get(0);
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new61() /* reduce AEqualComparador */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        PExp pexpNode2;
        PExp pexpNode3;
        pexpNode2 = (PExp)nodeArrayList1.get(0);
        pexpNode3 = (PExp)nodeArrayList3.get(0);

        pexpNode1 = new AEqualExp(pexpNode2, pexpNode3);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new62() /* reduce AGreaterEqComparador */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        PExp pexpNode2;
        PExp pexpNode3;
        pexpNode2 = (PExp)nodeArrayList1.get(0);
        pexpNode3 = (PExp)nodeArrayList3.get(0);

        pexpNode1 = new AGreaterEqExp(pexpNode2, pexpNode3);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new63() /* reduce AGreaterComparador */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        PExp pexpNode2;
        PExp pexpNode3;
        pexpNode2 = (PExp)nodeArrayList1.get(0);
        pexpNode3 = (PExp)nodeArrayList3.get(0);

        pexpNode1 = new AGreaterExp(pexpNode2, pexpNode3);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new64() /* reduce AAdicaoComparador */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        pexpNode1 = (PExp)nodeArrayList1.get(0);
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new65() /* reduce ASomaAdicao */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        PExp pexpNode2;
        PExp pexpNode3;
        pexpNode2 = (PExp)nodeArrayList1.get(0);
        pexpNode3 = (PExp)nodeArrayList3.get(0);

        pexpNode1 = new ASomaExp(pexpNode2, pexpNode3);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new66() /* reduce ASubAdicao */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        PExp pexpNode2;
        PExp pexpNode3;
        pexpNode2 = (PExp)nodeArrayList1.get(0);
        pexpNode3 = (PExp)nodeArrayList3.get(0);

        pexpNode1 = new AMinusExp(pexpNode2, pexpNode3);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new67() /* reduce AProdutoAdicao */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        pexpNode1 = (PExp)nodeArrayList1.get(0);
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new68() /* reduce AMultProduto */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        PExp pexpNode2;
        PExp pexpNode3;
        pexpNode2 = (PExp)nodeArrayList1.get(0);
        pexpNode3 = (PExp)nodeArrayList3.get(0);

        pexpNode1 = new AMultExp(pexpNode2, pexpNode3);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new69() /* reduce ADivProduto */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        PExp pexpNode2;
        PExp pexpNode3;
        pexpNode2 = (PExp)nodeArrayList1.get(0);
        pexpNode3 = (PExp)nodeArrayList3.get(0);

        pexpNode1 = new ADivExp(pexpNode2, pexpNode3);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new70() /* reduce AModProduto */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        PExp pexpNode2;
        PExp pexpNode3;
        pexpNode2 = (PExp)nodeArrayList1.get(0);
        pexpNode3 = (PExp)nodeArrayList3.get(0);

        pexpNode1 = new AModExp(pexpNode2, pexpNode3);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new71() /* reduce ARelUnariaProduto */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        pexpNode1 = (PExp)nodeArrayList1.get(0);
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new72() /* reduce AIncrementoRelUnaria */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        PExp pexpNode2;
        pexpNode2 = (PExp)nodeArrayList2.get(0);

        pexpNode1 = new AIncrementoExp(pexpNode2);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new73() /* reduce ADecrementoRelUnaria */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        PExp pexpNode2;
        pexpNode2 = (PExp)nodeArrayList2.get(0);

        pexpNode1 = new ADecrementoExp(pexpNode2);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new74() /* reduce ANegacaoRelUnaria */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        PExp pexpNode2;
        pexpNode2 = (PExp)nodeArrayList2.get(0);

        pexpNode1 = new ANegacaoExp(pexpNode2);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new75() /* reduce AValueRelUnaria */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        pexpNode1 = (PExp)nodeArrayList1.get(0);
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new76() /* reduce AIntValue */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        TInt tintNode2;
        tintNode2 = (TInt)nodeArrayList1.get(0);

        pexpNode1 = new AIntExp(tintNode2);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new77() /* reduce ABoolValue */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        TBool tboolNode2;
        tboolNode2 = (TBool)nodeArrayList1.get(0);

        pexpNode1 = new ABoolExp(tboolNode2);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new78() /* reduce ARealValue */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        TFloat tfloatNode2;
        tfloatNode2 = (TFloat)nodeArrayList1.get(0);

        pexpNode1 = new ARealExp(tfloatNode2);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new79() /* reduce ACadeiaValue */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        TString tstringNode2;
        tstringNode2 = (TString)nodeArrayList1.get(0);

        pexpNode1 = new ACadeiaExp(tstringNode2);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new80() /* reduce AValorValue */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        PValor pvalorNode2;
        pvalorNode2 = (PValor)nodeArrayList1.get(0);

        pexpNode1 = new AValorExp(pvalorNode2);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new81() /* reduce AParValue */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        PExp pexpNode2;
        pexpNode2 = (PExp)nodeArrayList2.get(0);

        pexpNode1 = new AParExp(pexpNode2);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new82() /* reduce ACFuncValue */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        PChamadaFuncao pchamadafuncaoNode2;
        pchamadafuncaoNode2 = (PChamadaFuncao)nodeArrayList1.get(0);

        pexpNode1 = new ACFuncExp(pchamadafuncaoNode2);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new83() /* reduce ABExpValue */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        PBlocoExpressoes pblocoexpressoesNode2;
        pblocoexpressoesNode2 = (PBlocoExpressoes)nodeArrayList1.get(0);

        pexpNode1 = new ABExpExp(pblocoexpressoesNode2);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new84() /* reduce AArrayCompValue */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        PArrayComp parraycompNode2;
        parraycompNode2 = (PArrayComp)nodeArrayList1.get(0);

        pexpNode1 = new AArrayCompExp(parraycompNode2);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new85() /* reduce ABExpBlocoExpressoes */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PBlocoExpressoes pblocoexpressoesNode1;
        {
            // Block
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        PExp pexpNode3;
        {
            // Block
        }
        pexpNode3 = (PExp)nodeArrayList2.get(0);

        pblocoexpressoesNode1 = new ABlocoExpressoes(listNode2, pexpNode3);
        }
	nodeList.add(pblocoexpressoesNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new86() /* reduce ABDecConstExpBlocoExpressoes */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PBlocoExpressoes pblocoexpressoesNode1;
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        PExp pexpNode4;
        {
            // Block
        PDecConst pdecconstNode2;
        pdecconstNode2 = (PDecConst)nodeArrayList2.get(0);
	if(pdecconstNode2 != null)
	{
	  listNode3.add(pdecconstNode2);
	}
        }
        pexpNode4 = (PExp)nodeArrayList3.get(0);

        pblocoexpressoesNode1 = new ABlocoExpressoes(listNode3, pexpNode4);
        }
	nodeList.add(pblocoexpressoesNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new87() /* reduce AAchamadafuncao1ChamadaFuncao */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PChamadaFuncao pchamadafuncaoNode1;
        {
            // Block
        TId tidNode2;
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        tidNode2 = (TId)nodeArrayList1.get(0);
        {
            // Block
        }

        pchamadafuncaoNode1 = new AChamadaFuncao(tidNode2, listNode3);
        }
	nodeList.add(pchamadafuncaoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new88() /* reduce AAchamadafuncao2ChamadaFuncao */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PChamadaFuncao pchamadafuncaoNode1;
        {
            // Block
        TId tidNode2;
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        tidNode2 = (TId)nodeArrayList1.get(0);
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        listNode3 = (LinkedList)nodeArrayList3.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }

        pchamadafuncaoNode1 = new AChamadaFuncao(tidNode2, listNode4);
        }
	nodeList.add(pchamadafuncaoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new89() /* reduce AAchamadaprocedimento1ChamadaProcedimento */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PChamadaProcedimento pchamadaprocedimentoNode1;
        {
            // Block
        TId tidNode2;
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        tidNode2 = (TId)nodeArrayList1.get(0);
        {
            // Block
        }

        pchamadaprocedimentoNode1 = new AChamadaProcedimento(tidNode2, listNode3);
        }
	nodeList.add(pchamadaprocedimentoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new90() /* reduce AAchamadaprocedimento2ChamadaProcedimento */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PChamadaProcedimento pchamadaprocedimentoNode1;
        {
            // Block
        TId tidNode2;
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        tidNode2 = (TId)nodeArrayList1.get(0);
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        listNode3 = (LinkedList)nodeArrayList3.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }

        pchamadaprocedimentoNode1 = new AChamadaProcedimento(tidNode2, listNode4);
        }
	nodeList.add(pchamadaprocedimentoNode1);
        return nodeList;
    }



    private static int[][][] actionTable;
/*      {
			{{-1, ERROR, 0}, {0, SHIFT, 1}, {1, SHIFT, 2}, {5, SHIFT, 3}, {6, SHIFT, 4}, {33, SHIFT, 5}, },
			{{-1, ERROR, 1}, {36, SHIFT, 15}, },
			{{-1, ERROR, 2}, {36, SHIFT, 16}, },
			{{-1, ERROR, 3}, {36, SHIFT, 17}, },
			{{-1, ERROR, 4}, {36, SHIFT, 18}, },
			{{-1, ERROR, 5}, {6, SHIFT, 19}, },
			{{-1, ERROR, 6}, {38, ACCEPT, -1}, },
			{{-1, ERROR, 7}, {5, SHIFT, 3}, {6, SHIFT, 4}, {33, SHIFT, 5}, },
			{{-1, REDUCE, 2}, {0, SHIFT, 1}, {1, SHIFT, 2}, },
			{{-1, REDUCE, 4}, },
			{{-1, REDUCE, 5}, },
			{{-1, REDUCE, 0}, },
			{{-1, REDUCE, 17}, {5, SHIFT, 3}, {6, SHIFT, 4}, {33, SHIFT, 5}, },
			{{-1, REDUCE, 19}, },
			{{-1, REDUCE, 20}, },
			{{-1, ERROR, 15}, {12, SHIFT, 23}, {13, SHIFT, 24}, {14, SHIFT, 25}, {15, SHIFT, 26}, },
			{{-1, ERROR, 16}, {12, SHIFT, 23}, {13, SHIFT, 24}, {14, SHIFT, 25}, {15, SHIFT, 26}, },
			{{-1, ERROR, 17}, {12, SHIFT, 23}, {13, SHIFT, 24}, {14, SHIFT, 25}, {15, SHIFT, 26}, },
			{{-1, ERROR, 18}, {37, SHIFT, 31}, },
			{{-1, ERROR, 19}, {36, SHIFT, 32}, },
			{{-1, REDUCE, 1}, },
			{{-1, REDUCE, 3}, },
			{{-1, REDUCE, 18}, },
			{{-1, REDUCE, 11}, },
			{{-1, REDUCE, 13}, },
			{{-1, REDUCE, 14}, },
			{{-1, REDUCE, 12}, },
			{{-1, ERROR, 27}, {30, SHIFT, 33}, {37, SHIFT, 34}, },
			{{-1, REDUCE, 9}, },
			{{-1, ERROR, 29}, {30, SHIFT, 33}, {37, SHIFT, 37}, },
			{{-1, ERROR, 30}, {30, SHIFT, 33}, {37, SHIFT, 39}, },
			{{-1, ERROR, 31}, {28, SHIFT, 40}, },
			{{-1, ERROR, 32}, {37, SHIFT, 41}, },
			{{-1, ERROR, 33}, {2, SHIFT, 42}, {9, SHIFT, 43}, {10, SHIFT, 44}, {16, SHIFT, 45}, {17, SHIFT, 46}, {18, SHIFT, 47}, {19, SHIFT, 48}, {20, SHIFT, 49}, {21, SHIFT, 50}, {28, SHIFT, 51}, {30, SHIFT, 52}, {37, SHIFT, 53}, },
			{{-1, REDUCE, 51}, {34, SHIFT, 66}, },
			{{-1, ERROR, 35}, {34, SHIFT, 67}, },
			{{-1, ERROR, 36}, {30, SHIFT, 68}, {32, SHIFT, 69}, },
			{{-1, REDUCE, 51}, },
			{{-1, ERROR, 38}, {34, SHIFT, 70}, },
			{{-1, ERROR, 39}, {28, SHIFT, 71}, },
			{{-1, ERROR, 40}, {12, SHIFT, 23}, {13, SHIFT, 24}, {14, SHIFT, 25}, {15, SHIFT, 26}, {29, SHIFT, 72}, },
			{{-1, ERROR, 41}, {28, SHIFT, 77}, },
			{{-1, ERROR, 42}, {28, SHIFT, 78}, },
			{{-1, ERROR, 43}, {10, SHIFT, 44}, {16, SHIFT, 45}, {17, SHIFT, 46}, {18, SHIFT, 47}, {19, SHIFT, 48}, {28, SHIFT, 51}, {30, SHIFT, 52}, {37, SHIFT, 53}, },
			{{-1, ERROR, 44}, {1, SHIFT, 2}, {2, SHIFT, 42}, {9, SHIFT, 43}, {10, SHIFT, 44}, {16, SHIFT, 45}, {17, SHIFT, 46}, {18, SHIFT, 47}, {19, SHIFT, 48}, {20, SHIFT, 49}, {21, SHIFT, 50}, {28, SHIFT, 51}, {30, SHIFT, 52}, {37, SHIFT, 53}, },
			{{-1, REDUCE, 76}, },
			{{-1, REDUCE, 78}, },
			{{-1, REDUCE, 79}, },
			{{-1, REDUCE, 77}, },
			{{-1, ERROR, 49}, {10, SHIFT, 44}, {16, SHIFT, 45}, {17, SHIFT, 46}, {18, SHIFT, 47}, {19, SHIFT, 48}, {28, SHIFT, 51}, {30, SHIFT, 52}, {37, SHIFT, 53}, },
			{{-1, ERROR, 50}, {10, SHIFT, 44}, {16, SHIFT, 45}, {17, SHIFT, 46}, {18, SHIFT, 47}, {19, SHIFT, 48}, {28, SHIFT, 51}, {30, SHIFT, 52}, {37, SHIFT, 53}, },
			{{-1, ERROR, 51}, {2, SHIFT, 42}, {9, SHIFT, 43}, {10, SHIFT, 44}, {16, SHIFT, 45}, {17, SHIFT, 46}, {18, SHIFT, 47}, {19, SHIFT, 48}, {20, SHIFT, 49}, {21, SHIFT, 50}, {28, SHIFT, 51}, {30, SHIFT, 52}, {37, SHIFT, 53}, },
			{{-1, ERROR, 52}, {37, SHIFT, 85}, },
			{{-1, REDUCE, 51}, {28, SHIFT, 86}, },
			{{-1, REDUCE, 84}, },
			{{-1, REDUCE, 80}, {30, SHIFT, 68}, },
			{{-1, ERROR, 56}, {31, SHIFT, 87}, },
			{{-1, REDUCE, 56}, {8, SHIFT, 88}, },
			{{-1, REDUCE, 58}, {7, SHIFT, 89}, },
			{{-1, REDUCE, 60}, {25, SHIFT, 90}, {26, SHIFT, 91}, {27, SHIFT, 92}, },
			{{-1, REDUCE, 64}, {20, SHIFT, 93}, {21, SHIFT, 94}, },
			{{-1, REDUCE, 67}, {22, SHIFT, 95}, {23, SHIFT, 96}, {24, SHIFT, 97}, },
			{{-1, REDUCE, 71}, },
			{{-1, REDUCE, 75}, },
			{{-1, REDUCE, 83}, },
			{{-1, REDUCE, 82}, },
			{{-1, REDUCE, 6}, },
			{{-1, REDUCE, 7}, },
			{{-1, ERROR, 68}, {2, SHIFT, 42}, {9, SHIFT, 43}, {10, SHIFT, 44}, {16, SHIFT, 45}, {17, SHIFT, 46}, {18, SHIFT, 47}, {19, SHIFT, 48}, {20, SHIFT, 49}, {21, SHIFT, 50}, {28, SHIFT, 51}, {30, SHIFT, 52}, {37, SHIFT, 53}, },
			{{-1, ERROR, 69}, {2, SHIFT, 42}, {9, SHIFT, 43}, {10, SHIFT, 44}, {16, SHIFT, 45}, {17, SHIFT, 46}, {18, SHIFT, 47}, {19, SHIFT, 48}, {20, SHIFT, 49}, {21, SHIFT, 50}, {28, SHIFT, 51}, {30, SHIFT, 52}, {37, SHIFT, 53}, },
			{{-1, REDUCE, 8}, },
			{{-1, ERROR, 71}, {12, SHIFT, 23}, {13, SHIFT, 24}, {14, SHIFT, 25}, {15, SHIFT, 26}, {29, SHIFT, 100}, },
			{{-1, ERROR, 72}, {2, SHIFT, 102}, {4, SHIFT, 103}, {10, SHIFT, 104}, {37, SHIFT, 105}, },
			{{-1, REDUCE, 30}, },
			{{-1, ERROR, 74}, {29, SHIFT, 109}, },
			{{-1, REDUCE, 27}, {35, SHIFT, 110}, },
			{{-1, ERROR, 76}, {30, SHIFT, 111}, {37, SHIFT, 112}, },
			{{-1, ERROR, 77}, {12, SHIFT, 23}, {13, SHIFT, 24}, {14, SHIFT, 25}, {15, SHIFT, 26}, {29, SHIFT, 113}, },
			{{-1, ERROR, 78}, {2, SHIFT, 42}, {9, SHIFT, 43}, {10, SHIFT, 44}, {16, SHIFT, 45}, {17, SHIFT, 46}, {18, SHIFT, 47}, {19, SHIFT, 48}, {20, SHIFT, 49}, {21, SHIFT, 50}, {28, SHIFT, 51}, {30, SHIFT, 52}, {37, SHIFT, 53}, },
			{{-1, REDUCE, 74}, },
			{{-1, ERROR, 80}, {2, SHIFT, 42}, {9, SHIFT, 43}, {10, SHIFT, 44}, {16, SHIFT, 45}, {17, SHIFT, 46}, {18, SHIFT, 47}, {19, SHIFT, 48}, {20, SHIFT, 49}, {21, SHIFT, 50}, {28, SHIFT, 51}, {30, SHIFT, 52}, {37, SHIFT, 53}, },
			{{-1, ERROR, 81}, {11, SHIFT, 117}, },
			{{-1, REDUCE, 72}, },
			{{-1, REDUCE, 73}, },
			{{-1, ERROR, 84}, {29, SHIFT, 118}, },
			{{-1, ERROR, 85}, {35, SHIFT, 119}, },
			{{-1, ERROR, 86}, {2, SHIFT, 42}, {9, SHIFT, 43}, {10, SHIFT, 44}, {16, SHIFT, 45}, {17, SHIFT, 46}, {18, SHIFT, 47}, {19, SHIFT, 48}, {20, SHIFT, 49}, {21, SHIFT, 50}, {28, SHIFT, 51}, {29, SHIFT, 120}, {30, SHIFT, 52}, {37, SHIFT, 53}, },
			{{-1, REDUCE, 10}, },
			{{-1, ERROR, 88}, {9, SHIFT, 43}, {10, SHIFT, 44}, {16, SHIFT, 45}, {17, SHIFT, 46}, {18, SHIFT, 47}, {19, SHIFT, 48}, {20, SHIFT, 49}, {21, SHIFT, 50}, {28, SHIFT, 51}, {30, SHIFT, 52}, {37, SHIFT, 53}, },
			{{-1, ERROR, 89}, {9, SHIFT, 43}, {10, SHIFT, 44}, {16, SHIFT, 45}, {17, SHIFT, 46}, {18, SHIFT, 47}, {19, SHIFT, 48}, {20, SHIFT, 49}, {21, SHIFT, 50}, {28, SHIFT, 51}, {30, SHIFT, 52}, {37, SHIFT, 53}, },
			{{-1, ERROR, 90}, {9, SHIFT, 43}, {10, SHIFT, 44}, {16, SHIFT, 45}, {17, SHIFT, 46}, {18, SHIFT, 47}, {19, SHIFT, 48}, {20, SHIFT, 49}, {21, SHIFT, 50}, {28, SHIFT, 51}, {30, SHIFT, 52}, {37, SHIFT, 53}, },
			{{-1, ERROR, 91}, {9, SHIFT, 43}, {10, SHIFT, 44}, {16, SHIFT, 45}, {17, SHIFT, 46}, {18, SHIFT, 47}, {19, SHIFT, 48}, {20, SHIFT, 49}, {21, SHIFT, 50}, {28, SHIFT, 51}, {30, SHIFT, 52}, {37, SHIFT, 53}, },
			{{-1, ERROR, 92}, {9, SHIFT, 43}, {10, SHIFT, 44}, {16, SHIFT, 45}, {17, SHIFT, 46}, {18, SHIFT, 47}, {19, SHIFT, 48}, {20, SHIFT, 49}, {21, SHIFT, 50}, {28, SHIFT, 51}, {30, SHIFT, 52}, {37, SHIFT, 53}, },
			{{-1, ERROR, 93}, {9, SHIFT, 43}, {10, SHIFT, 44}, {16, SHIFT, 45}, {17, SHIFT, 46}, {18, SHIFT, 47}, {19, SHIFT, 48}, {20, SHIFT, 49}, {21, SHIFT, 50}, {28, SHIFT, 51}, {30, SHIFT, 52}, {37, SHIFT, 53}, },
			{{-1, ERROR, 94}, {9, SHIFT, 43}, {10, SHIFT, 44}, {16, SHIFT, 45}, {17, SHIFT, 46}, {18, SHIFT, 47}, {19, SHIFT, 48}, {20, SHIFT, 49}, {21, SHIFT, 50}, {28, SHIFT, 51}, {30, SHIFT, 52}, {37, SHIFT, 53}, },
			{{-1, ERROR, 95}, {9, SHIFT, 43}, {10, SHIFT, 44}, {16, SHIFT, 45}, {17, SHIFT, 46}, {18, SHIFT, 47}, {19, SHIFT, 48}, {20, SHIFT, 49}, {21, SHIFT, 50}, {28, SHIFT, 51}, {30, SHIFT, 52}, {37, SHIFT, 53}, },
			{{-1, ERROR, 96}, {9, SHIFT, 43}, {10, SHIFT, 44}, {16, SHIFT, 45}, {17, SHIFT, 46}, {18, SHIFT, 47}, {19, SHIFT, 48}, {20, SHIFT, 49}, {21, SHIFT, 50}, {28, SHIFT, 51}, {30, SHIFT, 52}, {37, SHIFT, 53}, },
			{{-1, ERROR, 97}, {9, SHIFT, 43}, {10, SHIFT, 44}, {16, SHIFT, 45}, {17, SHIFT, 46}, {18, SHIFT, 47}, {19, SHIFT, 48}, {20, SHIFT, 49}, {21, SHIFT, 50}, {28, SHIFT, 51}, {30, SHIFT, 52}, {37, SHIFT, 53}, },
			{{-1, ERROR, 98}, {31, SHIFT, 133}, },
			{{-1, REDUCE, 15}, },
			{{-1, ERROR, 100}, {2, SHIFT, 42}, {9, SHIFT, 43}, {10, SHIFT, 44}, {16, SHIFT, 45}, {17, SHIFT, 46}, {18, SHIFT, 47}, {19, SHIFT, 48}, {20, SHIFT, 49}, {21, SHIFT, 50}, {28, SHIFT, 51}, {30, SHIFT, 52}, {37, SHIFT, 53}, },
			{{-1, ERROR, 101}, {29, SHIFT, 135}, },
			{{-1, ERROR, 102}, {28, SHIFT, 136}, },
			{{-1, ERROR, 103}, {28, SHIFT, 137}, },
			{{-1, ERROR, 104}, {0, SHIFT, 1}, {1, SHIFT, 2}, {2, SHIFT, 102}, {4, SHIFT, 103}, {10, SHIFT, 104}, {11, SHIFT, 138}, {37, SHIFT, 105}, },
			{{-1, REDUCE, 51}, {28, SHIFT, 142}, },
			{{-1, ERROR, 106}, {34, SHIFT, 143}, },
			{{-1, REDUCE, 21}, },
			{{-1, ERROR, 108}, {34, SHIFT, 144}, },
			{{-1, ERROR, 109}, {2, SHIFT, 102}, {4, SHIFT, 103}, {10, SHIFT, 104}, {37, SHIFT, 105}, },
			{{-1, ERROR, 110}, {12, SHIFT, 23}, {13, SHIFT, 24}, {14, SHIFT, 25}, {15, SHIFT, 26}, },
			{{-1, ERROR, 111}, {31, SHIFT, 147}, },
			{{-1, REDUCE, 29}, },
			{{-1, ERROR, 113}, {2, SHIFT, 102}, {4, SHIFT, 103}, {10, SHIFT, 104}, {37, SHIFT, 105}, },
			{{-1, ERROR, 114}, {29, SHIFT, 149}, },
			{{-1, ERROR, 115}, {29, SHIFT, 150}, },
			{{-1, ERROR, 116}, {11, SHIFT, 151}, },
			{{-1, REDUCE, 85}, },
			{{-1, REDUCE, 81}, },
			{{-1, ERROR, 119}, {2, SHIFT, 42}, {9, SHIFT, 43}, {10, SHIFT, 44}, {16, SHIFT, 45}, {17, SHIFT, 46}, {18, SHIFT, 47}, {19, SHIFT, 48}, {20, SHIFT, 49}, {21, SHIFT, 50}, {28, SHIFT, 51}, {30, SHIFT, 52}, {37, SHIFT, 53}, },
			{{-1, REDUCE, 87}, },
			{{-1, ERROR, 121}, {29, SHIFT, 153}, },
			{{-1, REDUCE, 53}, {35, SHIFT, 154}, },
			{{-1, REDUCE, 57}, {7, SHIFT, 89}, },
			{{-1, REDUCE, 59}, {25, SHIFT, 90}, {26, SHIFT, 91}, {27, SHIFT, 92}, },
			{{-1, REDUCE, 63}, {20, SHIFT, 93}, {21, SHIFT, 94}, },
			{{-1, REDUCE, 62}, {20, SHIFT, 93}, {21, SHIFT, 94}, },
			{{-1, REDUCE, 61}, {20, SHIFT, 93}, {21, SHIFT, 94}, },
			{{-1, REDUCE, 65}, {22, SHIFT, 95}, {23, SHIFT, 96}, {24, SHIFT, 97}, },
			{{-1, REDUCE, 66}, {22, SHIFT, 95}, {23, SHIFT, 96}, {24, SHIFT, 97}, },
			{{-1, REDUCE, 68}, },
			{{-1, REDUCE, 69}, },
			{{-1, REDUCE, 70}, },
			{{-1, REDUCE, 52}, },
			{{-1, REDUCE, 25}, },
			{{-1, ERROR, 135}, {2, SHIFT, 42}, {9, SHIFT, 43}, {10, SHIFT, 44}, {16, SHIFT, 45}, {17, SHIFT, 46}, {18, SHIFT, 47}, {19, SHIFT, 48}, {20, SHIFT, 49}, {21, SHIFT, 50}, {28, SHIFT, 51}, {30, SHIFT, 52}, {37, SHIFT, 53}, },
			{{-1, ERROR, 136}, {2, SHIFT, 42}, {9, SHIFT, 43}, {10, SHIFT, 44}, {16, SHIFT, 45}, {17, SHIFT, 46}, {18, SHIFT, 47}, {19, SHIFT, 48}, {20, SHIFT, 49}, {21, SHIFT, 50}, {28, SHIFT, 51}, {30, SHIFT, 52}, {37, SHIFT, 53}, },
			{{-1, ERROR, 137}, {2, SHIFT, 42}, {9, SHIFT, 43}, {10, SHIFT, 44}, {16, SHIFT, 45}, {17, SHIFT, 46}, {18, SHIFT, 47}, {19, SHIFT, 48}, {20, SHIFT, 49}, {21, SHIFT, 50}, {28, SHIFT, 51}, {30, SHIFT, 52}, {37, SHIFT, 53}, },
			{{-1, REDUCE, 39}, },
			{{-1, ERROR, 139}, {2, SHIFT, 102}, {4, SHIFT, 103}, {10, SHIFT, 104}, {11, SHIFT, 158}, {37, SHIFT, 105}, },
			{{-1, ERROR, 140}, {11, SHIFT, 160}, },
			{{-1, REDUCE, 32}, {2, SHIFT, 102}, {4, SHIFT, 103}, {10, SHIFT, 104}, {37, SHIFT, 105}, },
			{{-1, ERROR, 142}, {2, SHIFT, 42}, {9, SHIFT, 43}, {10, SHIFT, 44}, {16, SHIFT, 45}, {17, SHIFT, 46}, {18, SHIFT, 47}, {19, SHIFT, 48}, {20, SHIFT, 49}, {21, SHIFT, 50}, {28, SHIFT, 51}, {29, SHIFT, 162}, {30, SHIFT, 52}, {37, SHIFT, 53}, },
			{{-1, REDUCE, 37}, },
			{{-1, REDUCE, 38}, },
			{{-1, REDUCE, 23}, },
			{{-1, REDUCE, 28}, },
			{{-1, REDUCE, 31}, },
			{{-1, REDUCE, 22}, },
			{{-1, ERROR, 149}, {2, SHIFT, 102}, {4, SHIFT, 103}, {10, SHIFT, 104}, {37, SHIFT, 105}, },
			{{-1, ERROR, 150}, {2, SHIFT, 42}, {9, SHIFT, 43}, {10, SHIFT, 44}, {16, SHIFT, 45}, {17, SHIFT, 46}, {18, SHIFT, 47}, {19, SHIFT, 48}, {20, SHIFT, 49}, {21, SHIFT, 50}, {28, SHIFT, 51}, {30, SHIFT, 52}, {37, SHIFT, 53}, },
			{{-1, REDUCE, 86}, },
			{{-1, ERROR, 152}, {31, SHIFT, 166}, },
			{{-1, REDUCE, 88}, },
			{{-1, ERROR, 154}, {2, SHIFT, 42}, {9, SHIFT, 43}, {10, SHIFT, 44}, {16, SHIFT, 45}, {17, SHIFT, 46}, {18, SHIFT, 47}, {19, SHIFT, 48}, {20, SHIFT, 49}, {21, SHIFT, 50}, {28, SHIFT, 51}, {30, SHIFT, 52}, {37, SHIFT, 53}, },
			{{-1, REDUCE, 26}, },
			{{-1, ERROR, 156}, {29, SHIFT, 168}, },
			{{-1, ERROR, 157}, {29, SHIFT, 169}, },
			{{-1, REDUCE, 40}, },
			{{-1, ERROR, 159}, {11, SHIFT, 170}, },
			{{-1, REDUCE, 42}, },
			{{-1, REDUCE, 33}, },
			{{-1, REDUCE, 89}, },
			{{-1, ERROR, 163}, {29, SHIFT, 171}, },
			{{-1, REDUCE, 24}, },
			{{-1, ERROR, 165}, {3, SHIFT, 172}, },
			{{-1, REDUCE, 16}, },
			{{-1, REDUCE, 54}, },
			{{-1, ERROR, 168}, {2, SHIFT, 173}, {4, SHIFT, 174}, {10, SHIFT, 175}, {37, SHIFT, 105}, },
			{{-1, ERROR, 169}, {2, SHIFT, 102}, {4, SHIFT, 103}, {10, SHIFT, 104}, {37, SHIFT, 105}, },
			{{-1, REDUCE, 41}, },
			{{-1, REDUCE, 90}, },
			{{-1, ERROR, 172}, {9, SHIFT, 43}, {10, SHIFT, 44}, {16, SHIFT, 45}, {17, SHIFT, 46}, {18, SHIFT, 47}, {19, SHIFT, 48}, {20, SHIFT, 49}, {21, SHIFT, 50}, {28, SHIFT, 51}, {30, SHIFT, 52}, {37, SHIFT, 53}, },
			{{-1, ERROR, 173}, {28, SHIFT, 182}, },
			{{-1, ERROR, 174}, {28, SHIFT, 183}, },
			{{-1, ERROR, 175}, {0, SHIFT, 1}, {1, SHIFT, 2}, {2, SHIFT, 102}, {4, SHIFT, 103}, {10, SHIFT, 104}, {11, SHIFT, 184}, {37, SHIFT, 105}, },
			{{-1, ERROR, 176}, {34, SHIFT, 187}, },
			{{-1, REDUCE, 34}, },
			{{-1, ERROR, 178}, {3, SHIFT, 188}, },
			{{-1, ERROR, 179}, {34, SHIFT, 189}, },
			{{-1, REDUCE, 36}, },
			{{-1, REDUCE, 55}, {8, SHIFT, 88}, },
			{{-1, ERROR, 182}, {2, SHIFT, 42}, {9, SHIFT, 43}, {10, SHIFT, 44}, {16, SHIFT, 45}, {17, SHIFT, 46}, {18, SHIFT, 47}, {19, SHIFT, 48}, {20, SHIFT, 49}, {21, SHIFT, 50}, {28, SHIFT, 51}, {30, SHIFT, 52}, {37, SHIFT, 53}, },
			{{-1, ERROR, 183}, {2, SHIFT, 42}, {9, SHIFT, 43}, {10, SHIFT, 44}, {16, SHIFT, 45}, {17, SHIFT, 46}, {18, SHIFT, 47}, {19, SHIFT, 48}, {20, SHIFT, 49}, {21, SHIFT, 50}, {28, SHIFT, 51}, {30, SHIFT, 52}, {37, SHIFT, 53}, },
			{{-1, REDUCE, 39}, {3, REDUCE, 47}, },
			{{-1, ERROR, 185}, {2, SHIFT, 102}, {4, SHIFT, 103}, {10, SHIFT, 104}, {11, SHIFT, 192}, {37, SHIFT, 105}, },
			{{-1, ERROR, 186}, {11, SHIFT, 194}, },
			{{-1, REDUCE, 37}, {3, REDUCE, 46}, },
			{{-1, ERROR, 188}, {2, SHIFT, 102}, {4, SHIFT, 103}, {10, SHIFT, 104}, {37, SHIFT, 105}, },
			{{-1, REDUCE, 38}, {3, REDUCE, 45}, },
			{{-1, ERROR, 190}, {29, SHIFT, 196}, },
			{{-1, ERROR, 191}, {29, SHIFT, 197}, },
			{{-1, REDUCE, 40}, {3, REDUCE, 48}, },
			{{-1, ERROR, 193}, {11, SHIFT, 198}, },
			{{-1, REDUCE, 42}, {3, REDUCE, 50}, },
			{{-1, REDUCE, 35}, },
			{{-1, ERROR, 196}, {2, SHIFT, 173}, {4, SHIFT, 174}, {10, SHIFT, 175}, {37, SHIFT, 105}, },
			{{-1, ERROR, 197}, {2, SHIFT, 173}, {4, SHIFT, 174}, {10, SHIFT, 175}, {37, SHIFT, 105}, },
			{{-1, REDUCE, 41}, {3, REDUCE, 49}, },
			{{-1, ERROR, 199}, {3, SHIFT, 201}, },
			{{-1, REDUCE, 44}, },
			{{-1, ERROR, 201}, {2, SHIFT, 173}, {4, SHIFT, 174}, {10, SHIFT, 175}, {37, SHIFT, 105}, },
			{{-1, REDUCE, 43}, },
        };*/
    private static int[][][] gotoTable;
/*      {
			{{-1, 6}, },
			{{-1, 7}, {8, 21}, {104, 139}, {175, 185}, },
			{{-1, 8}, },
			{{-1, 9}, },
			{{-1, 10}, {44, 80}, },
			{{-1, 27}, {16, 29}, {17, 30}, },
			{{-1, 73}, {15, 28}, {16, 28}, {17, 28}, },
			{{-1, 106}, {27, 35}, {29, 38}, {168, 176}, {196, 176}, {197, 176}, {201, 176}, },
			{{-1, 54}, },
			{{-1, 11}, {7, 20}, {12, 22}, },
			{{-1, 12}, },
			{{-1, 13}, },
			{{-1, 14}, },
			{{-1, 74}, {71, 101}, {77, 114}, {110, 146}, },
			{{-1, 75}, },
			{{-1, 76}, },
			{{-1, 140}, {139, 159}, {141, 161}, {175, 186}, {185, 193}, },
			{{-1, 141}, {72, 107}, {109, 145}, {113, 148}, {149, 164}, {168, 177}, {169, 180}, {188, 195}, {196, 177}, {197, 180}, {201, 195}, },
			{{-1, 178}, {196, 199}, {197, 200}, {201, 202}, },
			{{-1, 55}, {27, 36}, {29, 36}, {72, 36}, {104, 36}, {109, 36}, {113, 36}, {139, 36}, {141, 36}, {149, 36}, {168, 36}, {169, 36}, {175, 36}, {185, 36}, {188, 36}, {196, 36}, {197, 36}, {201, 36}, },
			{{-1, 121}, {142, 163}, {154, 167}, },
			{{-1, 122}, {33, 56}, {44, 81}, {51, 84}, {68, 98}, {69, 99}, {78, 115}, {80, 116}, {100, 134}, {119, 152}, {135, 155}, {136, 156}, {137, 157}, {150, 165}, {182, 190}, {183, 191}, },
			{{-1, 57}, {172, 181}, },
			{{-1, 58}, {88, 123}, },
			{{-1, 59}, {89, 124}, },
			{{-1, 60}, {90, 125}, {91, 126}, {92, 127}, },
			{{-1, 61}, {93, 128}, {94, 129}, },
			{{-1, 62}, {95, 130}, {96, 131}, {97, 132}, },
			{{-1, 63}, {43, 79}, {49, 82}, {50, 83}, },
			{{-1, 64}, },
			{{-1, 65}, },
			{{-1, 108}, {168, 179}, {196, 179}, {197, 179}, {201, 179}, },
        };*/
    private static String[] errorMessages;
/*      {
			"expecting: 'var', 'const', 'funcao', 'procedimento', '>>'",
			"expecting: ':'",
			"expecting: 'procedimento'",
			"expecting: EOF",
			"expecting: 'funcao', 'procedimento', '>>'",
			"expecting: 'var', 'const', 'se', 'enquanto', 'funcao', 'procedimento', 'comece', 'termine', '>>', id",
			"expecting: 'funcao', 'procedimento', '>>', EOF",
			"expecting: 'inteiro', 'real', 'cadeia', 'booleano'",
			"expecting: id",
			"expecting: 'se', 'enquanto', 'funcao', 'procedimento', 'comece', 'termine', '>>', id",
			"expecting: '[', id",
			"expecting: '('",
			"expecting: 'se', 'nao', 'comece', int, float, string, bool, '+', '-', '(', '[', id",
			"expecting: '[', '<<', ';'",
			"expecting: ';'",
			"expecting: '[', '<<'",
			"expecting: 'inteiro', 'real', 'cadeia', 'booleano', ')'",
			"expecting: 'comece', int, float, string, bool, '(', '[', id",
			"expecting: 'const', 'se', 'nao', 'comece', int, float, string, bool, '+', '-', '(', '[', id",
			"expecting: 'senao', 'funcao', 'procedimento', 'e', 'ou', 'termine', '+', '-', '*', '/', '%', '>', '>=', '=', ')', ']', '>>', ';', '|', EOF",
			"expecting: 'senao', 'funcao', 'procedimento', 'e', 'ou', 'termine', '+', '-', '*', '/', '%', '>', '>=', '=', '(', ')', '[', ']', '>>', ';', '|', EOF",
			"expecting: 'senao', 'funcao', 'procedimento', 'e', 'ou', 'termine', '+', '-', '*', '/', '%', '>', '>=', '=', ')', '[', ']', '>>', ';', '|', EOF",
			"expecting: ']'",
			"expecting: 'senao', 'funcao', 'procedimento', 'ou', 'termine', ')', ']', '>>', ';', '|', EOF",
			"expecting: 'senao', 'funcao', 'procedimento', 'e', 'ou', 'termine', ')', ']', '>>', ';', '|', EOF",
			"expecting: 'senao', 'funcao', 'procedimento', 'e', 'ou', 'termine', '>', '>=', '=', ')', ']', '>>', ';', '|', EOF",
			"expecting: 'senao', 'funcao', 'procedimento', 'e', 'ou', 'termine', '+', '-', '>', '>=', '=', ')', ']', '>>', ';', '|', EOF",
			"expecting: 'var', 'const', 'se', 'enquanto', 'funcao', 'procedimento', 'nao', 'comece', 'termine', int, float, string, bool, '+', '-', '(', '[', '>>', id",
			"expecting: 'se', 'enquanto', 'comece', id",
			"expecting: ')'",
			"expecting: ')', '|'",
			"expecting: 'termine'",
			"expecting: '|'",
			"expecting: 'se', 'nao', 'comece', int, float, string, bool, '+', '-', '(', ')', '[', id",
			"expecting: 'nao', 'comece', int, float, string, bool, '+', '-', '(', '[', id",
			"expecting: 'var', 'const', 'se', 'enquanto', 'comece', 'termine', id",
			"expecting: '(', '[', '<<'",
			"expecting: 'senao', 'funcao', 'procedimento', 'e', 'ou', 'termine', '+', '-', '*', '/', '%', '>', '>=', '=', ')', '[', ']', '<<', '>>', ';', '|', EOF",
			"expecting: 'se', 'enquanto', 'funcao', 'procedimento', 'comece', 'termine', '>>', id, EOF",
			"expecting: 'se', 'enquanto', 'comece', 'termine', id",
			"expecting: 'senao'",
			"expecting: 'se', 'senao', 'enquanto', 'funcao', 'procedimento', 'comece', 'termine', '>>', id, EOF",
        };*/
    private static int[] errors;
/*      {
			0, 1, 1, 1, 1, 2, 3, 4, 5, 5, 5, 3, 6, 6, 6, 7, 7, 7, 8, 1, 3, 9, 3, 10, 10, 10, 10, 10, 10, 10, 10, 11, 8, 12, 13, 14, 15, 15, 14, 11, 16, 11, 11, 17, 18, 19, 19, 19, 19, 17, 17, 12, 8, 20, 19, 21, 22, 23, 24, 25, 26, 19, 19, 19, 19, 19, 5, 5, 12, 12, 27, 16, 28, 10, 29, 30, 10, 16, 12, 19, 12, 31, 19, 19, 29, 32, 33, 10, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 22, 14, 12, 29, 11, 11, 35, 36, 14, 6, 14, 28, 7, 22, 30, 28, 29, 29, 31, 19, 19, 12, 19, 29, 30, 24, 25, 26, 26, 26, 19, 19, 19, 19, 19, 37, 6, 12, 12, 12, 38, 39, 31, 39, 33, 38, 38, 6, 29, 10, 6, 28, 12, 19, 22, 19, 12, 6, 29, 29, 38, 31, 38, 31, 14, 29, 6, 40, 19, 29, 28, 28, 38, 14, 34, 11, 11, 35, 14, 38, 40, 14, 38, 23, 12, 12, 41, 39, 31, 41, 28, 41, 29, 29, 41, 31, 41, 38, 28, 28, 41, 40, 40, 28, 40, 
        };*/

    static 
    {
        try
        {
            DataInputStream s = new DataInputStream(
                new BufferedInputStream(
                Parser.class.getResourceAsStream("parser.dat")));

            // read actionTable
            int length = s.readInt();
            Parser.actionTable = new int[length][][];
            for(int i = 0; i < Parser.actionTable.length; i++)
            {
                length = s.readInt();
                Parser.actionTable[i] = new int[length][3];
                for(int j = 0; j < Parser.actionTable[i].length; j++)
                {
                for(int k = 0; k < 3; k++)
                {
                    Parser.actionTable[i][j][k] = s.readInt();
                }
                }
            }

            // read gotoTable
            length = s.readInt();
            gotoTable = new int[length][][];
            for(int i = 0; i < gotoTable.length; i++)
            {
                length = s.readInt();
                gotoTable[i] = new int[length][2];
                for(int j = 0; j < gotoTable[i].length; j++)
                {
                for(int k = 0; k < 2; k++)
                {
                    gotoTable[i][j][k] = s.readInt();
                }
                }
            }

            // read errorMessages
            length = s.readInt();
            errorMessages = new String[length];
            for(int i = 0; i < errorMessages.length; i++)
            {
                length = s.readInt();
                StringBuffer buffer = new StringBuffer();

                for(int j = 0; j < length; j++)
                {
                buffer.append(s.readChar());
                }
                errorMessages[i] = buffer.toString();
            }

            // read errors
            length = s.readInt();
            errors = new int[length];
            for(int i = 0; i < errors.length; i++)
            {
                errors[i] = s.readInt();
            }

            s.close();
        }
        catch(Exception e)
        {
            throw new RuntimeException("The file \"parser.dat\" is either missing or corrupted.");
        }
    }
}
