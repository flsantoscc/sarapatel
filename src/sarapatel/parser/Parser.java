/* This file was generated by SableCC (http://www.sablecc.org/). */

package sarapatel.parser;

import sarapatel.lexer.*;
import sarapatel.node.*;
import sarapatel.analysis.*;
import java.util.*;

import java.io.DataInputStream;
import java.io.BufferedInputStream;
import java.io.IOException;

@SuppressWarnings("nls")
public class Parser
{
    public final Analysis ignoredTokens = new AnalysisAdapter();

    protected ArrayList<Object> nodeList;

    private final Lexer lexer;
    private final ListIterator<Object> stack = new LinkedList<Object>().listIterator();
    private int last_pos;
    private int last_line;
    private Token last_token;
    private final TokenIndex converter = new TokenIndex();
    private final int[] action = new int[2];

    private final static int SHIFT = 0;
    private final static int REDUCE = 1;
    private final static int ACCEPT = 2;
    private final static int ERROR = 3;

    public Parser(@SuppressWarnings("hiding") Lexer lexer)
    {
        this.lexer = lexer;
    }

    @SuppressWarnings({"unchecked","unused"})
    private void push(int numstate, ArrayList<Object> listNode) throws ParserException, LexerException, IOException
    {
        this.nodeList = listNode;

        if(!this.stack.hasNext())
        {
            this.stack.add(new State(numstate, this.nodeList));
            return;
        }

        State s = (State) this.stack.next();
        s.state = numstate;
        s.nodes = this.nodeList;
    }

    private int goTo(int index)
    {
        int state = state();
        int low = 1;
        int high = gotoTable[index].length - 1;
        int value = gotoTable[index][0][1];

        while(low <= high)
        {
            // int middle = (low + high) / 2;
            int middle = (low + high) >>> 1;

            if(state < gotoTable[index][middle][0])
            {
                high = middle - 1;
            }
            else if(state > gotoTable[index][middle][0])
            {
                low = middle + 1;
            }
            else
            {
                value = gotoTable[index][middle][1];
                break;
            }
        }

        return value;
    }

    private int state()
    {
        State s = (State) this.stack.previous();
        this.stack.next();
        return s.state;
    }

    private ArrayList<Object> pop()
    {
        return ((State) this.stack.previous()).nodes;
    }

    private int index(Switchable token)
    {
        this.converter.index = -1;
        token.apply(this.converter);
        return this.converter.index;
    }

    @SuppressWarnings("unchecked")
    public Start parse() throws ParserException, LexerException, IOException
    {
        push(0, null);
        List<Node> ign = null;
        while(true)
        {
            while(index(this.lexer.peek()) == -1)
            {
                if(ign == null)
                {
                    ign = new LinkedList<Node>();
                }

                ign.add(this.lexer.next());
            }

            if(ign != null)
            {
                this.ignoredTokens.setIn(this.lexer.peek(), ign);
                ign = null;
            }

            this.last_pos = this.lexer.peek().getPos();
            this.last_line = this.lexer.peek().getLine();
            this.last_token = this.lexer.peek();

            int index = index(this.lexer.peek());
            this.action[0] = Parser.actionTable[state()][0][1];
            this.action[1] = Parser.actionTable[state()][0][2];

            int low = 1;
            int high = Parser.actionTable[state()].length - 1;

            while(low <= high)
            {
                int middle = (low + high) / 2;

                if(index < Parser.actionTable[state()][middle][0])
                {
                    high = middle - 1;
                }
                else if(index > Parser.actionTable[state()][middle][0])
                {
                    low = middle + 1;
                }
                else
                {
                    this.action[0] = Parser.actionTable[state()][middle][1];
                    this.action[1] = Parser.actionTable[state()][middle][2];
                    break;
                }
            }

            switch(this.action[0])
            {
                case SHIFT:
		    {
		        ArrayList<Object> list = new ArrayList<Object>();
		        list.add(this.lexer.next());
                        push(this.action[1], list);
                    }
		    break;
                case REDUCE:
                    {
                        int reduction = this.action[1];
                        if(reduction < 500) reduce_0(reduction);
                    }
                    break;
                case ACCEPT:
                    {
                        EOF node2 = (EOF) this.lexer.next();
                        PPrograma node1 = (PPrograma) pop().get(0);
                        Start node = new Start(node1, node2);
                        return node;
                    }
                case ERROR:
                    throw new ParserException(this.last_token,
                        "[" + this.last_line + "," + this.last_pos + "] " +
                        Parser.errorMessages[Parser.errors[this.action[1]]]);
            }
        }
    }

    private void reduce_0(int reduction) throws IOException, LexerException, ParserException
    {
        switch(reduction)
        {
            case 0: /* reduce AAprogramaprograma1Programa */
            {
                ArrayList<Object> list = new0();
                push(goTo(0), list);
            }
            break;
            case 1: /* reduce AAprogramaprograma2Programa */
            {
                ArrayList<Object> list = new1();
                push(goTo(0), list);
            }
            break;
            case 2: /* reduce ADecProcedimentoDecProcPrincipal */
            {
                ArrayList<Object> list = new2();
                push(goTo(1), list);
            }
            break;
            case 3: /* reduce ADecVarDecVarOrConst */
            {
                ArrayList<Object> list = new3();
                push(goTo(2), list);
            }
            break;
            case 4: /* reduce ADecConstDecVarOrConst */
            {
                ArrayList<Object> list = new4();
                push(goTo(2), list);
            }
            break;
            case 5: /* reduce ADecProcDecProcOrFuncao */
            {
                ArrayList<Object> list = new5();
                push(goTo(3), list);
            }
            break;
            case 6: /* reduce ADecFuncaoDecProcOrFuncao */
            {
                ArrayList<Object> list = new6();
                push(goTo(3), list);
            }
            break;
            case 7: /* reduce ADecVarDecVar */
            {
                ArrayList<Object> list = new7();
                push(goTo(4), list);
            }
            break;
            case 8: /* reduce ADecConsDecCons */
            {
                ArrayList<Object> list = new8();
                push(goTo(5), list);
            }
            break;
            case 9: /* reduce AIdIdOrIdAtribuicao */
            {
                ArrayList<Object> list = new9();
                push(goTo(6), list);
            }
            break;
            case 10: /* reduce AIdAtribuicaoIdOrIdAtribuicao */
            {
                ArrayList<Object> list = new10();
                push(goTo(6), list);
            }
            break;
            case 11: /* reduce ATipoBaseTipo */
            {
                ArrayList<Object> list = new11();
                push(goTo(7), list);
            }
            break;
            case 12: /* reduce ATipoBrktTipo */
            {
                ArrayList<Object> list = new12();
                push(goTo(7), list);
            }
            break;
            case 13: /* reduce AInteiroTipoBase */
            {
                ArrayList<Object> list = new13();
                push(goTo(8), list);
            }
            break;
            case 14: /* reduce ABooleanoTipoBase */
            {
                ArrayList<Object> list = new14();
                push(goTo(8), list);
            }
            break;
            case 15: /* reduce ARealTipoBase */
            {
                ArrayList<Object> list = new15();
                push(goTo(8), list);
            }
            break;
            case 16: /* reduce ACadeiaTipoBase */
            {
                ArrayList<Object> list = new16();
                push(goTo(8), list);
            }
            break;
            case 17: /* reduce AArrayCompArrayComp */
            {
                ArrayList<Object> list = new17();
                push(goTo(9), list);
            }
            break;
            case 18: /* reduce AAdecprocedimentodecprocedimento1DecProcedimento */
            {
                ArrayList<Object> list = new18();
                push(goTo(10), list);
            }
            break;
            case 19: /* reduce AAdecprocedimentodecprocedimento2DecProcedimento */
            {
                ArrayList<Object> list = new19();
                push(goTo(10), list);
            }
            break;
            case 20: /* reduce ADecFuncaoDecFuncao */
            {
                ArrayList<Object> list = new20();
                push(goTo(11), list);
            }
            break;
            case 21: /* reduce AAparametrosparametros1Parametros */
            {
                ArrayList<Object> list = new21();
                push(goTo(12), list);
            }
            break;
            case 22: /* reduce AAparametrosparametros2Parametros */
            {
                ArrayList<Object> list = new22();
                push(goTo(12), list);
            }
            break;
            case 23: /* reduce AApipeparametroclosureparametrosaux1ParametrosAux */
            {
                ArrayList<Object> list = new23();
                push(goTo(13), list);
            }
            break;
            case 24: /* reduce AApipeparametroclosureparametrosaux2ParametrosAux */
            {
                ArrayList<Object> list = new24();
                push(goTo(13), list);
            }
            break;
            case 25: /* reduce APipeParametroPipeParametro */
            {
                ArrayList<Object> list = new25();
                push(goTo(14), list);
            }
            break;
            case 26: /* reduce AParametroParametro */
            {
                ArrayList<Object> list = new26();
                push(goTo(15), list);
            }
            break;
            case 27: /* reduce ATipoBaseTipoParametro */
            {
                ArrayList<Object> list = new27();
                push(goTo(16), list);
            }
            break;
            case 28: /* reduce ATipoParametroBrktTipoParametro */
            {
                ArrayList<Object> list = new28();
                push(goTo(16), list);
            }
            break;
            case 29: /* reduce ASeComandoComando */
            {
                ArrayList<Object> list = new29();
                push(goTo(17), list);
            }
            break;
            case 30: /* reduce ASeSenaoComandoComando */
            {
                ArrayList<Object> list = new30();
                push(goTo(17), list);
            }
            break;
            case 31: /* reduce AEnquantoComando */
            {
                ArrayList<Object> list = new31();
                push(goTo(17), list);
            }
            break;
            case 32: /* reduce AIdAtribuicaoComando */
            {
                ArrayList<Object> list = new32();
                push(goTo(17), list);
            }
            break;
            case 33: /* reduce AChamadaProcComando */
            {
                ArrayList<Object> list = new33();
                push(goTo(17), list);
            }
            break;
            case 34: /* reduce ABlocoComandosComando */
            {
                ArrayList<Object> list = new34();
                push(goTo(17), list);
            }
            break;
            case 35: /* reduce AAblococomandosblococomandos1BlocoComandos */
            {
                ArrayList<Object> list = new35();
                push(goTo(18), list);
            }
            break;
            case 36: /* reduce AAblococomandosblococomandos2BlocoComandos */
            {
                ArrayList<Object> list = new36();
                push(goTo(18), list);
            }
            break;
            case 37: /* reduce AAblococomandosblococomandos3BlocoComandos */
            {
                ArrayList<Object> list = new37();
                push(goTo(18), list);
            }
            break;
            case 38: /* reduce AAblococomandosblococomandos4BlocoComandos */
            {
                ArrayList<Object> list = new38();
                push(goTo(18), list);
            }
            break;
            case 39: /* reduce AIdValor */
            {
                ArrayList<Object> list = new39();
                push(goTo(19), list);
            }
            break;
            case 40: /* reduce AValorBrktsValor */
            {
                ArrayList<Object> list = new40();
                push(goTo(19), list);
            }
            break;
            case 41: /* reduce AAblocoexpressoesblocoexpressoes1BlocoExpressoes */
            {
                ArrayList<Object> list = new41();
                push(goTo(20), list);
            }
            break;
            case 42: /* reduce AAblocoexpressoesblocoexpressoes2BlocoExpressoes */
            {
                ArrayList<Object> list = new42();
                push(goTo(20), list);
            }
            break;
            case 43: /* reduce AChamadaFuncaoChamadaFuncao */
            {
                ArrayList<Object> list = new43();
                push(goTo(21), list);
            }
            break;
            case 44: /* reduce AChamadaProcedimentoChamadaProcedimento */
            {
                ArrayList<Object> list = new44();
                push(goTo(22), list);
            }
            break;
            case 45: /* reduce AAlistaexplistaexp1ListaExp */
            {
                ArrayList<Object> list = new45();
                push(goTo(23), list);
            }
            break;
            case 46: /* reduce AAlistaexplistaexp2ListaExp */
            {
                ArrayList<Object> list = new46();
                push(goTo(23), list);
            }
            break;
            case 47: /* reduce AAauxlistaexpaux1ListaExpAux */
            {
                ArrayList<Object> list = new47();
                push(goTo(24), list);
            }
            break;
            case 48: /* reduce AAauxlistaexpaux2ListaExpAux */
            {
                ArrayList<Object> list = new48();
                push(goTo(24), list);
            }
            break;
            case 49: /* reduce APipeExpPipeExp */
            {
                ArrayList<Object> list = new49();
                push(goTo(25), list);
            }
            break;
            case 50: /* reduce AIntegerNumber */
            {
                ArrayList<Object> list = new50();
                push(goTo(26), list);
            }
            break;
            case 51: /* reduce ARealNumber */
            {
                ArrayList<Object> list = new51();
                push(goTo(26), list);
            }
            break;
            case 52: /* reduce ABooleanBooleanExp */
            {
                ArrayList<Object> list = new52();
                push(goTo(27), list);
            }
            break;
            case 53: /* reduce ACadeiaCadeiaExp */
            {
                ArrayList<Object> list = new53();
                push(goTo(28), list);
            }
            break;
            case 54: /* reduce AIntegerLiteral */
            {
                ArrayList<Object> list = new54();
                push(goTo(29), list);
            }
            break;
            case 55: /* reduce ARealLiteral */
            {
                ArrayList<Object> list = new55();
                push(goTo(29), list);
            }
            break;
            case 56: /* reduce ABooleanLiteral */
            {
                ArrayList<Object> list = new56();
                push(goTo(29), list);
            }
            break;
            case 57: /* reduce ACadeiaLiteral */
            {
                ArrayList<Object> list = new57();
                push(goTo(29), list);
            }
            break;
            case 58: /* reduce AMultiplicationMultiplicativeExp */
            {
                ArrayList<Object> list = new58();
                push(goTo(30), list);
            }
            break;
            case 59: /* reduce ANumberMultiplicativeExp */
            {
                ArrayList<Object> list = new59();
                push(goTo(30), list);
            }
            break;
            case 60: /* reduce ADivisionDividitiveExp */
            {
                ArrayList<Object> list = new60();
                push(goTo(31), list);
            }
            break;
            case 61: /* reduce AModModExp */
            {
                ArrayList<Object> list = new61();
                push(goTo(32), list);
            }
            break;
            case 62: /* reduce AAdditiveExpAdditiveExp */
            {
                ArrayList<Object> list = new62();
                push(goTo(33), list);
            }
            break;
            case 63: /* reduce ASubtractiveExpSubtractiveExp */
            {
                ArrayList<Object> list = new63();
                push(goTo(34), list);
            }
            break;
            case 64: /* reduce ABooleanExpExp */
            {
                ArrayList<Object> list = new64();
                push(goTo(35), list);
            }
            break;
            case 65: /* reduce ACadeiaExpExp */
            {
                ArrayList<Object> list = new65();
                push(goTo(35), list);
            }
            break;
            case 66: /* reduce AValorExp */
            {
                ArrayList<Object> list = new66();
                push(goTo(35), list);
            }
            break;
            case 67: /* reduce ASurroundedExpExp */
            {
                ArrayList<Object> list = new67();
                push(goTo(35), list);
            }
            break;
            case 68: /* reduce AChamadaFuncaoExp */
            {
                ArrayList<Object> list = new68();
                push(goTo(35), list);
            }
            break;
            case 69: /* reduce AArrayCompExp */
            {
                ArrayList<Object> list = new69();
                push(goTo(35), list);
            }
            break;
            case 70: /* reduce AMinusExpExp */
            {
                ArrayList<Object> list = new70();
                push(goTo(35), list);
            }
            break;
            case 71: /* reduce ASubtractiveExpExp */
            {
                ArrayList<Object> list = new71();
                push(goTo(35), list);
            }
            break;
            case 72: /* reduce AModExpExp */
            {
                ArrayList<Object> list = new72();
                push(goTo(35), list);
            }
            break;
            case 73: /* reduce AEqualExpExp */
            {
                ArrayList<Object> list = new73();
                push(goTo(35), list);
            }
            break;
            case 74: /* reduce AGreaterExp */
            {
                ArrayList<Object> list = new74();
                push(goTo(35), list);
            }
            break;
            case 75: /* reduce AGreaterEqualExp */
            {
                ArrayList<Object> list = new75();
                push(goTo(35), list);
            }
            break;
            case 76: /* reduce ANotExp */
            {
                ArrayList<Object> list = new76();
                push(goTo(35), list);
            }
            break;
            case 77: /* reduce AAndExp */
            {
                ArrayList<Object> list = new77();
                push(goTo(35), list);
            }
            break;
            case 78: /* reduce AOrExp */
            {
                ArrayList<Object> list = new78();
                push(goTo(35), list);
            }
            break;
            case 79: /* reduce ABlocoExpressoesExp */
            {
                ArrayList<Object> list = new79();
                push(goTo(35), list);
            }
            break;
        }
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new0() /* reduce AAprogramaprograma1Programa */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PPrograma pprogramaNode1;
        {
            // Block
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        PDecProcPrincipal pdecprocprincipalNode5;
        {
            // Block
        }
        {
            // Block
        PDecProcOrFuncao pdecprocorfuncaoNode3;
        pdecprocorfuncaoNode3 = (PDecProcOrFuncao)nodeArrayList1.get(0);
	if(pdecprocorfuncaoNode3 != null)
	{
	  listNode4.add(pdecprocorfuncaoNode3);
	}
        }
        pdecprocprincipalNode5 = (PDecProcPrincipal)nodeArrayList2.get(0);

        pprogramaNode1 = new AProgramaPrograma(listNode2, listNode4, pdecprocprincipalNode5);
        }
	nodeList.add(pprogramaNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new1() /* reduce AAprogramaprograma2Programa */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PPrograma pprogramaNode1;
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        PDecProcPrincipal pdecprocprincipalNode6;
        {
            // Block
        PDecVarOrConst pdecvarorconstNode2;
        pdecvarorconstNode2 = (PDecVarOrConst)nodeArrayList1.get(0);
	if(pdecvarorconstNode2 != null)
	{
	  listNode3.add(pdecvarorconstNode2);
	}
        }
        {
            // Block
        PDecProcOrFuncao pdecprocorfuncaoNode4;
        pdecprocorfuncaoNode4 = (PDecProcOrFuncao)nodeArrayList2.get(0);
	if(pdecprocorfuncaoNode4 != null)
	{
	  listNode5.add(pdecprocorfuncaoNode4);
	}
        }
        pdecprocprincipalNode6 = (PDecProcPrincipal)nodeArrayList3.get(0);

        pprogramaNode1 = new AProgramaPrograma(listNode3, listNode5, pdecprocprincipalNode6);
        }
	nodeList.add(pprogramaNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new2() /* reduce ADecProcedimentoDecProcPrincipal */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList10 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList9 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PDecProcPrincipal pdecprocprincipalNode1;
        {
            // Block
        TMainInit tmaininitNode2;
        TProcedimento tprocedimentoNode3;
        TColon tcolonNode4;
        TPrincipal tprincipalNode5;
        TLPar tlparNode6;
        PParametros pparametrosNode7;
        TRPar trparNode8;
        TComece tcomeceNode9;
        PComando pcomandoNode10;
        TTermine ttermineNode11;
        tmaininitNode2 = (TMainInit)nodeArrayList1.get(0);
        tprocedimentoNode3 = (TProcedimento)nodeArrayList2.get(0);
        tcolonNode4 = (TColon)nodeArrayList3.get(0);
        tprincipalNode5 = (TPrincipal)nodeArrayList4.get(0);
        tlparNode6 = (TLPar)nodeArrayList5.get(0);
        pparametrosNode7 = (PParametros)nodeArrayList6.get(0);
        trparNode8 = (TRPar)nodeArrayList7.get(0);
        tcomeceNode9 = (TComece)nodeArrayList8.get(0);
        pcomandoNode10 = (PComando)nodeArrayList9.get(0);
        ttermineNode11 = (TTermine)nodeArrayList10.get(0);

        pdecprocprincipalNode1 = new ADecProcedimentoDecProcPrincipal(tmaininitNode2, tprocedimentoNode3, tcolonNode4, tprincipalNode5, tlparNode6, pparametrosNode7, trparNode8, tcomeceNode9, pcomandoNode10, ttermineNode11);
        }
	nodeList.add(pdecprocprincipalNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new3() /* reduce ADecVarDecVarOrConst */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PDecVarOrConst pdecvarorconstNode1;
        {
            // Block
        PDecVar pdecvarNode2;
        pdecvarNode2 = (PDecVar)nodeArrayList1.get(0);

        pdecvarorconstNode1 = new ADecVarDecVarOrConst(pdecvarNode2);
        }
	nodeList.add(pdecvarorconstNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new4() /* reduce ADecConstDecVarOrConst */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PDecVarOrConst pdecvarorconstNode1;
        {
            // Block
        PDecCons pdecconsNode2;
        pdecconsNode2 = (PDecCons)nodeArrayList1.get(0);

        pdecvarorconstNode1 = new ADecConstDecVarOrConst(pdecconsNode2);
        }
	nodeList.add(pdecvarorconstNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new5() /* reduce ADecProcDecProcOrFuncao */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PDecProcOrFuncao pdecprocorfuncaoNode1;
        {
            // Block
        PDecProcedimento pdecprocedimentoNode2;
        pdecprocedimentoNode2 = (PDecProcedimento)nodeArrayList1.get(0);

        pdecprocorfuncaoNode1 = new ADecProcDecProcOrFuncao(pdecprocedimentoNode2);
        }
	nodeList.add(pdecprocorfuncaoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new6() /* reduce ADecFuncaoDecProcOrFuncao */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PDecProcOrFuncao pdecprocorfuncaoNode1;
        {
            // Block
        PDecFuncao pdecfuncaoNode2;
        pdecfuncaoNode2 = (PDecFuncao)nodeArrayList1.get(0);

        pdecprocorfuncaoNode1 = new ADecFuncaoDecProcOrFuncao(pdecfuncaoNode2);
        }
	nodeList.add(pdecprocorfuncaoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new7() /* reduce ADecVarDecVar */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PDecVar pdecvarNode1;
        {
            // Block
        TVar tvarNode2;
        TColon tcolonNode3;
        PTipo ptipoNode4;
        PIdOrIdAtribuicao pidoridatribuicaoNode5;
        TSemicolon tsemicolonNode6;
        tvarNode2 = (TVar)nodeArrayList1.get(0);
        tcolonNode3 = (TColon)nodeArrayList2.get(0);
        ptipoNode4 = (PTipo)nodeArrayList3.get(0);
        pidoridatribuicaoNode5 = (PIdOrIdAtribuicao)nodeArrayList4.get(0);
        tsemicolonNode6 = (TSemicolon)nodeArrayList5.get(0);

        pdecvarNode1 = new ADecVarDecVar(tvarNode2, tcolonNode3, ptipoNode4, pidoridatribuicaoNode5, tsemicolonNode6);
        }
	nodeList.add(pdecvarNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new8() /* reduce ADecConsDecCons */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PDecCons pdecconsNode1;
        {
            // Block
        TConst tconstNode2;
        TColon tcolonNode3;
        PTipo ptipoNode4;
        TId tidNode5;
        TAttr tattrNode6;
        PExp pexpNode7;
        TSemicolon tsemicolonNode8;
        tconstNode2 = (TConst)nodeArrayList1.get(0);
        tcolonNode3 = (TColon)nodeArrayList2.get(0);
        ptipoNode4 = (PTipo)nodeArrayList3.get(0);
        tidNode5 = (TId)nodeArrayList4.get(0);
        tattrNode6 = (TAttr)nodeArrayList5.get(0);
        pexpNode7 = (PExp)nodeArrayList6.get(0);
        tsemicolonNode8 = (TSemicolon)nodeArrayList7.get(0);

        pdecconsNode1 = new ADecConsDecCons(tconstNode2, tcolonNode3, ptipoNode4, tidNode5, tattrNode6, pexpNode7, tsemicolonNode8);
        }
	nodeList.add(pdecconsNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new9() /* reduce AIdIdOrIdAtribuicao */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PIdOrIdAtribuicao pidoridatribuicaoNode1;
        {
            // Block
        TId tidNode2;
        tidNode2 = (TId)nodeArrayList1.get(0);

        pidoridatribuicaoNode1 = new AIdIdOrIdAtribuicao(tidNode2);
        }
	nodeList.add(pidoridatribuicaoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new10() /* reduce AIdAtribuicaoIdOrIdAtribuicao */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PIdOrIdAtribuicao pidoridatribuicaoNode1;
        {
            // Block
        TId tidNode2;
        TAttr tattrNode3;
        PExp pexpNode4;
        tidNode2 = (TId)nodeArrayList1.get(0);
        tattrNode3 = (TAttr)nodeArrayList2.get(0);
        pexpNode4 = (PExp)nodeArrayList3.get(0);

        pidoridatribuicaoNode1 = new AIdAtribuicaoIdOrIdAtribuicao(tidNode2, tattrNode3, pexpNode4);
        }
	nodeList.add(pidoridatribuicaoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new11() /* reduce ATipoBaseTipo */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PTipo ptipoNode1;
        {
            // Block
        PTipoBase ptipobaseNode2;
        ptipobaseNode2 = (PTipoBase)nodeArrayList1.get(0);

        ptipoNode1 = new ATipoBaseTipo(ptipobaseNode2);
        }
	nodeList.add(ptipoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new12() /* reduce ATipoBrktTipo */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PTipo ptipoNode1;
        {
            // Block
        PTipo ptipoNode2;
        TLBracket tlbracketNode3;
        PExp pexpNode4;
        TRBracket trbracketNode5;
        ptipoNode2 = (PTipo)nodeArrayList1.get(0);
        tlbracketNode3 = (TLBracket)nodeArrayList2.get(0);
        pexpNode4 = (PExp)nodeArrayList3.get(0);
        trbracketNode5 = (TRBracket)nodeArrayList4.get(0);

        ptipoNode1 = new ATipoBrktTipo(ptipoNode2, tlbracketNode3, pexpNode4, trbracketNode5);
        }
	nodeList.add(ptipoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new13() /* reduce AInteiroTipoBase */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PTipoBase ptipobaseNode1;
        {
            // Block
        TTInteiro ttinteiroNode2;
        ttinteiroNode2 = (TTInteiro)nodeArrayList1.get(0);

        ptipobaseNode1 = new AInteiroTipoBase(ttinteiroNode2);
        }
	nodeList.add(ptipobaseNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new14() /* reduce ABooleanoTipoBase */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PTipoBase ptipobaseNode1;
        {
            // Block
        TTBooleano ttbooleanoNode2;
        ttbooleanoNode2 = (TTBooleano)nodeArrayList1.get(0);

        ptipobaseNode1 = new ABooleanoTipoBase(ttbooleanoNode2);
        }
	nodeList.add(ptipobaseNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new15() /* reduce ARealTipoBase */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PTipoBase ptipobaseNode1;
        {
            // Block
        TTReal ttrealNode2;
        ttrealNode2 = (TTReal)nodeArrayList1.get(0);

        ptipobaseNode1 = new ARealTipoBase(ttrealNode2);
        }
	nodeList.add(ptipobaseNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new16() /* reduce ACadeiaTipoBase */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PTipoBase ptipobaseNode1;
        {
            // Block
        TTCadeia ttcadeiaNode2;
        ttcadeiaNode2 = (TTCadeia)nodeArrayList1.get(0);

        ptipobaseNode1 = new ACadeiaTipoBase(ttcadeiaNode2);
        }
	nodeList.add(ptipobaseNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new17() /* reduce AArrayCompArrayComp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PArrayComp parraycompNode1;
        {
            // Block
        TLBracket tlbracketNode2;
        TId tidNode3;
        TPipe tpipeNode4;
        PExp pexpNode5;
        TRBracket trbracketNode6;
        tlbracketNode2 = (TLBracket)nodeArrayList1.get(0);
        tidNode3 = (TId)nodeArrayList2.get(0);
        tpipeNode4 = (TPipe)nodeArrayList3.get(0);
        pexpNode5 = (PExp)nodeArrayList4.get(0);
        trbracketNode6 = (TRBracket)nodeArrayList5.get(0);

        parraycompNode1 = new AArrayCompArrayComp(tlbracketNode2, tidNode3, tpipeNode4, pexpNode5, trbracketNode6);
        }
	nodeList.add(parraycompNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new18() /* reduce AAdecprocedimentodecprocedimento1DecProcedimento */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList9 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PDecProcedimento pdecprocedimentoNode1;
        {
            // Block
        @SuppressWarnings("unused") Object nullNode2 = null;
        TProcedimento tprocedimentoNode3;
        TColon tcolonNode4;
        TId tidNode5;
        TLPar tlparNode6;
        PParametros pparametrosNode7;
        TRPar trparNode8;
        TComece tcomeceNode9;
        PComando pcomandoNode10;
        TTermine ttermineNode11;
        tprocedimentoNode3 = (TProcedimento)nodeArrayList1.get(0);
        tcolonNode4 = (TColon)nodeArrayList2.get(0);
        tidNode5 = (TId)nodeArrayList3.get(0);
        tlparNode6 = (TLPar)nodeArrayList4.get(0);
        pparametrosNode7 = (PParametros)nodeArrayList5.get(0);
        trparNode8 = (TRPar)nodeArrayList6.get(0);
        tcomeceNode9 = (TComece)nodeArrayList7.get(0);
        pcomandoNode10 = (PComando)nodeArrayList8.get(0);
        ttermineNode11 = (TTermine)nodeArrayList9.get(0);

        pdecprocedimentoNode1 = new ADecProcedimentoDecProcedimento(null, tprocedimentoNode3, tcolonNode4, tidNode5, tlparNode6, pparametrosNode7, trparNode8, tcomeceNode9, pcomandoNode10, ttermineNode11);
        }
	nodeList.add(pdecprocedimentoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new19() /* reduce AAdecprocedimentodecprocedimento2DecProcedimento */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList10 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList9 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PDecProcedimento pdecprocedimentoNode1;
        {
            // Block
        TMainInit tmaininitNode2;
        TProcedimento tprocedimentoNode3;
        TColon tcolonNode4;
        TId tidNode5;
        TLPar tlparNode6;
        PParametros pparametrosNode7;
        TRPar trparNode8;
        TComece tcomeceNode9;
        PComando pcomandoNode10;
        TTermine ttermineNode11;
        tmaininitNode2 = (TMainInit)nodeArrayList1.get(0);
        tprocedimentoNode3 = (TProcedimento)nodeArrayList2.get(0);
        tcolonNode4 = (TColon)nodeArrayList3.get(0);
        tidNode5 = (TId)nodeArrayList4.get(0);
        tlparNode6 = (TLPar)nodeArrayList5.get(0);
        pparametrosNode7 = (PParametros)nodeArrayList6.get(0);
        trparNode8 = (TRPar)nodeArrayList7.get(0);
        tcomeceNode9 = (TComece)nodeArrayList8.get(0);
        pcomandoNode10 = (PComando)nodeArrayList9.get(0);
        ttermineNode11 = (TTermine)nodeArrayList10.get(0);

        pdecprocedimentoNode1 = new ADecProcedimentoDecProcedimento(tmaininitNode2, tprocedimentoNode3, tcolonNode4, tidNode5, tlparNode6, pparametrosNode7, trparNode8, tcomeceNode9, pcomandoNode10, ttermineNode11);
        }
	nodeList.add(pdecprocedimentoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new20() /* reduce ADecFuncaoDecFuncao */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList10 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList9 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PDecFuncao pdecfuncaoNode1;
        {
            // Block
        TFuncao tfuncaoNode2;
        TColon tcolonNode3;
        PTipo ptipoNode4;
        TId tidNode5;
        TLPar tlparNode6;
        PParametros pparametrosNode7;
        TRPar trparNode8;
        PExp pexpNode9;
        TComece tcomeceNode10;
        TTermine ttermineNode11;
        tfuncaoNode2 = (TFuncao)nodeArrayList1.get(0);
        tcolonNode3 = (TColon)nodeArrayList2.get(0);
        ptipoNode4 = (PTipo)nodeArrayList3.get(0);
        tidNode5 = (TId)nodeArrayList4.get(0);
        tlparNode6 = (TLPar)nodeArrayList5.get(0);
        pparametrosNode7 = (PParametros)nodeArrayList6.get(0);
        trparNode8 = (TRPar)nodeArrayList7.get(0);
        pexpNode9 = (PExp)nodeArrayList8.get(0);
        tcomeceNode10 = (TComece)nodeArrayList9.get(0);
        ttermineNode11 = (TTermine)nodeArrayList10.get(0);

        pdecfuncaoNode1 = new ADecFuncaoDecFuncao(tfuncaoNode2, tcolonNode3, ptipoNode4, tidNode5, tlparNode6, pparametrosNode7, trparNode8, pexpNode9, tcomeceNode10, ttermineNode11);
        }
	nodeList.add(pdecfuncaoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new21() /* reduce AAparametrosparametros1Parametros */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        PParametros pparametrosNode1;
        {
            // Block
        @SuppressWarnings("unused") Object nullNode2 = null;

        pparametrosNode1 = new AParametrosParametros(null);
        }
	nodeList.add(pparametrosNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new22() /* reduce AAparametrosparametros2Parametros */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PParametros pparametrosNode1;
        {
            // Block
        PParametrosAux pparametrosauxNode2;
        pparametrosauxNode2 = (PParametrosAux)nodeArrayList1.get(0);

        pparametrosNode1 = new AParametrosParametros(pparametrosauxNode2);
        }
	nodeList.add(pparametrosNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new23() /* reduce AApipeparametroclosureparametrosaux1ParametrosAux */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PParametrosAux pparametrosauxNode1;
        {
            // Block
        PParametro pparametroNode2;
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        pparametroNode2 = (PParametro)nodeArrayList1.get(0);
        {
            // Block
        }

        pparametrosauxNode1 = new APipeParametroClosureParametrosAux(pparametroNode2, listNode3);
        }
	nodeList.add(pparametrosauxNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new24() /* reduce AApipeparametroclosureparametrosaux2ParametrosAux */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PParametrosAux pparametrosauxNode1;
        {
            // Block
        PParametro pparametroNode2;
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        pparametroNode2 = (PParametro)nodeArrayList1.get(0);
        {
            // Block
        PPipeParametro ppipeparametroNode3;
        ppipeparametroNode3 = (PPipeParametro)nodeArrayList2.get(0);
	if(ppipeparametroNode3 != null)
	{
	  listNode4.add(ppipeparametroNode3);
	}
        }

        pparametrosauxNode1 = new APipeParametroClosureParametrosAux(pparametroNode2, listNode4);
        }
	nodeList.add(pparametrosauxNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new25() /* reduce APipeParametroPipeParametro */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PPipeParametro ppipeparametroNode1;
        {
            // Block
        TPipe tpipeNode2;
        PParametro pparametroNode3;
        tpipeNode2 = (TPipe)nodeArrayList1.get(0);
        pparametroNode3 = (PParametro)nodeArrayList2.get(0);

        ppipeparametroNode1 = new APipeParametroPipeParametro(tpipeNode2, pparametroNode3);
        }
	nodeList.add(ppipeparametroNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new26() /* reduce AParametroParametro */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PParametro pparametroNode1;
        {
            // Block
        PTipoParametro ptipoparametroNode2;
        TId tidNode3;
        ptipoparametroNode2 = (PTipoParametro)nodeArrayList1.get(0);
        tidNode3 = (TId)nodeArrayList2.get(0);

        pparametroNode1 = new AParametroParametro(ptipoparametroNode2, tidNode3);
        }
	nodeList.add(pparametroNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new27() /* reduce ATipoBaseTipoParametro */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PTipoParametro ptipoparametroNode1;
        {
            // Block
        PTipoBase ptipobaseNode2;
        ptipobaseNode2 = (PTipoBase)nodeArrayList1.get(0);

        ptipoparametroNode1 = new ATipoBaseTipoParametro(ptipobaseNode2);
        }
	nodeList.add(ptipoparametroNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new28() /* reduce ATipoParametroBrktTipoParametro */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PTipoParametro ptipoparametroNode1;
        {
            // Block
        PTipoParametro ptipoparametroNode2;
        TLBracket tlbracketNode3;
        TRBracket trbracketNode4;
        ptipoparametroNode2 = (PTipoParametro)nodeArrayList1.get(0);
        tlbracketNode3 = (TLBracket)nodeArrayList2.get(0);
        trbracketNode4 = (TRBracket)nodeArrayList3.get(0);

        ptipoparametroNode1 = new ATipoParametroBrktTipoParametro(ptipoparametroNode2, tlbracketNode3, trbracketNode4);
        }
	nodeList.add(ptipoparametroNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new29() /* reduce ASeComandoComando */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PComando pcomandoNode1;
        {
            // Block
        TSe tseNode2;
        TLPar tlparNode3;
        PExp pexpNode4;
        TRPar trparNode5;
        PComando pcomandoNode6;
        TSemicolon tsemicolonNode7;
        tseNode2 = (TSe)nodeArrayList1.get(0);
        tlparNode3 = (TLPar)nodeArrayList2.get(0);
        pexpNode4 = (PExp)nodeArrayList3.get(0);
        trparNode5 = (TRPar)nodeArrayList4.get(0);
        pcomandoNode6 = (PComando)nodeArrayList5.get(0);
        tsemicolonNode7 = (TSemicolon)nodeArrayList6.get(0);

        pcomandoNode1 = new ASeComandoComando(tseNode2, tlparNode3, pexpNode4, trparNode5, pcomandoNode6, tsemicolonNode7);
        }
	nodeList.add(pcomandoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new30() /* reduce ASeSenaoComandoComando */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PComando pcomandoNode1;
        {
            // Block
        TSe tseNode2;
        TLPar tlparNode3;
        PExp pexpNode4;
        TRPar trparNode5;
        PComando pcomandoNode6;
        TSenao tsenaoNode7;
        PComando pcomandoNode8;
        tseNode2 = (TSe)nodeArrayList1.get(0);
        tlparNode3 = (TLPar)nodeArrayList2.get(0);
        pexpNode4 = (PExp)nodeArrayList3.get(0);
        trparNode5 = (TRPar)nodeArrayList4.get(0);
        pcomandoNode6 = (PComando)nodeArrayList5.get(0);
        tsenaoNode7 = (TSenao)nodeArrayList6.get(0);
        pcomandoNode8 = (PComando)nodeArrayList7.get(0);

        pcomandoNode1 = new ASeSenaoComandoComando(tseNode2, tlparNode3, pexpNode4, trparNode5, pcomandoNode6, tsenaoNode7, pcomandoNode8);
        }
	nodeList.add(pcomandoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new31() /* reduce AEnquantoComando */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PComando pcomandoNode1;
        {
            // Block
        TEnquanto tenquantoNode2;
        TLPar tlparNode3;
        PExp pexpNode4;
        TRPar trparNode5;
        PComando pcomandoNode6;
        tenquantoNode2 = (TEnquanto)nodeArrayList1.get(0);
        tlparNode3 = (TLPar)nodeArrayList2.get(0);
        pexpNode4 = (PExp)nodeArrayList3.get(0);
        trparNode5 = (TRPar)nodeArrayList4.get(0);
        pcomandoNode6 = (PComando)nodeArrayList5.get(0);

        pcomandoNode1 = new AEnquantoComando(tenquantoNode2, tlparNode3, pexpNode4, trparNode5, pcomandoNode6);
        }
	nodeList.add(pcomandoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new32() /* reduce AIdAtribuicaoComando */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PComando pcomandoNode1;
        {
            // Block
        TId tidNode2;
        TAttr tattrNode3;
        PExp pexpNode4;
        TSemicolon tsemicolonNode5;
        tidNode2 = (TId)nodeArrayList1.get(0);
        tattrNode3 = (TAttr)nodeArrayList2.get(0);
        pexpNode4 = (PExp)nodeArrayList3.get(0);
        tsemicolonNode5 = (TSemicolon)nodeArrayList4.get(0);

        pcomandoNode1 = new AIdAtribuicaoComando(tidNode2, tattrNode3, pexpNode4, tsemicolonNode5);
        }
	nodeList.add(pcomandoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new33() /* reduce AChamadaProcComando */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PComando pcomandoNode1;
        {
            // Block
        PChamadaProcedimento pchamadaprocedimentoNode2;
        TSemicolon tsemicolonNode3;
        pchamadaprocedimentoNode2 = (PChamadaProcedimento)nodeArrayList1.get(0);
        tsemicolonNode3 = (TSemicolon)nodeArrayList2.get(0);

        pcomandoNode1 = new AChamadaProcComando(pchamadaprocedimentoNode2, tsemicolonNode3);
        }
	nodeList.add(pcomandoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new34() /* reduce ABlocoComandosComando */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PComando pcomandoNode1;
        {
            // Block
        PBlocoComandos pblococomandosNode2;
        pblococomandosNode2 = (PBlocoComandos)nodeArrayList1.get(0);

        pcomandoNode1 = new ABlocoComandosComando(pblococomandosNode2);
        }
	nodeList.add(pcomandoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new35() /* reduce AAblococomandosblococomandos1BlocoComandos */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PBlocoComandos pblococomandosNode1;
        {
            // Block
        TComece tcomeceNode2;
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        TTermine ttermineNode5;
        tcomeceNode2 = (TComece)nodeArrayList1.get(0);
        {
            // Block
        }
        {
            // Block
        }
        ttermineNode5 = (TTermine)nodeArrayList2.get(0);

        pblococomandosNode1 = new ABlocoComandosBlocoComandos(tcomeceNode2, listNode3, listNode4, ttermineNode5);
        }
	nodeList.add(pblococomandosNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new36() /* reduce AAblococomandosblococomandos2BlocoComandos */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PBlocoComandos pblococomandosNode1;
        {
            // Block
        TComece tcomeceNode2;
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        TTermine ttermineNode6;
        tcomeceNode2 = (TComece)nodeArrayList1.get(0);
        {
            // Block
        PDecVarOrConst pdecvarorconstNode3;
        pdecvarorconstNode3 = (PDecVarOrConst)nodeArrayList2.get(0);
	if(pdecvarorconstNode3 != null)
	{
	  listNode4.add(pdecvarorconstNode3);
	}
        }
        {
            // Block
        }
        ttermineNode6 = (TTermine)nodeArrayList3.get(0);

        pblococomandosNode1 = new ABlocoComandosBlocoComandos(tcomeceNode2, listNode4, listNode5, ttermineNode6);
        }
	nodeList.add(pblococomandosNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new37() /* reduce AAblococomandosblococomandos3BlocoComandos */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PBlocoComandos pblococomandosNode1;
        {
            // Block
        TComece tcomeceNode2;
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        TTermine ttermineNode6;
        tcomeceNode2 = (TComece)nodeArrayList1.get(0);
        {
            // Block
        }
        {
            // Block
        PComando pcomandoNode4;
        pcomandoNode4 = (PComando)nodeArrayList2.get(0);
	if(pcomandoNode4 != null)
	{
	  listNode5.add(pcomandoNode4);
	}
        }
        ttermineNode6 = (TTermine)nodeArrayList3.get(0);

        pblococomandosNode1 = new ABlocoComandosBlocoComandos(tcomeceNode2, listNode3, listNode5, ttermineNode6);
        }
	nodeList.add(pblococomandosNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new38() /* reduce AAblococomandosblococomandos4BlocoComandos */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PBlocoComandos pblococomandosNode1;
        {
            // Block
        TComece tcomeceNode2;
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        LinkedList<Object> listNode6 = new LinkedList<Object>();
        TTermine ttermineNode7;
        tcomeceNode2 = (TComece)nodeArrayList1.get(0);
        {
            // Block
        PDecVarOrConst pdecvarorconstNode3;
        pdecvarorconstNode3 = (PDecVarOrConst)nodeArrayList2.get(0);
	if(pdecvarorconstNode3 != null)
	{
	  listNode4.add(pdecvarorconstNode3);
	}
        }
        {
            // Block
        PComando pcomandoNode5;
        pcomandoNode5 = (PComando)nodeArrayList3.get(0);
	if(pcomandoNode5 != null)
	{
	  listNode6.add(pcomandoNode5);
	}
        }
        ttermineNode7 = (TTermine)nodeArrayList4.get(0);

        pblococomandosNode1 = new ABlocoComandosBlocoComandos(tcomeceNode2, listNode4, listNode6, ttermineNode7);
        }
	nodeList.add(pblococomandosNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new39() /* reduce AIdValor */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PValor pvalorNode1;
        {
            // Block
        TId tidNode2;
        tidNode2 = (TId)nodeArrayList1.get(0);

        pvalorNode1 = new AIdValor(tidNode2);
        }
	nodeList.add(pvalorNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new40() /* reduce AValorBrktsValor */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PValor pvalorNode1;
        {
            // Block
        PValor pvalorNode2;
        TLBracket tlbracketNode3;
        PExp pexpNode4;
        TRBracket trbracketNode5;
        pvalorNode2 = (PValor)nodeArrayList1.get(0);
        tlbracketNode3 = (TLBracket)nodeArrayList2.get(0);
        pexpNode4 = (PExp)nodeArrayList3.get(0);
        trbracketNode5 = (TRBracket)nodeArrayList4.get(0);

        pvalorNode1 = new AValorBrktsValor(pvalorNode2, tlbracketNode3, pexpNode4, trbracketNode5);
        }
	nodeList.add(pvalorNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new41() /* reduce AAblocoexpressoesblocoexpressoes1BlocoExpressoes */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PBlocoExpressoes pblocoexpressoesNode1;
        {
            // Block
        TComece tcomeceNode2;
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        PExp pexpNode4;
        TTermine ttermineNode5;
        tcomeceNode2 = (TComece)nodeArrayList1.get(0);
        {
            // Block
        }
        pexpNode4 = (PExp)nodeArrayList2.get(0);
        ttermineNode5 = (TTermine)nodeArrayList3.get(0);

        pblocoexpressoesNode1 = new ABlocoExpressoesBlocoExpressoes(tcomeceNode2, listNode3, pexpNode4, ttermineNode5);
        }
	nodeList.add(pblocoexpressoesNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new42() /* reduce AAblocoexpressoesblocoexpressoes2BlocoExpressoes */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PBlocoExpressoes pblocoexpressoesNode1;
        {
            // Block
        TComece tcomeceNode2;
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        PExp pexpNode5;
        TTermine ttermineNode6;
        tcomeceNode2 = (TComece)nodeArrayList1.get(0);
        {
            // Block
        PDecCons pdecconsNode3;
        pdecconsNode3 = (PDecCons)nodeArrayList2.get(0);
	if(pdecconsNode3 != null)
	{
	  listNode4.add(pdecconsNode3);
	}
        }
        pexpNode5 = (PExp)nodeArrayList3.get(0);
        ttermineNode6 = (TTermine)nodeArrayList4.get(0);

        pblocoexpressoesNode1 = new ABlocoExpressoesBlocoExpressoes(tcomeceNode2, listNode4, pexpNode5, ttermineNode6);
        }
	nodeList.add(pblocoexpressoesNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new43() /* reduce AChamadaFuncaoChamadaFuncao */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PChamadaFuncao pchamadafuncaoNode1;
        {
            // Block
        TId tidNode2;
        TLPar tlparNode3;
        PListaExp plistaexpNode4;
        TRPar trparNode5;
        tidNode2 = (TId)nodeArrayList1.get(0);
        tlparNode3 = (TLPar)nodeArrayList2.get(0);
        plistaexpNode4 = (PListaExp)nodeArrayList3.get(0);
        trparNode5 = (TRPar)nodeArrayList4.get(0);

        pchamadafuncaoNode1 = new AChamadaFuncaoChamadaFuncao(tidNode2, tlparNode3, plistaexpNode4, trparNode5);
        }
	nodeList.add(pchamadafuncaoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new44() /* reduce AChamadaProcedimentoChamadaProcedimento */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PChamadaProcedimento pchamadaprocedimentoNode1;
        {
            // Block
        TLPar tlparNode2;
        PListaExp plistaexpNode3;
        TRPar trparNode4;
        tlparNode2 = (TLPar)nodeArrayList1.get(0);
        plistaexpNode3 = (PListaExp)nodeArrayList2.get(0);
        trparNode4 = (TRPar)nodeArrayList3.get(0);

        pchamadaprocedimentoNode1 = new AChamadaProcedimentoChamadaProcedimento(tlparNode2, plistaexpNode3, trparNode4);
        }
	nodeList.add(pchamadaprocedimentoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new45() /* reduce AAlistaexplistaexp1ListaExp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        PListaExp plistaexpNode1;
        {
            // Block
        @SuppressWarnings("unused") Object nullNode2 = null;

        plistaexpNode1 = new AListaExpListaExp(null);
        }
	nodeList.add(plistaexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new46() /* reduce AAlistaexplistaexp2ListaExp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PListaExp plistaexpNode1;
        {
            // Block
        PListaExpAux plistaexpauxNode2;
        plistaexpauxNode2 = (PListaExpAux)nodeArrayList1.get(0);

        plistaexpNode1 = new AListaExpListaExp(plistaexpauxNode2);
        }
	nodeList.add(plistaexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new47() /* reduce AAauxlistaexpaux1ListaExpAux */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PListaExpAux plistaexpauxNode1;
        {
            // Block
        PExp pexpNode2;
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        pexpNode2 = (PExp)nodeArrayList1.get(0);
        {
            // Block
        }

        plistaexpauxNode1 = new AAuxListaExpAux(pexpNode2, listNode3);
        }
	nodeList.add(plistaexpauxNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new48() /* reduce AAauxlistaexpaux2ListaExpAux */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PListaExpAux plistaexpauxNode1;
        {
            // Block
        PExp pexpNode2;
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        pexpNode2 = (PExp)nodeArrayList1.get(0);
        {
            // Block
        PPipeExp ppipeexpNode3;
        ppipeexpNode3 = (PPipeExp)nodeArrayList2.get(0);
	if(ppipeexpNode3 != null)
	{
	  listNode4.add(ppipeexpNode3);
	}
        }

        plistaexpauxNode1 = new AAuxListaExpAux(pexpNode2, listNode4);
        }
	nodeList.add(plistaexpauxNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new49() /* reduce APipeExpPipeExp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PPipeExp ppipeexpNode1;
        {
            // Block
        TPipe tpipeNode2;
        PExp pexpNode3;
        tpipeNode2 = (TPipe)nodeArrayList1.get(0);
        pexpNode3 = (PExp)nodeArrayList2.get(0);

        ppipeexpNode1 = new APipeExpPipeExp(tpipeNode2, pexpNode3);
        }
	nodeList.add(ppipeexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new50() /* reduce AIntegerNumber */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PNumber pnumberNode1;
        {
            // Block
        TIntegerConstant tintegerconstantNode2;
        tintegerconstantNode2 = (TIntegerConstant)nodeArrayList1.get(0);

        pnumberNode1 = new AIntegerNumber(tintegerconstantNode2);
        }
	nodeList.add(pnumberNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new51() /* reduce ARealNumber */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PNumber pnumberNode1;
        {
            // Block
        TFloatingConstant tfloatingconstantNode2;
        tfloatingconstantNode2 = (TFloatingConstant)nodeArrayList1.get(0);

        pnumberNode1 = new ARealNumber(tfloatingconstantNode2);
        }
	nodeList.add(pnumberNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new52() /* reduce ABooleanBooleanExp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PBooleanExp pbooleanexpNode1;
        {
            // Block
        TBooleanConstant tbooleanconstantNode2;
        tbooleanconstantNode2 = (TBooleanConstant)nodeArrayList1.get(0);

        pbooleanexpNode1 = new ABooleanBooleanExp(tbooleanconstantNode2);
        }
	nodeList.add(pbooleanexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new53() /* reduce ACadeiaCadeiaExp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PCadeiaExp pcadeiaexpNode1;
        {
            // Block
        TCadeiaConstant tcadeiaconstantNode2;
        tcadeiaconstantNode2 = (TCadeiaConstant)nodeArrayList1.get(0);

        pcadeiaexpNode1 = new ACadeiaCadeiaExp(tcadeiaconstantNode2);
        }
	nodeList.add(pcadeiaexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new54() /* reduce AIntegerLiteral */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PLiteral pliteralNode1;
        {
            // Block
        TIntegerConstant tintegerconstantNode2;
        tintegerconstantNode2 = (TIntegerConstant)nodeArrayList1.get(0);

        pliteralNode1 = new AIntegerLiteral(tintegerconstantNode2);
        }
	nodeList.add(pliteralNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new55() /* reduce ARealLiteral */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PLiteral pliteralNode1;
        {
            // Block
        TFloatingConstant tfloatingconstantNode2;
        tfloatingconstantNode2 = (TFloatingConstant)nodeArrayList1.get(0);

        pliteralNode1 = new ARealLiteral(tfloatingconstantNode2);
        }
	nodeList.add(pliteralNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new56() /* reduce ABooleanLiteral */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PLiteral pliteralNode1;
        {
            // Block
        TBooleanConstant tbooleanconstantNode2;
        tbooleanconstantNode2 = (TBooleanConstant)nodeArrayList1.get(0);

        pliteralNode1 = new ABooleanLiteral(tbooleanconstantNode2);
        }
	nodeList.add(pliteralNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new57() /* reduce ACadeiaLiteral */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PLiteral pliteralNode1;
        {
            // Block
        TCadeiaConstant tcadeiaconstantNode2;
        tcadeiaconstantNode2 = (TCadeiaConstant)nodeArrayList1.get(0);

        pliteralNode1 = new ACadeiaLiteral(tcadeiaconstantNode2);
        }
	nodeList.add(pliteralNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new58() /* reduce AMultiplicationMultiplicativeExp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PMultiplicativeExp pmultiplicativeexpNode1;
        {
            // Block
        PMultiplicativeExp pmultiplicativeexpNode2;
        TStar tstarNode3;
        PNumber pnumberNode4;
        pmultiplicativeexpNode2 = (PMultiplicativeExp)nodeArrayList1.get(0);
        tstarNode3 = (TStar)nodeArrayList2.get(0);
        pnumberNode4 = (PNumber)nodeArrayList3.get(0);

        pmultiplicativeexpNode1 = new AMultiplicationMultiplicativeExp(pmultiplicativeexpNode2, tstarNode3, pnumberNode4);
        }
	nodeList.add(pmultiplicativeexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new59() /* reduce ANumberMultiplicativeExp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PMultiplicativeExp pmultiplicativeexpNode1;
        {
            // Block
        PNumber pnumberNode2;
        pnumberNode2 = (PNumber)nodeArrayList1.get(0);

        pmultiplicativeexpNode1 = new ANumberMultiplicativeExp(pnumberNode2);
        }
	nodeList.add(pmultiplicativeexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new60() /* reduce ADivisionDividitiveExp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PDividitiveExp pdividitiveexpNode1;
        {
            // Block
        PMultiplicativeExp pmultiplicativeexpNode2;
        TDiv tdivNode3;
        PNumber pnumberNode4;
        pmultiplicativeexpNode2 = (PMultiplicativeExp)nodeArrayList1.get(0);
        tdivNode3 = (TDiv)nodeArrayList2.get(0);
        pnumberNode4 = (PNumber)nodeArrayList3.get(0);

        pdividitiveexpNode1 = new ADivisionDividitiveExp(pmultiplicativeexpNode2, tdivNode3, pnumberNode4);
        }
	nodeList.add(pdividitiveexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new61() /* reduce AModModExp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PModExp pmodexpNode1;
        {
            // Block
        PMultiplicativeExp pmultiplicativeexpNode2;
        TMod tmodNode3;
        PNumber pnumberNode4;
        pmultiplicativeexpNode2 = (PMultiplicativeExp)nodeArrayList1.get(0);
        tmodNode3 = (TMod)nodeArrayList2.get(0);
        pnumberNode4 = (PNumber)nodeArrayList3.get(0);

        pmodexpNode1 = new AModModExp(pmultiplicativeexpNode2, tmodNode3, pnumberNode4);
        }
	nodeList.add(pmodexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new62() /* reduce AAdditiveExpAdditiveExp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAdditiveExp padditiveexpNode1;
        {
            // Block
        PAdditiveExp padditiveexpNode2;
        TPlus tplusNode3;
        PDividitiveExp pdividitiveexpNode4;
        padditiveexpNode2 = (PAdditiveExp)nodeArrayList1.get(0);
        tplusNode3 = (TPlus)nodeArrayList2.get(0);
        pdividitiveexpNode4 = (PDividitiveExp)nodeArrayList3.get(0);

        padditiveexpNode1 = new AAdditiveExpAdditiveExp(padditiveexpNode2, tplusNode3, pdividitiveexpNode4);
        }
	nodeList.add(padditiveexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new63() /* reduce ASubtractiveExpSubtractiveExp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PSubtractiveExp psubtractiveexpNode1;
        {
            // Block
        PAdditiveExp padditiveexpNode2;
        TMinus tminusNode3;
        PDividitiveExp pdividitiveexpNode4;
        padditiveexpNode2 = (PAdditiveExp)nodeArrayList1.get(0);
        tminusNode3 = (TMinus)nodeArrayList2.get(0);
        pdividitiveexpNode4 = (PDividitiveExp)nodeArrayList3.get(0);

        psubtractiveexpNode1 = new ASubtractiveExpSubtractiveExp(padditiveexpNode2, tminusNode3, pdividitiveexpNode4);
        }
	nodeList.add(psubtractiveexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new64() /* reduce ABooleanExpExp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        PBooleanExp pbooleanexpNode2;
        pbooleanexpNode2 = (PBooleanExp)nodeArrayList1.get(0);

        pexpNode1 = new ABooleanExpExp(pbooleanexpNode2);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new65() /* reduce ACadeiaExpExp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        PCadeiaExp pcadeiaexpNode2;
        pcadeiaexpNode2 = (PCadeiaExp)nodeArrayList1.get(0);

        pexpNode1 = new ACadeiaExpExp(pcadeiaexpNode2);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new66() /* reduce AValorExp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        PValor pvalorNode2;
        pvalorNode2 = (PValor)nodeArrayList1.get(0);

        pexpNode1 = new AValorExp(pvalorNode2);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new67() /* reduce ASurroundedExpExp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        TLPar tlparNode2;
        PExp pexpNode3;
        TRPar trparNode4;
        tlparNode2 = (TLPar)nodeArrayList1.get(0);
        pexpNode3 = (PExp)nodeArrayList2.get(0);
        trparNode4 = (TRPar)nodeArrayList3.get(0);

        pexpNode1 = new ASurroundedExpExp(tlparNode2, pexpNode3, trparNode4);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new68() /* reduce AChamadaFuncaoExp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        PChamadaFuncao pchamadafuncaoNode2;
        pchamadafuncaoNode2 = (PChamadaFuncao)nodeArrayList1.get(0);

        pexpNode1 = new AChamadaFuncaoExp(pchamadafuncaoNode2);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new69() /* reduce AArrayCompExp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        PArrayComp parraycompNode2;
        parraycompNode2 = (PArrayComp)nodeArrayList1.get(0);

        pexpNode1 = new AArrayCompExp(parraycompNode2);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new70() /* reduce AMinusExpExp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        TMinus tminusNode2;
        PNumber pnumberNode3;
        tminusNode2 = (TMinus)nodeArrayList1.get(0);
        pnumberNode3 = (PNumber)nodeArrayList2.get(0);

        pexpNode1 = new AMinusExpExp(tminusNode2, pnumberNode3);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new71() /* reduce ASubtractiveExpExp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        PSubtractiveExp psubtractiveexpNode2;
        psubtractiveexpNode2 = (PSubtractiveExp)nodeArrayList1.get(0);

        pexpNode1 = new ASubtractiveExpExp(psubtractiveexpNode2);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new72() /* reduce AModExpExp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        PModExp pmodexpNode2;
        PNumber pnumberNode3;
        pmodexpNode2 = (PModExp)nodeArrayList1.get(0);
        pnumberNode3 = (PNumber)nodeArrayList2.get(0);

        pexpNode1 = new AModExpExp(pmodexpNode2, pnumberNode3);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new73() /* reduce AEqualExpExp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        PExp pexpNode2;
        TEqual tequalNode3;
        PLiteral pliteralNode4;
        pexpNode2 = (PExp)nodeArrayList1.get(0);
        tequalNode3 = (TEqual)nodeArrayList2.get(0);
        pliteralNode4 = (PLiteral)nodeArrayList3.get(0);

        pexpNode1 = new AEqualExpExp(pexpNode2, tequalNode3, pliteralNode4);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new74() /* reduce AGreaterExp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        PExp pexpNode2;
        TGreater tgreaterNode3;
        PNumber pnumberNode4;
        pexpNode2 = (PExp)nodeArrayList1.get(0);
        tgreaterNode3 = (TGreater)nodeArrayList2.get(0);
        pnumberNode4 = (PNumber)nodeArrayList3.get(0);

        pexpNode1 = new AGreaterExp(pexpNode2, tgreaterNode3, pnumberNode4);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new75() /* reduce AGreaterEqualExp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        PExp pexpNode2;
        TGreaterEqual tgreaterequalNode3;
        PNumber pnumberNode4;
        pexpNode2 = (PExp)nodeArrayList1.get(0);
        tgreaterequalNode3 = (TGreaterEqual)nodeArrayList2.get(0);
        pnumberNode4 = (PNumber)nodeArrayList3.get(0);

        pexpNode1 = new AGreaterEqualExp(pexpNode2, tgreaterequalNode3, pnumberNode4);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new76() /* reduce ANotExp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        TNao tnaoNode2;
        PBooleanExp pbooleanexpNode3;
        tnaoNode2 = (TNao)nodeArrayList1.get(0);
        pbooleanexpNode3 = (PBooleanExp)nodeArrayList2.get(0);

        pexpNode1 = new ANotExp(tnaoNode2, pbooleanexpNode3);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new77() /* reduce AAndExp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        PExp pexpNode2;
        TE teNode3;
        PBooleanExp pbooleanexpNode4;
        pexpNode2 = (PExp)nodeArrayList1.get(0);
        teNode3 = (TE)nodeArrayList2.get(0);
        pbooleanexpNode4 = (PBooleanExp)nodeArrayList3.get(0);

        pexpNode1 = new AAndExp(pexpNode2, teNode3, pbooleanexpNode4);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new78() /* reduce AOrExp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        PExp pexpNode2;
        TOu touNode3;
        PBooleanExp pbooleanexpNode4;
        pexpNode2 = (PExp)nodeArrayList1.get(0);
        touNode3 = (TOu)nodeArrayList2.get(0);
        pbooleanexpNode4 = (PBooleanExp)nodeArrayList3.get(0);

        pexpNode1 = new AOrExp(pexpNode2, touNode3, pbooleanexpNode4);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new79() /* reduce ABlocoExpressoesExp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        PBlocoExpressoes pblocoexpressoesNode2;
        pblocoexpressoesNode2 = (PBlocoExpressoes)nodeArrayList1.get(0);

        pexpNode1 = new ABlocoExpressoesExp(pblocoexpressoesNode2);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    private static int[][][] actionTable;
/*      {
			{{-1, ERROR, 0}, {15, SHIFT, 1}, {25, SHIFT, 2}, {26, SHIFT, 3}, {30, SHIFT, 4}, {31, SHIFT, 5}, },
			{{-1, ERROR, 1}, {26, SHIFT, 13}, },
			{{-1, ERROR, 2}, {3, SHIFT, 14}, },
			{{-1, ERROR, 3}, {3, SHIFT, 15}, },
			{{-1, ERROR, 4}, {3, SHIFT, 16}, },
			{{-1, ERROR, 5}, {3, SHIFT, 17}, },
			{{-1, ERROR, 6}, {47, ACCEPT, -1}, },
			{{-1, ERROR, 7}, {15, SHIFT, 1}, {25, SHIFT, 2}, {26, SHIFT, 3}, },
			{{-1, ERROR, 8}, {15, SHIFT, 19}, },
			{{-1, REDUCE, 3}, },
			{{-1, REDUCE, 4}, },
			{{-1, REDUCE, 5}, },
			{{-1, REDUCE, 6}, },
			{{-1, ERROR, 13}, {3, SHIFT, 21}, },
			{{-1, ERROR, 14}, {36, SHIFT, 22}, {37, SHIFT, 23}, {38, SHIFT, 24}, {39, SHIFT, 25}, },
			{{-1, ERROR, 15}, {46, SHIFT, 28}, },
			{{-1, ERROR, 16}, {36, SHIFT, 22}, {37, SHIFT, 23}, {38, SHIFT, 24}, {39, SHIFT, 25}, },
			{{-1, ERROR, 17}, {36, SHIFT, 22}, {37, SHIFT, 23}, {38, SHIFT, 24}, {39, SHIFT, 25}, },
			{{-1, ERROR, 18}, {15, SHIFT, 19}, },
			{{-1, ERROR, 19}, {26, SHIFT, 32}, },
			{{-1, REDUCE, 0}, },
			{{-1, ERROR, 21}, {46, SHIFT, 33}, },
			{{-1, REDUCE, 13}, },
			{{-1, REDUCE, 15}, },
			{{-1, REDUCE, 16}, },
			{{-1, REDUCE, 14}, },
			{{-1, ERROR, 26}, {7, SHIFT, 34}, {46, SHIFT, 35}, },
			{{-1, REDUCE, 11}, },
			{{-1, ERROR, 28}, {5, SHIFT, 36}, },
			{{-1, ERROR, 29}, {7, SHIFT, 34}, {46, SHIFT, 37}, },
			{{-1, ERROR, 30}, {7, SHIFT, 34}, {46, SHIFT, 39}, },
			{{-1, REDUCE, 1}, },
			{{-1, ERROR, 32}, {3, SHIFT, 40}, },
			{{-1, ERROR, 33}, {5, SHIFT, 41}, },
			{{-1, ERROR, 34}, {5, SHIFT, 42}, {7, SHIFT, 43}, {13, SHIFT, 44}, {19, SHIFT, 45}, {28, SHIFT, 46}, {40, SHIFT, 47}, {41, SHIFT, 48}, {42, SHIFT, 49}, {43, SHIFT, 50}, {46, SHIFT, 51}, },
			{{-1, ERROR, 35}, {5, SHIFT, 64}, },
			{{-1, REDUCE, 21}, {36, SHIFT, 22}, {37, SHIFT, 23}, {38, SHIFT, 24}, {39, SHIFT, 25}, },
			{{-1, REDUCE, 9}, {16, SHIFT, 70}, },
			{{-1, ERROR, 38}, {4, SHIFT, 71}, },
			{{-1, ERROR, 39}, {16, SHIFT, 72}, },
			{{-1, ERROR, 40}, {35, SHIFT, 73}, },
			{{-1, REDUCE, 21}, {36, SHIFT, 22}, {37, SHIFT, 23}, {38, SHIFT, 24}, {39, SHIFT, 25}, },
			{{-1, ERROR, 42}, {5, SHIFT, 42}, {7, SHIFT, 43}, {13, SHIFT, 44}, {19, SHIFT, 45}, {28, SHIFT, 46}, {40, SHIFT, 47}, {41, SHIFT, 48}, {42, SHIFT, 49}, {43, SHIFT, 50}, {46, SHIFT, 51}, },
			{{-1, ERROR, 43}, {46, SHIFT, 76}, },
			{{-1, ERROR, 44}, {40, SHIFT, 47}, {41, SHIFT, 48}, },
			{{-1, ERROR, 45}, {43, SHIFT, 50}, },
			{{-1, ERROR, 46}, {5, SHIFT, 42}, {7, SHIFT, 43}, {13, SHIFT, 44}, {19, SHIFT, 45}, {28, SHIFT, 46}, {31, SHIFT, 5}, {40, SHIFT, 47}, {41, SHIFT, 48}, {42, SHIFT, 49}, {43, SHIFT, 50}, {46, SHIFT, 51}, },
			{{-1, REDUCE, 51}, },
			{{-1, REDUCE, 50}, },
			{{-1, REDUCE, 53}, },
			{{-1, REDUCE, 52}, },
			{{-1, REDUCE, 39}, {5, SHIFT, 81}, },
			{{-1, REDUCE, 69}, },
			{{-1, REDUCE, 66}, {7, SHIFT, 82}, },
			{{-1, REDUCE, 79}, },
			{{-1, REDUCE, 68}, },
			{{-1, REDUCE, 59}, },
			{{-1, REDUCE, 64}, },
			{{-1, REDUCE, 65}, },
			{{-1, ERROR, 59}, {9, SHIFT, 83}, {11, SHIFT, 84}, },
			{{-1, ERROR, 60}, {40, SHIFT, 47}, {41, SHIFT, 48}, },
			{{-1, ERROR, 61}, {12, SHIFT, 86}, {13, SHIFT, 87}, },
			{{-1, REDUCE, 71}, },
			{{-1, ERROR, 63}, {8, SHIFT, 88}, {17, SHIFT, 89}, {18, SHIFT, 90}, {20, SHIFT, 91}, {21, SHIFT, 92}, {22, SHIFT, 93}, },
			{{-1, REDUCE, 21}, {36, SHIFT, 22}, {37, SHIFT, 23}, {38, SHIFT, 24}, {39, SHIFT, 25}, },
			{{-1, REDUCE, 27}, },
			{{-1, ERROR, 66}, {6, SHIFT, 95}, },
			{{-1, REDUCE, 22}, },
			{{-1, REDUCE, 23}, {14, SHIFT, 96}, },
			{{-1, ERROR, 69}, {7, SHIFT, 98}, {46, SHIFT, 99}, },
			{{-1, ERROR, 70}, {5, SHIFT, 42}, {7, SHIFT, 43}, {13, SHIFT, 44}, {19, SHIFT, 45}, {28, SHIFT, 46}, {40, SHIFT, 47}, {41, SHIFT, 48}, {42, SHIFT, 49}, {43, SHIFT, 50}, {46, SHIFT, 51}, },
			{{-1, REDUCE, 7}, },
			{{-1, ERROR, 72}, {5, SHIFT, 42}, {7, SHIFT, 43}, {13, SHIFT, 44}, {19, SHIFT, 45}, {28, SHIFT, 46}, {40, SHIFT, 47}, {41, SHIFT, 48}, {42, SHIFT, 49}, {43, SHIFT, 50}, {46, SHIFT, 51}, },
			{{-1, ERROR, 73}, {5, SHIFT, 102}, },
			{{-1, ERROR, 74}, {6, SHIFT, 103}, },
			{{-1, ERROR, 75}, {6, SHIFT, 104}, {17, SHIFT, 89}, {18, SHIFT, 90}, {20, SHIFT, 91}, {21, SHIFT, 92}, {22, SHIFT, 93}, },
			{{-1, ERROR, 76}, {14, SHIFT, 105}, },
			{{-1, REDUCE, 70}, },
			{{-1, REDUCE, 76}, },
			{{-1, ERROR, 79}, {5, SHIFT, 42}, {7, SHIFT, 43}, {13, SHIFT, 44}, {19, SHIFT, 45}, {28, SHIFT, 46}, {40, SHIFT, 47}, {41, SHIFT, 48}, {42, SHIFT, 49}, {43, SHIFT, 50}, {46, SHIFT, 51}, },
			{{-1, ERROR, 80}, {17, SHIFT, 89}, {18, SHIFT, 90}, {20, SHIFT, 91}, {21, SHIFT, 92}, {22, SHIFT, 93}, {29, SHIFT, 107}, },
			{{-1, REDUCE, 45}, {5, SHIFT, 42}, {7, SHIFT, 43}, {13, SHIFT, 44}, {19, SHIFT, 45}, {28, SHIFT, 46}, {40, SHIFT, 47}, {41, SHIFT, 48}, {42, SHIFT, 49}, {43, SHIFT, 50}, {46, SHIFT, 51}, },
			{{-1, ERROR, 82}, {5, SHIFT, 42}, {7, SHIFT, 43}, {13, SHIFT, 44}, {19, SHIFT, 45}, {28, SHIFT, 46}, {40, SHIFT, 47}, {41, SHIFT, 48}, {42, SHIFT, 49}, {43, SHIFT, 50}, {46, SHIFT, 51}, },
			{{-1, ERROR, 83}, {40, SHIFT, 47}, {41, SHIFT, 48}, },
			{{-1, ERROR, 84}, {40, SHIFT, 47}, {41, SHIFT, 48}, },
			{{-1, REDUCE, 72}, },
			{{-1, ERROR, 86}, {40, SHIFT, 47}, {41, SHIFT, 48}, },
			{{-1, ERROR, 87}, {40, SHIFT, 47}, {41, SHIFT, 48}, },
			{{-1, REDUCE, 12}, },
			{{-1, ERROR, 89}, {43, SHIFT, 50}, },
			{{-1, ERROR, 90}, {43, SHIFT, 50}, },
			{{-1, ERROR, 91}, {40, SHIFT, 47}, {41, SHIFT, 48}, },
			{{-1, ERROR, 92}, {40, SHIFT, 47}, {41, SHIFT, 48}, },
			{{-1, ERROR, 93}, {40, SHIFT, 121}, {41, SHIFT, 122}, {42, SHIFT, 123}, {43, SHIFT, 124}, },
			{{-1, ERROR, 94}, {6, SHIFT, 126}, },
			{{-1, ERROR, 95}, {28, SHIFT, 127}, },
			{{-1, ERROR, 96}, {36, SHIFT, 22}, {37, SHIFT, 23}, {38, SHIFT, 24}, {39, SHIFT, 25}, },
			{{-1, REDUCE, 24}, },
			{{-1, ERROR, 98}, {8, SHIFT, 129}, },
			{{-1, REDUCE, 26}, },
			{{-1, REDUCE, 10}, {17, SHIFT, 89}, {18, SHIFT, 90}, {20, SHIFT, 91}, {21, SHIFT, 92}, {22, SHIFT, 93}, },
			{{-1, ERROR, 101}, {4, SHIFT, 130}, {17, SHIFT, 89}, {18, SHIFT, 90}, {20, SHIFT, 91}, {21, SHIFT, 92}, {22, SHIFT, 93}, },
			{{-1, REDUCE, 21}, {36, SHIFT, 22}, {37, SHIFT, 23}, {38, SHIFT, 24}, {39, SHIFT, 25}, },
			{{-1, ERROR, 103}, {28, SHIFT, 132}, },
			{{-1, REDUCE, 67}, },
			{{-1, ERROR, 105}, {5, SHIFT, 42}, {7, SHIFT, 43}, {13, SHIFT, 44}, {19, SHIFT, 45}, {28, SHIFT, 46}, {40, SHIFT, 47}, {41, SHIFT, 48}, {42, SHIFT, 49}, {43, SHIFT, 50}, {46, SHIFT, 51}, },
			{{-1, ERROR, 106}, {17, SHIFT, 89}, {18, SHIFT, 90}, {20, SHIFT, 91}, {21, SHIFT, 92}, {22, SHIFT, 93}, {29, SHIFT, 134}, },
			{{-1, REDUCE, 41}, },
			{{-1, ERROR, 108}, {6, SHIFT, 135}, },
			{{-1, REDUCE, 46}, },
			{{-1, REDUCE, 47}, {14, SHIFT, 136}, {17, SHIFT, 89}, {18, SHIFT, 90}, {20, SHIFT, 91}, {21, SHIFT, 92}, {22, SHIFT, 93}, },
			{{-1, ERROR, 111}, {8, SHIFT, 138}, {17, SHIFT, 89}, {18, SHIFT, 90}, {20, SHIFT, 91}, {21, SHIFT, 92}, {22, SHIFT, 93}, },
			{{-1, REDUCE, 58}, },
			{{-1, REDUCE, 61}, },
			{{-1, ERROR, 114}, {9, SHIFT, 83}, {10, SHIFT, 139}, },
			{{-1, REDUCE, 62}, },
			{{-1, REDUCE, 63}, },
			{{-1, REDUCE, 77}, },
			{{-1, REDUCE, 78}, },
			{{-1, REDUCE, 74}, },
			{{-1, REDUCE, 75}, },
			{{-1, REDUCE, 55}, },
			{{-1, REDUCE, 54}, },
			{{-1, REDUCE, 57}, },
			{{-1, REDUCE, 56}, },
			{{-1, REDUCE, 73}, },
			{{-1, ERROR, 126}, {5, SHIFT, 42}, {7, SHIFT, 43}, {13, SHIFT, 44}, {19, SHIFT, 45}, {28, SHIFT, 46}, {40, SHIFT, 47}, {41, SHIFT, 48}, {42, SHIFT, 49}, {43, SHIFT, 50}, {46, SHIFT, 51}, },
			{{-1, ERROR, 127}, {5, SHIFT, 141}, {23, SHIFT, 142}, {27, SHIFT, 143}, {28, SHIFT, 144}, {46, SHIFT, 145}, },
			{{-1, REDUCE, 25}, },
			{{-1, REDUCE, 28}, },
			{{-1, REDUCE, 8}, },
			{{-1, ERROR, 131}, {6, SHIFT, 149}, },
			{{-1, ERROR, 132}, {5, SHIFT, 141}, {23, SHIFT, 142}, {27, SHIFT, 143}, {28, SHIFT, 144}, {46, SHIFT, 145}, },
			{{-1, ERROR, 133}, {8, SHIFT, 151}, {17, SHIFT, 89}, {18, SHIFT, 90}, {20, SHIFT, 91}, {21, SHIFT, 92}, {22, SHIFT, 93}, },
			{{-1, REDUCE, 42}, },
			{{-1, REDUCE, 43}, },
			{{-1, ERROR, 136}, {5, SHIFT, 42}, {7, SHIFT, 43}, {13, SHIFT, 44}, {19, SHIFT, 45}, {28, SHIFT, 46}, {40, SHIFT, 47}, {41, SHIFT, 48}, {42, SHIFT, 49}, {43, SHIFT, 50}, {46, SHIFT, 51}, },
			{{-1, REDUCE, 48}, },
			{{-1, REDUCE, 40}, },
			{{-1, ERROR, 139}, {40, SHIFT, 47}, {41, SHIFT, 48}, },
			{{-1, ERROR, 140}, {17, SHIFT, 89}, {18, SHIFT, 90}, {20, SHIFT, 91}, {21, SHIFT, 92}, {22, SHIFT, 93}, {28, SHIFT, 154}, },
			{{-1, REDUCE, 45}, {5, SHIFT, 42}, {7, SHIFT, 43}, {13, SHIFT, 44}, {19, SHIFT, 45}, {28, SHIFT, 46}, {40, SHIFT, 47}, {41, SHIFT, 48}, {42, SHIFT, 49}, {43, SHIFT, 50}, {46, SHIFT, 51}, },
			{{-1, ERROR, 142}, {5, SHIFT, 156}, },
			{{-1, ERROR, 143}, {5, SHIFT, 157}, },
			{{-1, ERROR, 144}, {5, SHIFT, 141}, {23, SHIFT, 142}, {27, SHIFT, 143}, {28, SHIFT, 144}, {29, SHIFT, 158}, {30, SHIFT, 4}, {31, SHIFT, 5}, {46, SHIFT, 145}, },
			{{-1, ERROR, 145}, {16, SHIFT, 161}, },
			{{-1, ERROR, 146}, {29, SHIFT, 162}, },
			{{-1, REDUCE, 34}, },
			{{-1, ERROR, 148}, {4, SHIFT, 163}, },
			{{-1, ERROR, 149}, {28, SHIFT, 164}, },
			{{-1, ERROR, 150}, {29, SHIFT, 165}, },
			{{-1, REDUCE, 17}, },
			{{-1, REDUCE, 49}, {17, SHIFT, 89}, {18, SHIFT, 90}, {20, SHIFT, 91}, {21, SHIFT, 92}, {22, SHIFT, 93}, },
			{{-1, REDUCE, 60}, },
			{{-1, ERROR, 154}, {29, SHIFT, 166}, },
			{{-1, ERROR, 155}, {6, SHIFT, 167}, },
			{{-1, ERROR, 156}, {5, SHIFT, 42}, {7, SHIFT, 43}, {13, SHIFT, 44}, {19, SHIFT, 45}, {28, SHIFT, 46}, {40, SHIFT, 47}, {41, SHIFT, 48}, {42, SHIFT, 49}, {43, SHIFT, 50}, {46, SHIFT, 51}, },
			{{-1, ERROR, 157}, {5, SHIFT, 42}, {7, SHIFT, 43}, {13, SHIFT, 44}, {19, SHIFT, 45}, {28, SHIFT, 46}, {40, SHIFT, 47}, {41, SHIFT, 48}, {42, SHIFT, 49}, {43, SHIFT, 50}, {46, SHIFT, 51}, },
			{{-1, REDUCE, 35}, },
			{{-1, ERROR, 159}, {5, SHIFT, 141}, {23, SHIFT, 142}, {27, SHIFT, 143}, {28, SHIFT, 144}, {29, SHIFT, 170}, {46, SHIFT, 145}, },
			{{-1, ERROR, 160}, {29, SHIFT, 172}, },
			{{-1, ERROR, 161}, {5, SHIFT, 42}, {7, SHIFT, 43}, {13, SHIFT, 44}, {19, SHIFT, 45}, {28, SHIFT, 46}, {40, SHIFT, 47}, {41, SHIFT, 48}, {42, SHIFT, 49}, {43, SHIFT, 50}, {46, SHIFT, 51}, },
			{{-1, REDUCE, 18}, },
			{{-1, REDUCE, 33}, },
			{{-1, ERROR, 164}, {5, SHIFT, 141}, {23, SHIFT, 142}, {27, SHIFT, 143}, {28, SHIFT, 144}, {46, SHIFT, 145}, },
			{{-1, REDUCE, 19}, },
			{{-1, REDUCE, 20}, },
			{{-1, REDUCE, 44}, },
			{{-1, ERROR, 168}, {6, SHIFT, 175}, {17, SHIFT, 89}, {18, SHIFT, 90}, {20, SHIFT, 91}, {21, SHIFT, 92}, {22, SHIFT, 93}, },
			{{-1, ERROR, 169}, {6, SHIFT, 176}, {17, SHIFT, 89}, {18, SHIFT, 90}, {20, SHIFT, 91}, {21, SHIFT, 92}, {22, SHIFT, 93}, },
			{{-1, REDUCE, 36}, },
			{{-1, ERROR, 171}, {29, SHIFT, 177}, },
			{{-1, REDUCE, 37}, },
			{{-1, ERROR, 173}, {4, SHIFT, 178}, {17, SHIFT, 89}, {18, SHIFT, 90}, {20, SHIFT, 91}, {21, SHIFT, 92}, {22, SHIFT, 93}, },
			{{-1, ERROR, 174}, {29, SHIFT, 179}, },
			{{-1, ERROR, 175}, {5, SHIFT, 141}, {23, SHIFT, 142}, {27, SHIFT, 143}, {28, SHIFT, 144}, {46, SHIFT, 145}, },
			{{-1, ERROR, 176}, {5, SHIFT, 141}, {23, SHIFT, 142}, {27, SHIFT, 143}, {28, SHIFT, 144}, {46, SHIFT, 145}, },
			{{-1, REDUCE, 38}, },
			{{-1, REDUCE, 32}, },
			{{-1, REDUCE, 2}, },
			{{-1, ERROR, 180}, {4, SHIFT, 182}, {24, SHIFT, 183}, },
			{{-1, REDUCE, 31}, },
			{{-1, REDUCE, 29}, },
			{{-1, ERROR, 183}, {5, SHIFT, 141}, {23, SHIFT, 142}, {27, SHIFT, 143}, {28, SHIFT, 144}, {46, SHIFT, 145}, },
			{{-1, REDUCE, 30}, },
        };*/
    private static int[][][] gotoTable;
/*      {
			{{-1, 6}, },
			{{-1, 20}, {18, 31}, },
			{{-1, 7}, {144, 159}, },
			{{-1, 8}, {7, 18}, },
			{{-1, 9}, },
			{{-1, 10}, {46, 79}, },
			{{-1, 38}, },
			{{-1, 26}, {16, 29}, {17, 30}, },
			{{-1, 65}, {14, 27}, {16, 27}, {17, 27}, },
			{{-1, 52}, },
			{{-1, 11}, },
			{{-1, 12}, },
			{{-1, 66}, {41, 74}, {64, 94}, {102, 131}, },
			{{-1, 67}, },
			{{-1, 97}, },
			{{-1, 68}, {96, 128}, },
			{{-1, 69}, },
			{{-1, 146}, {132, 150}, {144, 160}, {159, 171}, {164, 174}, {175, 180}, {176, 181}, {183, 184}, },
			{{-1, 147}, },
			{{-1, 53}, },
			{{-1, 54}, },
			{{-1, 55}, },
			{{-1, 148}, },
			{{-1, 108}, {141, 155}, },
			{{-1, 109}, },
			{{-1, 137}, },
			{{-1, 56}, {44, 77}, {60, 85}, {83, 112}, {84, 113}, {91, 119}, {92, 120}, {139, 153}, },
			{{-1, 57}, {45, 78}, {89, 117}, {90, 118}, },
			{{-1, 58}, },
			{{-1, 125}, },
			{{-1, 59}, {86, 114}, {87, 114}, },
			{{-1, 115}, {87, 116}, },
			{{-1, 60}, },
			{{-1, 61}, },
			{{-1, 62}, },
			{{-1, 110}, {34, 63}, {42, 75}, {46, 80}, {70, 100}, {72, 101}, {79, 106}, {82, 111}, {105, 133}, {126, 140}, {136, 152}, {156, 168}, {157, 169}, {161, 173}, },
        };*/
    private static String[] errorMessages;
/*      {
			"expecting: '>>', 'funcao', 'procedimento', 'var', 'const'",
			"expecting: 'procedimento'",
			"expecting: ':'",
			"expecting: EOF",
			"expecting: '>>', 'funcao', 'procedimento'",
			"expecting: '>>'",
			"expecting: '(', '>>', 'se', 'funcao', 'procedimento', 'enquanto', 'comece', 'termine', id",
			"expecting: 'inteiro', 'real', 'cadeia', 'booleano'",
			"expecting: id",
			"expecting: '[', id",
			"expecting: '('",
			"expecting: '(', '[', minus, 'nao', 'comece', floating constant, integer constant, cadeia constant, boolean constant, id",
			"expecting: ')', 'inteiro', 'real', 'cadeia', 'booleano'",
			"expecting: ';', '<<'",
			"expecting: ';'",
			"expecting: '<<'",
			"expecting: 'principal'",
			"expecting: floating constant, integer constant",
			"expecting: boolean constant",
			"expecting: '(', '[', minus, 'nao', 'comece', 'const', floating constant, integer constant, cadeia constant, boolean constant, id",
			"expecting: ';', ')', ']', '*', '/', '%', '+', minus, '|', 'e', 'ou', '>', '>=', '=', 'comece', 'termine', floating constant, integer constant",
			"expecting: ';', ')', ']', '|', 'e', 'ou', '>', '>=', '=', 'comece', 'termine'",
			"expecting: ';', '(', ')', '[', ']', '|', 'e', 'ou', '>', '>=', '=', 'comece', 'termine'",
			"expecting: ';', ')', '[', ']', '|', 'e', 'ou', '>', '>=', '=', 'comece', 'termine'",
			"expecting: '*', '/', '%'",
			"expecting: '*', '%'",
			"expecting: '+', minus",
			"expecting: ']', 'e', 'ou', '>', '>=', '='",
			"expecting: ')'",
			"expecting: ')', '|'",
			"expecting: ')', 'e', 'ou', '>', '>=', '='",
			"expecting: '|'",
			"expecting: 'e', 'ou', '>', '>=', '=', 'termine'",
			"expecting: '(', ')', '[', minus, 'nao', 'comece', floating constant, integer constant, cadeia constant, boolean constant, id",
			"expecting: floating constant, integer constant, cadeia constant, boolean constant",
			"expecting: 'comece'",
			"expecting: ']'",
			"expecting: ';', 'e', 'ou', '>', '>=', '='",
			"expecting: ')', '|', 'e', 'ou', '>', '>=', '='",
			"expecting: '*', '/'",
			"expecting: '(', 'se', 'enquanto', 'comece', id",
			"expecting: '(', '[', minus, '>>', 'nao', 'se', 'funcao', 'procedimento', 'enquanto', 'comece', 'termine', floating constant, integer constant, cadeia constant, boolean constant, id",
			"expecting: 'e', 'ou', '>', '>=', '=', 'comece'",
			"expecting: '(', 'se', 'enquanto', 'comece', 'termine', 'var', 'const', id",
			"expecting: 'termine'",
			"expecting: ';', 'senao', 'termine'",
			"expecting: ';', ')', ']', '+', minus, '|', 'e', 'ou', '>', '>=', '=', 'comece', 'termine'",
			"expecting: '(', 'se', 'enquanto', 'comece', 'termine', id",
			"expecting: ';', 'senao'",
        };*/
    private static int[] errors;
/*      {
			0, 1, 2, 2, 2, 2, 3, 4, 5, 6, 6, 5, 5, 2, 7, 8, 7, 7, 5, 1, 3, 8, 9, 9, 9, 9, 9, 9, 10, 9, 9, 3, 2, 10, 11, 10, 12, 13, 14, 15, 16, 12, 11, 8, 17, 18, 19, 20, 20, 21, 21, 22, 21, 23, 21, 21, 24, 21, 21, 25, 17, 26, 21, 27, 12, 9, 28, 28, 29, 9, 11, 6, 11, 10, 28, 30, 31, 21, 21, 11, 32, 33, 11, 17, 17, 21, 17, 17, 9, 18, 18, 17, 17, 34, 28, 35, 7, 28, 36, 29, 37, 37, 12, 35, 21, 11, 32, 21, 28, 28, 38, 27, 24, 17, 39, 26, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 11, 40, 28, 9, 41, 28, 40, 27, 21, 21, 11, 28, 23, 17, 42, 33, 10, 10, 43, 15, 44, 45, 14, 35, 44, 21, 30, 46, 44, 28, 11, 11, 45, 47, 44, 11, 5, 45, 40, 5, 5, 14, 30, 30, 45, 44, 45, 37, 44, 40, 40, 45, 45, 3, 48, 45, 45, 40, 45, 
        };*/

    static 
    {
        try
        {
            DataInputStream s = new DataInputStream(
                new BufferedInputStream(
                Parser.class.getResourceAsStream("parser.dat")));

            // read actionTable
            int length = s.readInt();
            Parser.actionTable = new int[length][][];
            for(int i = 0; i < Parser.actionTable.length; i++)
            {
                length = s.readInt();
                Parser.actionTable[i] = new int[length][3];
                for(int j = 0; j < Parser.actionTable[i].length; j++)
                {
                for(int k = 0; k < 3; k++)
                {
                    Parser.actionTable[i][j][k] = s.readInt();
                }
                }
            }

            // read gotoTable
            length = s.readInt();
            gotoTable = new int[length][][];
            for(int i = 0; i < gotoTable.length; i++)
            {
                length = s.readInt();
                gotoTable[i] = new int[length][2];
                for(int j = 0; j < gotoTable[i].length; j++)
                {
                for(int k = 0; k < 2; k++)
                {
                    gotoTable[i][j][k] = s.readInt();
                }
                }
            }

            // read errorMessages
            length = s.readInt();
            errorMessages = new String[length];
            for(int i = 0; i < errorMessages.length; i++)
            {
                length = s.readInt();
                StringBuffer buffer = new StringBuffer();

                for(int j = 0; j < length; j++)
                {
                buffer.append(s.readChar());
                }
                errorMessages[i] = buffer.toString();
            }

            // read errors
            length = s.readInt();
            errors = new int[length];
            for(int i = 0; i < errors.length; i++)
            {
                errors[i] = s.readInt();
            }

            s.close();
        }
        catch(Exception e)
        {
            throw new RuntimeException("The file \"parser.dat\" is either missing or corrupted.");
        }
    }
}
