/* This file was generated by SableCC (http://www.sablecc.org/). */

package sarapatel.node;

import sarapatel.analysis.*;

@SuppressWarnings("nls")
public final class AAttrComando extends PComando
{
    private PArrAttr _arrAttr_;
    private TDd _dd_;
    private PExp _exp_;
    private TSemi _semi_;

    public AAttrComando()
    {
        // Constructor
    }

    public AAttrComando(
        @SuppressWarnings("hiding") PArrAttr _arrAttr_,
        @SuppressWarnings("hiding") TDd _dd_,
        @SuppressWarnings("hiding") PExp _exp_,
        @SuppressWarnings("hiding") TSemi _semi_)
    {
        // Constructor
        setArrAttr(_arrAttr_);

        setDd(_dd_);

        setExp(_exp_);

        setSemi(_semi_);

    }

    @Override
    public Object clone()
    {
        return new AAttrComando(
            cloneNode(this._arrAttr_),
            cloneNode(this._dd_),
            cloneNode(this._exp_),
            cloneNode(this._semi_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAAttrComando(this);
    }

    public PArrAttr getArrAttr()
    {
        return this._arrAttr_;
    }

    public void setArrAttr(PArrAttr node)
    {
        if(this._arrAttr_ != null)
        {
            this._arrAttr_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._arrAttr_ = node;
    }

    public TDd getDd()
    {
        return this._dd_;
    }

    public void setDd(TDd node)
    {
        if(this._dd_ != null)
        {
            this._dd_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._dd_ = node;
    }

    public PExp getExp()
    {
        return this._exp_;
    }

    public void setExp(PExp node)
    {
        if(this._exp_ != null)
        {
            this._exp_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._exp_ = node;
    }

    public TSemi getSemi()
    {
        return this._semi_;
    }

    public void setSemi(TSemi node)
    {
        if(this._semi_ != null)
        {
            this._semi_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._semi_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._arrAttr_)
            + toString(this._dd_)
            + toString(this._exp_)
            + toString(this._semi_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._arrAttr_ == child)
        {
            this._arrAttr_ = null;
            return;
        }

        if(this._dd_ == child)
        {
            this._dd_ = null;
            return;
        }

        if(this._exp_ == child)
        {
            this._exp_ = null;
            return;
        }

        if(this._semi_ == child)
        {
            this._semi_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._arrAttr_ == oldChild)
        {
            setArrAttr((PArrAttr) newChild);
            return;
        }

        if(this._dd_ == oldChild)
        {
            setDd((TDd) newChild);
            return;
        }

        if(this._exp_ == oldChild)
        {
            setExp((PExp) newChild);
            return;
        }

        if(this._semi_ == oldChild)
        {
            setSemi((TSemi) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
