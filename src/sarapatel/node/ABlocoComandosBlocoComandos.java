/* This file was generated by SableCC (http://www.sablecc.org/). */

package sarapatel.node;

import java.util.*;
import sarapatel.analysis.*;

@SuppressWarnings("nls")
public final class ABlocoComandosBlocoComandos extends PBlocoComandos
{
    private TComece _comece_;
    private final LinkedList<PDecVarOrConst> _decVarOrConst_ = new LinkedList<PDecVarOrConst>();
    private final LinkedList<PComando> _comando_ = new LinkedList<PComando>();
    private TTermine _termine_;

    public ABlocoComandosBlocoComandos()
    {
        // Constructor
    }

    public ABlocoComandosBlocoComandos(
        @SuppressWarnings("hiding") TComece _comece_,
        @SuppressWarnings("hiding") List<?> _decVarOrConst_,
        @SuppressWarnings("hiding") List<?> _comando_,
        @SuppressWarnings("hiding") TTermine _termine_)
    {
        // Constructor
        setComece(_comece_);

        setDecVarOrConst(_decVarOrConst_);

        setComando(_comando_);

        setTermine(_termine_);

    }

    @Override
    public Object clone()
    {
        return new ABlocoComandosBlocoComandos(
            cloneNode(this._comece_),
            cloneList(this._decVarOrConst_),
            cloneList(this._comando_),
            cloneNode(this._termine_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseABlocoComandosBlocoComandos(this);
    }

    public TComece getComece()
    {
        return this._comece_;
    }

    public void setComece(TComece node)
    {
        if(this._comece_ != null)
        {
            this._comece_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._comece_ = node;
    }

    public LinkedList<PDecVarOrConst> getDecVarOrConst()
    {
        return this._decVarOrConst_;
    }

    public void setDecVarOrConst(List<?> list)
    {
        for(PDecVarOrConst e : this._decVarOrConst_)
        {
            e.parent(null);
        }
        this._decVarOrConst_.clear();

        for(Object obj_e : list)
        {
            PDecVarOrConst e = (PDecVarOrConst) obj_e;
            if(e.parent() != null)
            {
                e.parent().removeChild(e);
            }

            e.parent(this);
            this._decVarOrConst_.add(e);
        }
    }

    public LinkedList<PComando> getComando()
    {
        return this._comando_;
    }

    public void setComando(List<?> list)
    {
        for(PComando e : this._comando_)
        {
            e.parent(null);
        }
        this._comando_.clear();

        for(Object obj_e : list)
        {
            PComando e = (PComando) obj_e;
            if(e.parent() != null)
            {
                e.parent().removeChild(e);
            }

            e.parent(this);
            this._comando_.add(e);
        }
    }

    public TTermine getTermine()
    {
        return this._termine_;
    }

    public void setTermine(TTermine node)
    {
        if(this._termine_ != null)
        {
            this._termine_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._termine_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._comece_)
            + toString(this._decVarOrConst_)
            + toString(this._comando_)
            + toString(this._termine_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._comece_ == child)
        {
            this._comece_ = null;
            return;
        }

        if(this._decVarOrConst_.remove(child))
        {
            return;
        }

        if(this._comando_.remove(child))
        {
            return;
        }

        if(this._termine_ == child)
        {
            this._termine_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._comece_ == oldChild)
        {
            setComece((TComece) newChild);
            return;
        }

        for(ListIterator<PDecVarOrConst> i = this._decVarOrConst_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set((PDecVarOrConst) newChild);
                    newChild.parent(this);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        for(ListIterator<PComando> i = this._comando_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set((PComando) newChild);
                    newChild.parent(this);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        if(this._termine_ == oldChild)
        {
            setTermine((TTermine) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
