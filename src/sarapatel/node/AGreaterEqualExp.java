/* This file was generated by SableCC (http://www.sablecc.org/). */

package sarapatel.node;

import sarapatel.analysis.*;

@SuppressWarnings("nls")
public final class AGreaterEqualExp extends PExp
{
    private PExp _exp_;
    private TGreaterEqual _greaterEqual_;
    private PNumber _number_;

    public AGreaterEqualExp()
    {
        // Constructor
    }

    public AGreaterEqualExp(
        @SuppressWarnings("hiding") PExp _exp_,
        @SuppressWarnings("hiding") TGreaterEqual _greaterEqual_,
        @SuppressWarnings("hiding") PNumber _number_)
    {
        // Constructor
        setExp(_exp_);

        setGreaterEqual(_greaterEqual_);

        setNumber(_number_);

    }

    @Override
    public Object clone()
    {
        return new AGreaterEqualExp(
            cloneNode(this._exp_),
            cloneNode(this._greaterEqual_),
            cloneNode(this._number_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAGreaterEqualExp(this);
    }

    public PExp getExp()
    {
        return this._exp_;
    }

    public void setExp(PExp node)
    {
        if(this._exp_ != null)
        {
            this._exp_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._exp_ = node;
    }

    public TGreaterEqual getGreaterEqual()
    {
        return this._greaterEqual_;
    }

    public void setGreaterEqual(TGreaterEqual node)
    {
        if(this._greaterEqual_ != null)
        {
            this._greaterEqual_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._greaterEqual_ = node;
    }

    public PNumber getNumber()
    {
        return this._number_;
    }

    public void setNumber(PNumber node)
    {
        if(this._number_ != null)
        {
            this._number_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._number_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._exp_)
            + toString(this._greaterEqual_)
            + toString(this._number_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._exp_ == child)
        {
            this._exp_ = null;
            return;
        }

        if(this._greaterEqual_ == child)
        {
            this._greaterEqual_ = null;
            return;
        }

        if(this._number_ == child)
        {
            this._number_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._exp_ == oldChild)
        {
            setExp((PExp) newChild);
            return;
        }

        if(this._greaterEqual_ == oldChild)
        {
            setGreaterEqual((TGreaterEqual) newChild);
            return;
        }

        if(this._number_ == oldChild)
        {
            setNumber((PNumber) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
