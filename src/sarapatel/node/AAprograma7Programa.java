/* This file was generated by SableCC (http://www.sablecc.org/). */

package sarapatel.node;

import java.util.*;
import sarapatel.analysis.*;

@SuppressWarnings("nls")
public final class AAprograma7Programa extends PPrograma
{
    private final LinkedList<PDecConst> _decConst_ = new LinkedList<PDecConst>();
    private final LinkedList<PDecProc> _decProc_ = new LinkedList<PDecProc>();

    public AAprograma7Programa()
    {
        // Constructor
    }

    public AAprograma7Programa(
        @SuppressWarnings("hiding") List<?> _decConst_,
        @SuppressWarnings("hiding") List<?> _decProc_)
    {
        // Constructor
        setDecConst(_decConst_);

        setDecProc(_decProc_);

    }

    @Override
    public Object clone()
    {
        return new AAprograma7Programa(
            cloneList(this._decConst_),
            cloneList(this._decProc_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAAprograma7Programa(this);
    }

    public LinkedList<PDecConst> getDecConst()
    {
        return this._decConst_;
    }

    public void setDecConst(List<?> list)
    {
        for(PDecConst e : this._decConst_)
        {
            e.parent(null);
        }
        this._decConst_.clear();

        for(Object obj_e : list)
        {
            PDecConst e = (PDecConst) obj_e;
            if(e.parent() != null)
            {
                e.parent().removeChild(e);
            }

            e.parent(this);
            this._decConst_.add(e);
        }
    }

    public LinkedList<PDecProc> getDecProc()
    {
        return this._decProc_;
    }

    public void setDecProc(List<?> list)
    {
        for(PDecProc e : this._decProc_)
        {
            e.parent(null);
        }
        this._decProc_.clear();

        for(Object obj_e : list)
        {
            PDecProc e = (PDecProc) obj_e;
            if(e.parent() != null)
            {
                e.parent().removeChild(e);
            }

            e.parent(this);
            this._decProc_.add(e);
        }
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._decConst_)
            + toString(this._decProc_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._decConst_.remove(child))
        {
            return;
        }

        if(this._decProc_.remove(child))
        {
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        for(ListIterator<PDecConst> i = this._decConst_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set((PDecConst) newChild);
                    newChild.parent(this);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        for(ListIterator<PDecProc> i = this._decProc_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set((PDecProc) newChild);
                    newChild.parent(this);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        throw new RuntimeException("Not a child.");
    }
}
