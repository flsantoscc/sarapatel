/* This file was generated by SableCC (http://www.sablecc.org/). */

package sarapatel.analysis;

import sarapatel.node.*;

public interface Analysis extends Switch
{
    Object getIn(Node node);
    void setIn(Node node, Object o);
    Object getOut(Node node);
    void setOut(Node node, Object o);

    void caseStart(Start node);
    void caseAProgramaPrograma(AProgramaPrograma node);
    void caseADecVarDecVarOrConst(ADecVarDecVarOrConst node);
    void caseADecConstDecVarOrConst(ADecConstDecVarOrConst node);
    void caseADecProcDecProcOrFuncao(ADecProcDecProcOrFuncao node);
    void caseADecFuncaoDecProcOrFuncao(ADecFuncaoDecProcOrFuncao node);
    void caseADecVarDecVar(ADecVarDecVar node);
    void caseADecConsDecCons(ADecConsDecCons node);
    void caseAIdIdOrIdAtribuicao(AIdIdOrIdAtribuicao node);
    void caseAIdAtribuicaoIdOrIdAtribuicao(AIdAtribuicaoIdOrIdAtribuicao node);
    void caseAIdAtribuicaoIdAtribuicao(AIdAtribuicaoIdAtribuicao node);
    void caseATipoBaseTipo(ATipoBaseTipo node);
    void caseATipoBrktTipo(ATipoBrktTipo node);
    void caseAInteiroTipoBase(AInteiroTipoBase node);
    void caseABooleanoTipoBase(ABooleanoTipoBase node);
    void caseARealTipoBase(ARealTipoBase node);
    void caseACadeiaTipoBase(ACadeiaTipoBase node);
    void caseAArrayCompArrayComp(AArrayCompArrayComp node);
    void caseADecProcedimentoDecProcedimento(ADecProcedimentoDecProcedimento node);
    void caseADecFuncaoDecFuncao(ADecFuncaoDecFuncao node);
    void caseAParametrosParametros(AParametrosParametros node);
    void caseAPipeParametroClosureParametrosAux(APipeParametroClosureParametrosAux node);
    void caseAPipeParametroPipeParametro(APipeParametroPipeParametro node);
    void caseAParametroParametro(AParametroParametro node);
    void caseATipoBaseTipoParametro(ATipoBaseTipoParametro node);
    void caseATipoParametroBrktTipoParametro(ATipoParametroBrktTipoParametro node);
    void caseASeComandoComando(ASeComandoComando node);
    void caseASeSenaoComandoComando(ASeSenaoComandoComando node);
    void caseAEnquantoComando(AEnquantoComando node);
    void caseAIdAtribuicaoComando(AIdAtribuicaoComando node);
    void caseAChamadaProcComando(AChamadaProcComando node);
    void caseABlocoComandosComando(ABlocoComandosComando node);
    void caseABlocoComandosBlocoComandos(ABlocoComandosBlocoComandos node);
    void caseAValorValor(AValorValor node);
    void caseAValorBrktsValor(AValorBrktsValor node);
    void caseABlocoExpressoesBlocoExpressoes(ABlocoExpressoesBlocoExpressoes node);
    void caseAChamadaFuncaoChamadaFuncao(AChamadaFuncaoChamadaFuncao node);
    void caseAChamadaProcedimentoChamadaProcedimento(AChamadaProcedimentoChamadaProcedimento node);
    void caseAListaExpListaExp(AListaExpListaExp node);
    void caseAAuxListaExpAux(AAuxListaExpAux node);
    void caseAPipeExpPipeExp(APipeExpPipeExp node);
    void caseAInteiroExp(AInteiroExp node);
    void caseARealExp(ARealExp node);
    void caseACadeiaExp(ACadeiaExp node);
    void caseABooleanoExp(ABooleanoExp node);
    void caseAValorExp(AValorExp node);
    void caseASourroundedExpExp(ASourroundedExpExp node);
    void caseAChamadaFuncaoExp(AChamadaFuncaoExp node);
    void caseAArrayCompExp(AArrayCompExp node);
    void caseAMinusExpExp(AMinusExpExp node);
    void caseAIfElseExp(AIfElseExp node);
    void caseAExpSumExp(AExpSumExp node);
    void caseAExpSubExp(AExpSubExp node);
    void caseAExpMultExp(AExpMultExp node);
    void caseAExpDivExp(AExpDivExp node);
    void caseAExpModExp(AExpModExp node);
    void caseAExpEqExp(AExpEqExp node);
    void caseAExpGreaterOrEqualExp(AExpGreaterOrEqualExp node);
    void caseAExpGreaterExp(AExpGreaterExp node);
    void caseANotExpExp(ANotExpExp node);
    void caseAExpAndExpExp(AExpAndExpExp node);
    void caseAExpOrExpExp(AExpOrExpExp node);
    void caseABlocoExpressoesExp(ABlocoExpressoesExp node);

    void caseTDigit(TDigit node);
    void caseTDot(TDot node);
    void caseTComma(TComma node);
    void caseTColon(TColon node);
    void caseTSemicolon(TSemicolon node);
    void caseTLPar(TLPar node);
    void caseTRPar(TRPar node);
    void caseTLBracket(TLBracket node);
    void caseTRBracket(TRBracket node);
    void caseTStar(TStar node);
    void caseTDiv(TDiv node);
    void caseTMod(TMod node);
    void caseTPlus(TPlus node);
    void caseTMinus(TMinus node);
    void caseTPipe(TPipe node);
    void caseTMainInit(TMainInit node);
    void caseTAttr(TAttr node);
    void caseTE(TE node);
    void caseTOu(TOu node);
    void caseTNao(TNao node);
    void caseTGreater(TGreater node);
    void caseTGreaterOrEqual(TGreaterOrEqual node);
    void caseTEqual(TEqual node);
    void caseTSe(TSe node);
    void caseTSenao(TSenao node);
    void caseTFuncao(TFuncao node);
    void caseTProcedimento(TProcedimento node);
    void caseTEnquanto(TEnquanto node);
    void caseTComece(TComece node);
    void caseTTermine(TTermine node);
    void caseTVar(TVar node);
    void caseTConst(TConst node);
    void caseTImprima(TImprima node);
    void caseTLeia(TLeia node);
    void caseTSize(TSize node);
    void caseTTInteiro(TTInteiro node);
    void caseTTReal(TTReal node);
    void caseTTCadeia(TTCadeia node);
    void caseTTBooleano(TTBooleano node);
    void caseTFloatingConstant(TFloatingConstant node);
    void caseTIntegerConstant(TIntegerConstant node);
    void caseTCadeiaConstant(TCadeiaConstant node);
    void caseTBooleanConstant(TBooleanConstant node);
    void caseTNegativeFloatingConstant(TNegativeFloatingConstant node);
    void caseTNegativeIntegerConstant(TNegativeIntegerConstant node);
    void caseTEol(TEol node);
    void caseTBlank(TBlank node);
    void caseTId(TId node);
    void caseTComment(TComment node);
    void caseEOF(EOF node);
    void caseInvalidToken(InvalidToken node);
}
