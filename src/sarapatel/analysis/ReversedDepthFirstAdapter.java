/* This file was generated by SableCC (http://www.sablecc.org/). */

package sarapatel.analysis;

import java.util.*;
import sarapatel.node.*;

public class ReversedDepthFirstAdapter extends AnalysisAdapter
{
    public void inStart(Start node)
    {
        defaultIn(node);
    }

    public void outStart(Start node)
    {
        defaultOut(node);
    }

    public void defaultIn(@SuppressWarnings("unused") Node node)
    {
        // Do nothing
    }

    public void defaultOut(@SuppressWarnings("unused") Node node)
    {
        // Do nothing
    }

    @Override
    public void caseStart(Start node)
    {
        inStart(node);
        node.getEOF().apply(this);
        node.getPPrograma().apply(this);
        outStart(node);
    }

    public void inAPrograma(APrograma node)
    {
        defaultIn(node);
    }

    public void outAPrograma(APrograma node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPrograma(APrograma node)
    {
        inAPrograma(node);
        {
            List<PDecProcOrFunc> copy = new ArrayList<PDecProcOrFunc>(node.getDecProcOrFunc());
            Collections.reverse(copy);
            for(PDecProcOrFunc e : copy)
            {
                e.apply(this);
            }
        }
        {
            List<PDecVarOrConst> copy = new ArrayList<PDecVarOrConst>(node.getDecVarOrConst());
            Collections.reverse(copy);
            for(PDecVarOrConst e : copy)
            {
                e.apply(this);
            }
        }
        outAPrograma(node);
    }

    public void inAProcDecProcOrFunc(AProcDecProcOrFunc node)
    {
        defaultIn(node);
    }

    public void outAProcDecProcOrFunc(AProcDecProcOrFunc node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAProcDecProcOrFunc(AProcDecProcOrFunc node)
    {
        inAProcDecProcOrFunc(node);
        if(node.getDecProc() != null)
        {
            node.getDecProc().apply(this);
        }
        outAProcDecProcOrFunc(node);
    }

    public void inAFuncDecProcOrFunc(AFuncDecProcOrFunc node)
    {
        defaultIn(node);
    }

    public void outAFuncDecProcOrFunc(AFuncDecProcOrFunc node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFuncDecProcOrFunc(AFuncDecProcOrFunc node)
    {
        inAFuncDecProcOrFunc(node);
        if(node.getDecFunc() != null)
        {
            node.getDecFunc().apply(this);
        }
        outAFuncDecProcOrFunc(node);
    }

    public void inAVarDecVarOrConst(AVarDecVarOrConst node)
    {
        defaultIn(node);
    }

    public void outAVarDecVarOrConst(AVarDecVarOrConst node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVarDecVarOrConst(AVarDecVarOrConst node)
    {
        inAVarDecVarOrConst(node);
        if(node.getDecVar() != null)
        {
            node.getDecVar().apply(this);
        }
        outAVarDecVarOrConst(node);
    }

    public void inAConstDecVarOrConst(AConstDecVarOrConst node)
    {
        defaultIn(node);
    }

    public void outAConstDecVarOrConst(AConstDecVarOrConst node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAConstDecVarOrConst(AConstDecVarOrConst node)
    {
        inAConstDecVarOrConst(node);
        if(node.getDecConst() != null)
        {
            node.getDecConst().apply(this);
        }
        outAConstDecVarOrConst(node);
    }

    public void inADecVar(ADecVar node)
    {
        defaultIn(node);
    }

    public void outADecVar(ADecVar node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADecVar(ADecVar node)
    {
        inADecVar(node);
        if(node.getSemi() != null)
        {
            node.getSemi().apply(this);
        }
        if(node.getIdDec() != null)
        {
            node.getIdDec().apply(this);
        }
        if(node.getTipo() != null)
        {
            node.getTipo().apply(this);
        }
        if(node.getColon() != null)
        {
            node.getColon().apply(this);
        }
        if(node.getVar() != null)
        {
            node.getVar().apply(this);
        }
        outADecVar(node);
    }

    public void inADecConst(ADecConst node)
    {
        defaultIn(node);
    }

    public void outADecConst(ADecConst node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADecConst(ADecConst node)
    {
        inADecConst(node);
        if(node.getSemi() != null)
        {
            node.getSemi().apply(this);
        }
        if(node.getAttr() != null)
        {
            node.getAttr().apply(this);
        }
        if(node.getTipo() != null)
        {
            node.getTipo().apply(this);
        }
        if(node.getColon() != null)
        {
            node.getColon().apply(this);
        }
        if(node.getConst() != null)
        {
            node.getConst().apply(this);
        }
        outADecConst(node);
    }

    public void inAIdIdDec(AIdIdDec node)
    {
        defaultIn(node);
    }

    public void outAIdIdDec(AIdIdDec node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIdIdDec(AIdIdDec node)
    {
        inAIdIdDec(node);
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        outAIdIdDec(node);
    }

    public void inAIdAtrIdDec(AIdAtrIdDec node)
    {
        defaultIn(node);
    }

    public void outAIdAtrIdDec(AIdAtrIdDec node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIdAtrIdDec(AIdAtrIdDec node)
    {
        inAIdAtrIdDec(node);
        if(node.getAttr() != null)
        {
            node.getAttr().apply(this);
        }
        outAIdAtrIdDec(node);
    }

    public void inADecProc(ADecProc node)
    {
        defaultIn(node);
    }

    public void outADecProc(ADecProc node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADecProc(ADecProc node)
    {
        inADecProc(node);
        if(node.getComando() != null)
        {
            node.getComando().apply(this);
        }
        if(node.getRPar() != null)
        {
            node.getRPar().apply(this);
        }
        if(node.getParam() != null)
        {
            node.getParam().apply(this);
        }
        if(node.getLPar() != null)
        {
            node.getLPar().apply(this);
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        if(node.getColon() != null)
        {
            node.getColon().apply(this);
        }
        if(node.getProcedimento() != null)
        {
            node.getProcedimento().apply(this);
        }
        if(node.getMainInit() != null)
        {
            node.getMainInit().apply(this);
        }
        outADecProc(node);
    }

    public void inADecFunc(ADecFunc node)
    {
        defaultIn(node);
    }

    public void outADecFunc(ADecFunc node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADecFunc(ADecFunc node)
    {
        inADecFunc(node);
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        if(node.getRPar() != null)
        {
            node.getRPar().apply(this);
        }
        if(node.getParam() != null)
        {
            node.getParam().apply(this);
        }
        if(node.getLPar() != null)
        {
            node.getLPar().apply(this);
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        if(node.getTipoFunc() != null)
        {
            node.getTipoFunc().apply(this);
        }
        if(node.getColon() != null)
        {
            node.getColon().apply(this);
        }
        if(node.getFuncao() != null)
        {
            node.getFuncao().apply(this);
        }
        outADecFunc(node);
    }

    public void inAChamadaFuncao(AChamadaFuncao node)
    {
        defaultIn(node);
    }

    public void outAChamadaFuncao(AChamadaFuncao node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAChamadaFuncao(AChamadaFuncao node)
    {
        inAChamadaFuncao(node);
        if(node.getRPar() != null)
        {
            node.getRPar().apply(this);
        }
        if(node.getExpList() != null)
        {
            node.getExpList().apply(this);
        }
        if(node.getLPar() != null)
        {
            node.getLPar().apply(this);
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        outAChamadaFuncao(node);
    }

    public void inAChamadaProcedimento(AChamadaProcedimento node)
    {
        defaultIn(node);
    }

    public void outAChamadaProcedimento(AChamadaProcedimento node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAChamadaProcedimento(AChamadaProcedimento node)
    {
        inAChamadaProcedimento(node);
        if(node.getRPar() != null)
        {
            node.getRPar().apply(this);
        }
        if(node.getExpList() != null)
        {
            node.getExpList().apply(this);
        }
        if(node.getLPar() != null)
        {
            node.getLPar().apply(this);
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        outAChamadaProcedimento(node);
    }

    public void inABaseTipo(ABaseTipo node)
    {
        defaultIn(node);
    }

    public void outABaseTipo(ABaseTipo node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABaseTipo(ABaseTipo node)
    {
        inABaseTipo(node);
        if(node.getTipoKw() != null)
        {
            node.getTipoKw().apply(this);
        }
        outABaseTipo(node);
    }

    public void inAArrTipo(AArrTipo node)
    {
        defaultIn(node);
    }

    public void outAArrTipo(AArrTipo node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAArrTipo(AArrTipo node)
    {
        inAArrTipo(node);
        if(node.getRBrkt() != null)
        {
            node.getRBrkt().apply(this);
        }
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        if(node.getLBrkt() != null)
        {
            node.getLBrkt().apply(this);
        }
        if(node.getTipo() != null)
        {
            node.getTipo().apply(this);
        }
        outAArrTipo(node);
    }

    public void inABaseTipoFunc(ABaseTipoFunc node)
    {
        defaultIn(node);
    }

    public void outABaseTipoFunc(ABaseTipoFunc node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABaseTipoFunc(ABaseTipoFunc node)
    {
        inABaseTipoFunc(node);
        if(node.getTipoKw() != null)
        {
            node.getTipoKw().apply(this);
        }
        outABaseTipoFunc(node);
    }

    public void inAArrTipoFunc(AArrTipoFunc node)
    {
        defaultIn(node);
    }

    public void outAArrTipoFunc(AArrTipoFunc node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAArrTipoFunc(AArrTipoFunc node)
    {
        inAArrTipoFunc(node);
        if(node.getRBrkt() != null)
        {
            node.getRBrkt().apply(this);
        }
        if(node.getLBrkt() != null)
        {
            node.getLBrkt().apply(this);
        }
        if(node.getTipoFunc() != null)
        {
            node.getTipoFunc().apply(this);
        }
        outAArrTipoFunc(node);
    }

    public void inAIntTipoKw(AIntTipoKw node)
    {
        defaultIn(node);
    }

    public void outAIntTipoKw(AIntTipoKw node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIntTipoKw(AIntTipoKw node)
    {
        inAIntTipoKw(node);
        if(node.getIntKw() != null)
        {
            node.getIntKw().apply(this);
        }
        outAIntTipoKw(node);
    }

    public void inABoolTipoKw(ABoolTipoKw node)
    {
        defaultIn(node);
    }

    public void outABoolTipoKw(ABoolTipoKw node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABoolTipoKw(ABoolTipoKw node)
    {
        inABoolTipoKw(node);
        if(node.getBoolKw() != null)
        {
            node.getBoolKw().apply(this);
        }
        outABoolTipoKw(node);
    }

    public void inARealTipoKw(ARealTipoKw node)
    {
        defaultIn(node);
    }

    public void outARealTipoKw(ARealTipoKw node)
    {
        defaultOut(node);
    }

    @Override
    public void caseARealTipoKw(ARealTipoKw node)
    {
        inARealTipoKw(node);
        if(node.getFloatKw() != null)
        {
            node.getFloatKw().apply(this);
        }
        outARealTipoKw(node);
    }

    public void inACadeiaTipoKw(ACadeiaTipoKw node)
    {
        defaultIn(node);
    }

    public void outACadeiaTipoKw(ACadeiaTipoKw node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACadeiaTipoKw(ACadeiaTipoKw node)
    {
        inACadeiaTipoKw(node);
        if(node.getStringKw() != null)
        {
            node.getStringKw().apply(this);
        }
        outACadeiaTipoKw(node);
    }

    public void inAAttr(AAttr node)
    {
        defaultIn(node);
    }

    public void outAAttr(AAttr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAttr(AAttr node)
    {
        inAAttr(node);
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        if(node.getDd() != null)
        {
            node.getDd().apply(this);
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        outAAttr(node);
    }

    public void inAIdArrAttr(AIdArrAttr node)
    {
        defaultIn(node);
    }

    public void outAIdArrAttr(AIdArrAttr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIdArrAttr(AIdArrAttr node)
    {
        inAIdArrAttr(node);
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        outAIdArrAttr(node);
    }

    public void inAArrArrAttr(AArrArrAttr node)
    {
        defaultIn(node);
    }

    public void outAArrArrAttr(AArrArrAttr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAArrArrAttr(AArrArrAttr node)
    {
        inAArrArrAttr(node);
        if(node.getRBrkt() != null)
        {
            node.getRBrkt().apply(this);
        }
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        if(node.getLBrkt() != null)
        {
            node.getLBrkt().apply(this);
        }
        if(node.getArrAttr() != null)
        {
            node.getArrAttr().apply(this);
        }
        outAArrArrAttr(node);
    }

    public void inAArrayComp(AArrayComp node)
    {
        defaultIn(node);
    }

    public void outAArrayComp(AArrayComp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAArrayComp(AArrayComp node)
    {
        inAArrayComp(node);
        if(node.getRBrkt() != null)
        {
            node.getRBrkt().apply(this);
        }
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        if(node.getPipe() != null)
        {
            node.getPipe().apply(this);
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        if(node.getLBrkt() != null)
        {
            node.getLBrkt().apply(this);
        }
        outAArrayComp(node);
    }

    public void inAParametro(AParametro node)
    {
        defaultIn(node);
    }

    public void outAParametro(AParametro node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAParametro(AParametro node)
    {
        inAParametro(node);
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        if(node.getTipoParam() != null)
        {
            node.getTipoParam().apply(this);
        }
        outAParametro(node);
    }

    public void inAParam(AParam node)
    {
        defaultIn(node);
    }

    public void outAParam(AParam node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAParam(AParam node)
    {
        inAParam(node);
        {
            List<PPipeParam> copy = new ArrayList<PPipeParam>(node.getPipeParam());
            Collections.reverse(copy);
            for(PPipeParam e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getParametro() != null)
        {
            node.getParametro().apply(this);
        }
        outAParam(node);
    }

    public void inAPipeParam(APipeParam node)
    {
        defaultIn(node);
    }

    public void outAPipeParam(APipeParam node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPipeParam(APipeParam node)
    {
        inAPipeParam(node);
        if(node.getParametro() != null)
        {
            node.getParametro().apply(this);
        }
        if(node.getPipe() != null)
        {
            node.getPipe().apply(this);
        }
        outAPipeParam(node);
    }

    public void inAParTipoParam(AParTipoParam node)
    {
        defaultIn(node);
    }

    public void outAParTipoParam(AParTipoParam node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAParTipoParam(AParTipoParam node)
    {
        inAParTipoParam(node);
        if(node.getTipoKw() != null)
        {
            node.getTipoKw().apply(this);
        }
        outAParTipoParam(node);
    }

    public void inAArrParTipoParam(AArrParTipoParam node)
    {
        defaultIn(node);
    }

    public void outAArrParTipoParam(AArrParTipoParam node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAArrParTipoParam(AArrParTipoParam node)
    {
        inAArrParTipoParam(node);
        if(node.getRBrkt() != null)
        {
            node.getRBrkt().apply(this);
        }
        if(node.getLBrkt() != null)
        {
            node.getLBrkt().apply(this);
        }
        if(node.getTipoParam() != null)
        {
            node.getTipoParam().apply(this);
        }
        outAArrParTipoParam(node);
    }

    public void inASeComando(ASeComando node)
    {
        defaultIn(node);
    }

    public void outASeComando(ASeComando node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASeComando(ASeComando node)
    {
        inASeComando(node);
        if(node.getComando() != null)
        {
            node.getComando().apply(this);
        }
        if(node.getRPar() != null)
        {
            node.getRPar().apply(this);
        }
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        if(node.getLPar() != null)
        {
            node.getLPar().apply(this);
        }
        if(node.getSe() != null)
        {
            node.getSe().apply(this);
        }
        outASeComando(node);
    }

    public void inASeSenaoComando(ASeSenaoComando node)
    {
        defaultIn(node);
    }

    public void outASeSenaoComando(ASeSenaoComando node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASeSenaoComando(ASeSenaoComando node)
    {
        inASeSenaoComando(node);
        if(node.getComando() != null)
        {
            node.getComando().apply(this);
        }
        if(node.getSenao() != null)
        {
            node.getSenao().apply(this);
        }
        if(node.getComandoAux() != null)
        {
            node.getComandoAux().apply(this);
        }
        if(node.getRPar() != null)
        {
            node.getRPar().apply(this);
        }
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        if(node.getLPar() != null)
        {
            node.getLPar().apply(this);
        }
        if(node.getSe() != null)
        {
            node.getSe().apply(this);
        }
        outASeSenaoComando(node);
    }

    public void inAEnquantoComando(AEnquantoComando node)
    {
        defaultIn(node);
    }

    public void outAEnquantoComando(AEnquantoComando node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAEnquantoComando(AEnquantoComando node)
    {
        inAEnquantoComando(node);
        if(node.getComando() != null)
        {
            node.getComando().apply(this);
        }
        if(node.getRPar() != null)
        {
            node.getRPar().apply(this);
        }
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        if(node.getLPar() != null)
        {
            node.getLPar().apply(this);
        }
        if(node.getEnquanto() != null)
        {
            node.getEnquanto().apply(this);
        }
        outAEnquantoComando(node);
    }

    public void inAAttrComando(AAttrComando node)
    {
        defaultIn(node);
    }

    public void outAAttrComando(AAttrComando node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAttrComando(AAttrComando node)
    {
        inAAttrComando(node);
        if(node.getSemi() != null)
        {
            node.getSemi().apply(this);
        }
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        if(node.getDd() != null)
        {
            node.getDd().apply(this);
        }
        if(node.getArrAttr() != null)
        {
            node.getArrAttr().apply(this);
        }
        outAAttrComando(node);
    }

    public void inAProcComando(AProcComando node)
    {
        defaultIn(node);
    }

    public void outAProcComando(AProcComando node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAProcComando(AProcComando node)
    {
        inAProcComando(node);
        if(node.getSemi() != null)
        {
            node.getSemi().apply(this);
        }
        if(node.getChamadaProcedimento() != null)
        {
            node.getChamadaProcedimento().apply(this);
        }
        outAProcComando(node);
    }

    public void inABlocoComando(ABlocoComando node)
    {
        defaultIn(node);
    }

    public void outABlocoComando(ABlocoComando node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABlocoComando(ABlocoComando node)
    {
        inABlocoComando(node);
        if(node.getTermine() != null)
        {
            node.getTermine().apply(this);
        }
        {
            List<PComando> copy = new ArrayList<PComando>(node.getComando());
            Collections.reverse(copy);
            for(PComando e : copy)
            {
                e.apply(this);
            }
        }
        {
            List<PSubBloco> copy = new ArrayList<PSubBloco>(node.getSubBloco());
            Collections.reverse(copy);
            for(PSubBloco e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getComece() != null)
        {
            node.getComece().apply(this);
        }
        outABlocoComando(node);
    }

    public void inASeComandoAux(ASeComandoAux node)
    {
        defaultIn(node);
    }

    public void outASeComandoAux(ASeComandoAux node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASeComandoAux(ASeComandoAux node)
    {
        inASeComandoAux(node);
        if(node.getElse() != null)
        {
            node.getElse().apply(this);
        }
        if(node.getSenao() != null)
        {
            node.getSenao().apply(this);
        }
        if(node.getThen() != null)
        {
            node.getThen().apply(this);
        }
        if(node.getRPar() != null)
        {
            node.getRPar().apply(this);
        }
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        if(node.getLPar() != null)
        {
            node.getLPar().apply(this);
        }
        if(node.getSe() != null)
        {
            node.getSe().apply(this);
        }
        outASeComandoAux(node);
    }

    public void inAEnquantoComandoAux(AEnquantoComandoAux node)
    {
        defaultIn(node);
    }

    public void outAEnquantoComandoAux(AEnquantoComandoAux node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAEnquantoComandoAux(AEnquantoComandoAux node)
    {
        inAEnquantoComandoAux(node);
        if(node.getComandoAux() != null)
        {
            node.getComandoAux().apply(this);
        }
        if(node.getRPar() != null)
        {
            node.getRPar().apply(this);
        }
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        if(node.getLPar() != null)
        {
            node.getLPar().apply(this);
        }
        if(node.getEnquanto() != null)
        {
            node.getEnquanto().apply(this);
        }
        outAEnquantoComandoAux(node);
    }

    public void inAProcComandoAux(AProcComandoAux node)
    {
        defaultIn(node);
    }

    public void outAProcComandoAux(AProcComandoAux node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAProcComandoAux(AProcComandoAux node)
    {
        inAProcComandoAux(node);
        if(node.getSemi() != null)
        {
            node.getSemi().apply(this);
        }
        if(node.getChamadaProcedimento() != null)
        {
            node.getChamadaProcedimento().apply(this);
        }
        outAProcComandoAux(node);
    }

    public void inAAttrComandoAux(AAttrComandoAux node)
    {
        defaultIn(node);
    }

    public void outAAttrComandoAux(AAttrComandoAux node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAttrComandoAux(AAttrComandoAux node)
    {
        inAAttrComandoAux(node);
        if(node.getSemi() != null)
        {
            node.getSemi().apply(this);
        }
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        if(node.getDd() != null)
        {
            node.getDd().apply(this);
        }
        if(node.getArrAttr() != null)
        {
            node.getArrAttr().apply(this);
        }
        outAAttrComandoAux(node);
    }

    public void inABlocoComandoAux(ABlocoComandoAux node)
    {
        defaultIn(node);
    }

    public void outABlocoComandoAux(ABlocoComandoAux node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABlocoComandoAux(ABlocoComandoAux node)
    {
        inABlocoComandoAux(node);
        if(node.getTermine() != null)
        {
            node.getTermine().apply(this);
        }
        {
            List<PComando> copy = new ArrayList<PComando>(node.getComando());
            Collections.reverse(copy);
            for(PComando e : copy)
            {
                e.apply(this);
            }
        }
        {
            List<PSubBloco> copy = new ArrayList<PSubBloco>(node.getSubBloco());
            Collections.reverse(copy);
            for(PSubBloco e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getComece() != null)
        {
            node.getComece().apply(this);
        }
        outABlocoComandoAux(node);
    }

    public void inAVarSubBloco(AVarSubBloco node)
    {
        defaultIn(node);
    }

    public void outAVarSubBloco(AVarSubBloco node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVarSubBloco(AVarSubBloco node)
    {
        inAVarSubBloco(node);
        if(node.getDecVar() != null)
        {
            node.getDecVar().apply(this);
        }
        outAVarSubBloco(node);
    }

    public void inAConstSubBloco(AConstSubBloco node)
    {
        defaultIn(node);
    }

    public void outAConstSubBloco(AConstSubBloco node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAConstSubBloco(AConstSubBloco node)
    {
        inAConstSubBloco(node);
        if(node.getDecConst() != null)
        {
            node.getDecConst().apply(this);
        }
        outAConstSubBloco(node);
    }

    public void inAIdValor(AIdValor node)
    {
        defaultIn(node);
    }

    public void outAIdValor(AIdValor node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIdValor(AIdValor node)
    {
        inAIdValor(node);
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        outAIdValor(node);
    }

    public void inAExpValor(AExpValor node)
    {
        defaultIn(node);
    }

    public void outAExpValor(AExpValor node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExpValor(AExpValor node)
    {
        inAExpValor(node);
        if(node.getRBrkt() != null)
        {
            node.getRBrkt().apply(this);
        }
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        if(node.getLBrkt() != null)
        {
            node.getLBrkt().apply(this);
        }
        if(node.getValor() != null)
        {
            node.getValor().apply(this);
        }
        outAExpValor(node);
    }

    public void inASeExp(ASeExp node)
    {
        defaultIn(node);
    }

    public void outASeExp(ASeExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASeExp(ASeExp node)
    {
        inASeExp(node);
        if(node.getCondicao() != null)
        {
            node.getCondicao().apply(this);
        }
        outASeExp(node);
    }

    public void inAExpList(AExpList node)
    {
        defaultIn(node);
    }

    public void outAExpList(AExpList node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExpList(AExpList node)
    {
        inAExpList(node);
        {
            List<PPipeExp> copy = new ArrayList<PPipeExp>(node.getPipeExp());
            Collections.reverse(copy);
            for(PPipeExp e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        outAExpList(node);
    }

    public void inAPipeExpPipeExp(APipeExpPipeExp node)
    {
        defaultIn(node);
    }

    public void outAPipeExpPipeExp(APipeExpPipeExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPipeExpPipeExp(APipeExpPipeExp node)
    {
        inAPipeExpPipeExp(node);
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        if(node.getPipe() != null)
        {
            node.getPipe().apply(this);
        }
        outAPipeExpPipeExp(node);
    }

    public void inABlocoExpressoes(ABlocoExpressoes node)
    {
        defaultIn(node);
    }

    public void outABlocoExpressoes(ABlocoExpressoes node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABlocoExpressoes(ABlocoExpressoes node)
    {
        inABlocoExpressoes(node);
        if(node.getTermine() != null)
        {
            node.getTermine().apply(this);
        }
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        {
            List<PDecConst> copy = new ArrayList<PDecConst>(node.getDecConst());
            Collections.reverse(copy);
            for(PDecConst e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getComece() != null)
        {
            node.getComece().apply(this);
        }
        outABlocoExpressoes(node);
    }

    public void inADisjCondicao(ADisjCondicao node)
    {
        defaultIn(node);
    }

    public void outADisjCondicao(ADisjCondicao node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADisjCondicao(ADisjCondicao node)
    {
        inADisjCondicao(node);
        if(node.getDisjuncao() != null)
        {
            node.getDisjuncao().apply(this);
        }
        outADisjCondicao(node);
    }

    public void inASeExpCondicao(ASeExpCondicao node)
    {
        defaultIn(node);
    }

    public void outASeExpCondicao(ASeExpCondicao node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASeExpCondicao(ASeExpCondicao node)
    {
        inASeExpCondicao(node);
        if(node.getDisjuncao() != null)
        {
            node.getDisjuncao().apply(this);
        }
        if(node.getSenao() != null)
        {
            node.getSenao().apply(this);
        }
        if(node.getThen() != null)
        {
            node.getThen().apply(this);
        }
        if(node.getRPar() != null)
        {
            node.getRPar().apply(this);
        }
        if(node.getIf() != null)
        {
            node.getIf().apply(this);
        }
        if(node.getLPar() != null)
        {
            node.getLPar().apply(this);
        }
        if(node.getSe() != null)
        {
            node.getSe().apply(this);
        }
        outASeExpCondicao(node);
    }

    public void inAConjDisjuncao(AConjDisjuncao node)
    {
        defaultIn(node);
    }

    public void outAConjDisjuncao(AConjDisjuncao node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAConjDisjuncao(AConjDisjuncao node)
    {
        inAConjDisjuncao(node);
        if(node.getConjuncao() != null)
        {
            node.getConjuncao().apply(this);
        }
        outAConjDisjuncao(node);
    }

    public void inAOuDisjuncao(AOuDisjuncao node)
    {
        defaultIn(node);
    }

    public void outAOuDisjuncao(AOuDisjuncao node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAOuDisjuncao(AOuDisjuncao node)
    {
        inAOuDisjuncao(node);
        if(node.getConjuncao() != null)
        {
            node.getConjuncao().apply(this);
        }
        if(node.getOu() != null)
        {
            node.getOu().apply(this);
        }
        if(node.getDisjuncao() != null)
        {
            node.getDisjuncao().apply(this);
        }
        outAOuDisjuncao(node);
    }

    public void inARelConjuncao(ARelConjuncao node)
    {
        defaultIn(node);
    }

    public void outARelConjuncao(ARelConjuncao node)
    {
        defaultOut(node);
    }

    @Override
    public void caseARelConjuncao(ARelConjuncao node)
    {
        inARelConjuncao(node);
        if(node.getRelacao() != null)
        {
            node.getRelacao().apply(this);
        }
        outARelConjuncao(node);
    }

    public void inAEConjuncao(AEConjuncao node)
    {
        defaultIn(node);
    }

    public void outAEConjuncao(AEConjuncao node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAEConjuncao(AEConjuncao node)
    {
        inAEConjuncao(node);
        if(node.getRelacao() != null)
        {
            node.getRelacao().apply(this);
        }
        if(node.getE() != null)
        {
            node.getE().apply(this);
        }
        if(node.getConjuncao() != null)
        {
            node.getConjuncao().apply(this);
        }
        outAEConjuncao(node);
    }

    public void inAAdicaoRelacao(AAdicaoRelacao node)
    {
        defaultIn(node);
    }

    public void outAAdicaoRelacao(AAdicaoRelacao node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAdicaoRelacao(AAdicaoRelacao node)
    {
        inAAdicaoRelacao(node);
        if(node.getAdicao() != null)
        {
            node.getAdicao().apply(this);
        }
        outAAdicaoRelacao(node);
    }

    public void inAEqualRelacao(AEqualRelacao node)
    {
        defaultIn(node);
    }

    public void outAEqualRelacao(AEqualRelacao node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAEqualRelacao(AEqualRelacao node)
    {
        inAEqualRelacao(node);
        if(node.getAdicao() != null)
        {
            node.getAdicao().apply(this);
        }
        if(node.getEqual() != null)
        {
            node.getEqual().apply(this);
        }
        if(node.getRelacao() != null)
        {
            node.getRelacao().apply(this);
        }
        outAEqualRelacao(node);
    }

    public void inAGreaterEqRelacao(AGreaterEqRelacao node)
    {
        defaultIn(node);
    }

    public void outAGreaterEqRelacao(AGreaterEqRelacao node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAGreaterEqRelacao(AGreaterEqRelacao node)
    {
        inAGreaterEqRelacao(node);
        if(node.getAdicao() != null)
        {
            node.getAdicao().apply(this);
        }
        if(node.getGreaterEq() != null)
        {
            node.getGreaterEq().apply(this);
        }
        if(node.getRelacao() != null)
        {
            node.getRelacao().apply(this);
        }
        outAGreaterEqRelacao(node);
    }

    public void inAGreaterRelacao(AGreaterRelacao node)
    {
        defaultIn(node);
    }

    public void outAGreaterRelacao(AGreaterRelacao node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAGreaterRelacao(AGreaterRelacao node)
    {
        inAGreaterRelacao(node);
        if(node.getAdicao() != null)
        {
            node.getAdicao().apply(this);
        }
        if(node.getGreater() != null)
        {
            node.getGreater().apply(this);
        }
        if(node.getRelacao() != null)
        {
            node.getRelacao().apply(this);
        }
        outAGreaterRelacao(node);
    }

    public void inAProdutoAdicao(AProdutoAdicao node)
    {
        defaultIn(node);
    }

    public void outAProdutoAdicao(AProdutoAdicao node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAProdutoAdicao(AProdutoAdicao node)
    {
        inAProdutoAdicao(node);
        if(node.getProduto() != null)
        {
            node.getProduto().apply(this);
        }
        outAProdutoAdicao(node);
    }

    public void inASomaAdicao(ASomaAdicao node)
    {
        defaultIn(node);
    }

    public void outASomaAdicao(ASomaAdicao node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASomaAdicao(ASomaAdicao node)
    {
        inASomaAdicao(node);
        if(node.getProduto() != null)
        {
            node.getProduto().apply(this);
        }
        if(node.getPlus() != null)
        {
            node.getPlus().apply(this);
        }
        if(node.getAdicao() != null)
        {
            node.getAdicao().apply(this);
        }
        outASomaAdicao(node);
    }

    public void inAMinusAdicao(AMinusAdicao node)
    {
        defaultIn(node);
    }

    public void outAMinusAdicao(AMinusAdicao node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMinusAdicao(AMinusAdicao node)
    {
        inAMinusAdicao(node);
        if(node.getProduto() != null)
        {
            node.getProduto().apply(this);
        }
        if(node.getMinus() != null)
        {
            node.getMinus().apply(this);
        }
        if(node.getAdicao() != null)
        {
            node.getAdicao().apply(this);
        }
        outAMinusAdicao(node);
    }

    public void inARelUnariaProduto(ARelUnariaProduto node)
    {
        defaultIn(node);
    }

    public void outARelUnariaProduto(ARelUnariaProduto node)
    {
        defaultOut(node);
    }

    @Override
    public void caseARelUnariaProduto(ARelUnariaProduto node)
    {
        inARelUnariaProduto(node);
        if(node.getRelUnaria() != null)
        {
            node.getRelUnaria().apply(this);
        }
        outARelUnariaProduto(node);
    }

    public void inAMultProduto(AMultProduto node)
    {
        defaultIn(node);
    }

    public void outAMultProduto(AMultProduto node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMultProduto(AMultProduto node)
    {
        inAMultProduto(node);
        if(node.getRelUnaria() != null)
        {
            node.getRelUnaria().apply(this);
        }
        if(node.getStar() != null)
        {
            node.getStar().apply(this);
        }
        if(node.getProduto() != null)
        {
            node.getProduto().apply(this);
        }
        outAMultProduto(node);
    }

    public void inADivProduto(ADivProduto node)
    {
        defaultIn(node);
    }

    public void outADivProduto(ADivProduto node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADivProduto(ADivProduto node)
    {
        inADivProduto(node);
        if(node.getRelUnaria() != null)
        {
            node.getRelUnaria().apply(this);
        }
        if(node.getDiv() != null)
        {
            node.getDiv().apply(this);
        }
        if(node.getProduto() != null)
        {
            node.getProduto().apply(this);
        }
        outADivProduto(node);
    }

    public void inAModProduto(AModProduto node)
    {
        defaultIn(node);
    }

    public void outAModProduto(AModProduto node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAModProduto(AModProduto node)
    {
        inAModProduto(node);
        if(node.getRelUnaria() != null)
        {
            node.getRelUnaria().apply(this);
        }
        if(node.getMod() != null)
        {
            node.getMod().apply(this);
        }
        if(node.getProduto() != null)
        {
            node.getProduto().apply(this);
        }
        outAModProduto(node);
    }

    public void inAAuxRelUnaria(AAuxRelUnaria node)
    {
        defaultIn(node);
    }

    public void outAAuxRelUnaria(AAuxRelUnaria node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAuxRelUnaria(AAuxRelUnaria node)
    {
        inAAuxRelUnaria(node);
        if(node.getExpAux() != null)
        {
            node.getExpAux().apply(this);
        }
        outAAuxRelUnaria(node);
    }

    public void inAMaisRelUnaria(AMaisRelUnaria node)
    {
        defaultIn(node);
    }

    public void outAMaisRelUnaria(AMaisRelUnaria node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMaisRelUnaria(AMaisRelUnaria node)
    {
        inAMaisRelUnaria(node);
        if(node.getExpAux() != null)
        {
            node.getExpAux().apply(this);
        }
        if(node.getPlus() != null)
        {
            node.getPlus().apply(this);
        }
        outAMaisRelUnaria(node);
    }

    public void inAMenosRelUnaria(AMenosRelUnaria node)
    {
        defaultIn(node);
    }

    public void outAMenosRelUnaria(AMenosRelUnaria node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMenosRelUnaria(AMenosRelUnaria node)
    {
        inAMenosRelUnaria(node);
        if(node.getExpAux() != null)
        {
            node.getExpAux().apply(this);
        }
        if(node.getMinus() != null)
        {
            node.getMinus().apply(this);
        }
        outAMenosRelUnaria(node);
    }

    public void inANegaRelUnaria(ANegaRelUnaria node)
    {
        defaultIn(node);
    }

    public void outANegaRelUnaria(ANegaRelUnaria node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANegaRelUnaria(ANegaRelUnaria node)
    {
        inANegaRelUnaria(node);
        if(node.getExpAux() != null)
        {
            node.getExpAux().apply(this);
        }
        if(node.getNegacao() != null)
        {
            node.getNegacao().apply(this);
        }
        outANegaRelUnaria(node);
    }

    public void inAIntExpAux(AIntExpAux node)
    {
        defaultIn(node);
    }

    public void outAIntExpAux(AIntExpAux node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIntExpAux(AIntExpAux node)
    {
        inAIntExpAux(node);
        if(node.getInt() != null)
        {
            node.getInt().apply(this);
        }
        outAIntExpAux(node);
    }

    public void inABoolExpAux(ABoolExpAux node)
    {
        defaultIn(node);
    }

    public void outABoolExpAux(ABoolExpAux node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABoolExpAux(ABoolExpAux node)
    {
        inABoolExpAux(node);
        if(node.getBool() != null)
        {
            node.getBool().apply(this);
        }
        outABoolExpAux(node);
    }

    public void inARealExpAux(ARealExpAux node)
    {
        defaultIn(node);
    }

    public void outARealExpAux(ARealExpAux node)
    {
        defaultOut(node);
    }

    @Override
    public void caseARealExpAux(ARealExpAux node)
    {
        inARealExpAux(node);
        if(node.getFloat() != null)
        {
            node.getFloat().apply(this);
        }
        outARealExpAux(node);
    }

    public void inACadeiaExpAux(ACadeiaExpAux node)
    {
        defaultIn(node);
    }

    public void outACadeiaExpAux(ACadeiaExpAux node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACadeiaExpAux(ACadeiaExpAux node)
    {
        inACadeiaExpAux(node);
        if(node.getString() != null)
        {
            node.getString().apply(this);
        }
        outACadeiaExpAux(node);
    }

    public void inAValorExpAux(AValorExpAux node)
    {
        defaultIn(node);
    }

    public void outAValorExpAux(AValorExpAux node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAValorExpAux(AValorExpAux node)
    {
        inAValorExpAux(node);
        if(node.getValor() != null)
        {
            node.getValor().apply(this);
        }
        outAValorExpAux(node);
    }

    public void inAParExpAux(AParExpAux node)
    {
        defaultIn(node);
    }

    public void outAParExpAux(AParExpAux node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAParExpAux(AParExpAux node)
    {
        inAParExpAux(node);
        if(node.getRPar() != null)
        {
            node.getRPar().apply(this);
        }
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        if(node.getLPar() != null)
        {
            node.getLPar().apply(this);
        }
        outAParExpAux(node);
    }

    public void inACFuncExpAux(ACFuncExpAux node)
    {
        defaultIn(node);
    }

    public void outACFuncExpAux(ACFuncExpAux node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACFuncExpAux(ACFuncExpAux node)
    {
        inACFuncExpAux(node);
        if(node.getChamadaFuncao() != null)
        {
            node.getChamadaFuncao().apply(this);
        }
        outACFuncExpAux(node);
    }

    public void inAArrayCExpAux(AArrayCExpAux node)
    {
        defaultIn(node);
    }

    public void outAArrayCExpAux(AArrayCExpAux node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAArrayCExpAux(AArrayCExpAux node)
    {
        inAArrayCExpAux(node);
        if(node.getArrayComp() != null)
        {
            node.getArrayComp().apply(this);
        }
        outAArrayCExpAux(node);
    }

    public void inABExpExpAux(ABExpExpAux node)
    {
        defaultIn(node);
    }

    public void outABExpExpAux(ABExpExpAux node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABExpExpAux(ABExpExpAux node)
    {
        inABExpExpAux(node);
        if(node.getBlocoExpressoes() != null)
        {
            node.getBlocoExpressoes().apply(this);
        }
        outABExpExpAux(node);
    }
}
