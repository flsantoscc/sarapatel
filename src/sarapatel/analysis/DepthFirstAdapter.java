/* This file was generated by SableCC (http://www.sablecc.org/). */

package sarapatel.analysis;

import java.util.*;
import sarapatel.node.*;

public class DepthFirstAdapter extends AnalysisAdapter
{
    public void inStart(Start node)
    {
        defaultIn(node);
    }

    public void outStart(Start node)
    {
        defaultOut(node);
    }

    public void defaultIn(@SuppressWarnings("unused") Node node)
    {
        // Do nothing
    }

    public void defaultOut(@SuppressWarnings("unused") Node node)
    {
        // Do nothing
    }

    @Override
    public void caseStart(Start node)
    {
        inStart(node);
        node.getPTypeSpecifier().apply(this);
        node.getEOF().apply(this);
        outStart(node);
    }

    public void inABooleanTypeSpecifier(ABooleanTypeSpecifier node)
    {
        defaultIn(node);
    }

    public void outABooleanTypeSpecifier(ABooleanTypeSpecifier node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABooleanTypeSpecifier(ABooleanTypeSpecifier node)
    {
        inABooleanTypeSpecifier(node);
        if(node.getBooleanSpecifier() != null)
        {
            node.getBooleanSpecifier().apply(this);
        }
        outABooleanTypeSpecifier(node);
    }

    public void inAIntegerTypeSpecifier(AIntegerTypeSpecifier node)
    {
        defaultIn(node);
    }

    public void outAIntegerTypeSpecifier(AIntegerTypeSpecifier node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIntegerTypeSpecifier(AIntegerTypeSpecifier node)
    {
        inAIntegerTypeSpecifier(node);
        if(node.getIntegerSpecifier() != null)
        {
            node.getIntegerSpecifier().apply(this);
        }
        outAIntegerTypeSpecifier(node);
    }

    public void inAFloatTypeSpecifier(AFloatTypeSpecifier node)
    {
        defaultIn(node);
    }

    public void outAFloatTypeSpecifier(AFloatTypeSpecifier node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFloatTypeSpecifier(AFloatTypeSpecifier node)
    {
        inAFloatTypeSpecifier(node);
        if(node.getFloatSpecifier() != null)
        {
            node.getFloatSpecifier().apply(this);
        }
        outAFloatTypeSpecifier(node);
    }

    public void inAStringTypeSpecifier(AStringTypeSpecifier node)
    {
        defaultIn(node);
    }

    public void outAStringTypeSpecifier(AStringTypeSpecifier node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAStringTypeSpecifier(AStringTypeSpecifier node)
    {
        inAStringTypeSpecifier(node);
        if(node.getStringSpecifier() != null)
        {
            node.getStringSpecifier().apply(this);
        }
        outAStringTypeSpecifier(node);
    }

    public void inAIntegerSpecifier(AIntegerSpecifier node)
    {
        defaultIn(node);
    }

    public void outAIntegerSpecifier(AIntegerSpecifier node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIntegerSpecifier(AIntegerSpecifier node)
    {
        inAIntegerSpecifier(node);
        if(node.getTInteiro() != null)
        {
            node.getTInteiro().apply(this);
        }
        outAIntegerSpecifier(node);
    }

    public void inABooleanSpecifier(ABooleanSpecifier node)
    {
        defaultIn(node);
    }

    public void outABooleanSpecifier(ABooleanSpecifier node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABooleanSpecifier(ABooleanSpecifier node)
    {
        inABooleanSpecifier(node);
        if(node.getTBooleano() != null)
        {
            node.getTBooleano().apply(this);
        }
        outABooleanSpecifier(node);
    }

    public void inAStringSpecifier(AStringSpecifier node)
    {
        defaultIn(node);
    }

    public void outAStringSpecifier(AStringSpecifier node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAStringSpecifier(AStringSpecifier node)
    {
        inAStringSpecifier(node);
        if(node.getTCadeia() != null)
        {
            node.getTCadeia().apply(this);
        }
        outAStringSpecifier(node);
    }

    public void inAFloatSpecifier(AFloatSpecifier node)
    {
        defaultIn(node);
    }

    public void outAFloatSpecifier(AFloatSpecifier node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFloatSpecifier(AFloatSpecifier node)
    {
        inAFloatSpecifier(node);
        if(node.getTReal() != null)
        {
            node.getTReal().apply(this);
        }
        outAFloatSpecifier(node);
    }

    public void inAIdentifierArrayDeclarator(AIdentifierArrayDeclarator node)
    {
        defaultIn(node);
    }

    public void outAIdentifierArrayDeclarator(AIdentifierArrayDeclarator node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIdentifierArrayDeclarator(AIdentifierArrayDeclarator node)
    {
        inAIdentifierArrayDeclarator(node);
        if(node.getLBracket() != null)
        {
            node.getLBracket().apply(this);
        }
        if(node.getIntegerConstant() != null)
        {
            node.getIntegerConstant().apply(this);
        }
        if(node.getRBracket() != null)
        {
            node.getRBracket().apply(this);
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        outAIdentifierArrayDeclarator(node);
    }

    public void inAArrayArrayDeclarator(AArrayArrayDeclarator node)
    {
        defaultIn(node);
    }

    public void outAArrayArrayDeclarator(AArrayArrayDeclarator node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAArrayArrayDeclarator(AArrayArrayDeclarator node)
    {
        inAArrayArrayDeclarator(node);
        if(node.getArrayDeclarator() != null)
        {
            node.getArrayDeclarator().apply(this);
        }
        if(node.getLBracket() != null)
        {
            node.getLBracket().apply(this);
        }
        if(node.getIntegerConstant() != null)
        {
            node.getIntegerConstant().apply(this);
        }
        if(node.getRBracket() != null)
        {
            node.getRBracket().apply(this);
        }
        outAArrayArrayDeclarator(node);
    }

    public void inAArrayDeclaration(AArrayDeclaration node)
    {
        defaultIn(node);
    }

    public void outAArrayDeclaration(AArrayDeclaration node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAArrayDeclaration(AArrayDeclaration node)
    {
        inAArrayDeclaration(node);
        if(node.getVar() != null)
        {
            node.getVar().apply(this);
        }
        if(node.getColon() != null)
        {
            node.getColon().apply(this);
        }
        if(node.getTypeSpecifier() != null)
        {
            node.getTypeSpecifier().apply(this);
        }
        if(node.getArrayDeclarator() != null)
        {
            node.getArrayDeclarator().apply(this);
        }
        if(node.getSemicolon() != null)
        {
            node.getSemicolon().apply(this);
        }
        outAArrayDeclaration(node);
    }
}
