/* This file was generated by SableCC (http://www.sablecc.org/). */

package sarapatel.analysis;

import java.util.*;
import sarapatel.node.*;

public class DepthFirstAdapter extends AnalysisAdapter
{
    public void inStart(Start node)
    {
        defaultIn(node);
    }

    public void outStart(Start node)
    {
        defaultOut(node);
    }

    public void defaultIn(@SuppressWarnings("unused") Node node)
    {
        // Do nothing
    }

    public void defaultOut(@SuppressWarnings("unused") Node node)
    {
        // Do nothing
    }

    @Override
    public void caseStart(Start node)
    {
        inStart(node);
        node.getPPrograma().apply(this);
        node.getEOF().apply(this);
        outStart(node);
    }

    public void inAProgramaPrograma(AProgramaPrograma node)
    {
        defaultIn(node);
    }

    public void outAProgramaPrograma(AProgramaPrograma node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAProgramaPrograma(AProgramaPrograma node)
    {
        inAProgramaPrograma(node);
        {
            List<PDecVarOrConst> copy = new ArrayList<PDecVarOrConst>(node.getDecVarOrConst());
            for(PDecVarOrConst e : copy)
            {
                e.apply(this);
            }
        }
        {
            List<PDecProcOrFuncao> copy = new ArrayList<PDecProcOrFuncao>(node.getDecProcOrFuncao());
            for(PDecProcOrFuncao e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getDecProcPrincipal() != null)
        {
            node.getDecProcPrincipal().apply(this);
        }
        outAProgramaPrograma(node);
    }

    public void inADecProcedimentoDecProcPrincipal(ADecProcedimentoDecProcPrincipal node)
    {
        defaultIn(node);
    }

    public void outADecProcedimentoDecProcPrincipal(ADecProcedimentoDecProcPrincipal node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADecProcedimentoDecProcPrincipal(ADecProcedimentoDecProcPrincipal node)
    {
        inADecProcedimentoDecProcPrincipal(node);
        if(node.getAttr() != null)
        {
            node.getAttr().apply(this);
        }
        if(node.getProcedimento() != null)
        {
            node.getProcedimento().apply(this);
        }
        if(node.getColon() != null)
        {
            node.getColon().apply(this);
        }
        if(node.getPrincipal() != null)
        {
            node.getPrincipal().apply(this);
        }
        if(node.getLPar() != null)
        {
            node.getLPar().apply(this);
        }
        if(node.getParametros() != null)
        {
            node.getParametros().apply(this);
        }
        if(node.getRPar() != null)
        {
            node.getRPar().apply(this);
        }
        if(node.getComece() != null)
        {
            node.getComece().apply(this);
        }
        if(node.getComando() != null)
        {
            node.getComando().apply(this);
        }
        if(node.getTermine() != null)
        {
            node.getTermine().apply(this);
        }
        outADecProcedimentoDecProcPrincipal(node);
    }

    public void inADecVarDecVarOrConst(ADecVarDecVarOrConst node)
    {
        defaultIn(node);
    }

    public void outADecVarDecVarOrConst(ADecVarDecVarOrConst node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADecVarDecVarOrConst(ADecVarDecVarOrConst node)
    {
        inADecVarDecVarOrConst(node);
        if(node.getDecVar() != null)
        {
            node.getDecVar().apply(this);
        }
        outADecVarDecVarOrConst(node);
    }

    public void inADecConstDecVarOrConst(ADecConstDecVarOrConst node)
    {
        defaultIn(node);
    }

    public void outADecConstDecVarOrConst(ADecConstDecVarOrConst node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADecConstDecVarOrConst(ADecConstDecVarOrConst node)
    {
        inADecConstDecVarOrConst(node);
        if(node.getDecCons() != null)
        {
            node.getDecCons().apply(this);
        }
        outADecConstDecVarOrConst(node);
    }

    public void inADecProcDecProcOrFuncao(ADecProcDecProcOrFuncao node)
    {
        defaultIn(node);
    }

    public void outADecProcDecProcOrFuncao(ADecProcDecProcOrFuncao node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADecProcDecProcOrFuncao(ADecProcDecProcOrFuncao node)
    {
        inADecProcDecProcOrFuncao(node);
        if(node.getDecProcedimento() != null)
        {
            node.getDecProcedimento().apply(this);
        }
        outADecProcDecProcOrFuncao(node);
    }

    public void inADecFuncaoDecProcOrFuncao(ADecFuncaoDecProcOrFuncao node)
    {
        defaultIn(node);
    }

    public void outADecFuncaoDecProcOrFuncao(ADecFuncaoDecProcOrFuncao node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADecFuncaoDecProcOrFuncao(ADecFuncaoDecProcOrFuncao node)
    {
        inADecFuncaoDecProcOrFuncao(node);
        if(node.getDecFuncao() != null)
        {
            node.getDecFuncao().apply(this);
        }
        outADecFuncaoDecProcOrFuncao(node);
    }

    public void inADecVarDecVar(ADecVarDecVar node)
    {
        defaultIn(node);
    }

    public void outADecVarDecVar(ADecVarDecVar node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADecVarDecVar(ADecVarDecVar node)
    {
        inADecVarDecVar(node);
        if(node.getVar() != null)
        {
            node.getVar().apply(this);
        }
        if(node.getColon() != null)
        {
            node.getColon().apply(this);
        }
        if(node.getTipo() != null)
        {
            node.getTipo().apply(this);
        }
        if(node.getIdOrIdAtribuicao() != null)
        {
            node.getIdOrIdAtribuicao().apply(this);
        }
        if(node.getSemicolon() != null)
        {
            node.getSemicolon().apply(this);
        }
        outADecVarDecVar(node);
    }

    public void inADecConsDecCons(ADecConsDecCons node)
    {
        defaultIn(node);
    }

    public void outADecConsDecCons(ADecConsDecCons node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADecConsDecCons(ADecConsDecCons node)
    {
        inADecConsDecCons(node);
        if(node.getConst() != null)
        {
            node.getConst().apply(this);
        }
        if(node.getColon() != null)
        {
            node.getColon().apply(this);
        }
        if(node.getTipo() != null)
        {
            node.getTipo().apply(this);
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        if(node.getAttr() != null)
        {
            node.getAttr().apply(this);
        }
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        if(node.getSemicolon() != null)
        {
            node.getSemicolon().apply(this);
        }
        outADecConsDecCons(node);
    }

    public void inAIdIdOrIdAtribuicao(AIdIdOrIdAtribuicao node)
    {
        defaultIn(node);
    }

    public void outAIdIdOrIdAtribuicao(AIdIdOrIdAtribuicao node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIdIdOrIdAtribuicao(AIdIdOrIdAtribuicao node)
    {
        inAIdIdOrIdAtribuicao(node);
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        outAIdIdOrIdAtribuicao(node);
    }

    public void inAIdAtribuicaoIdOrIdAtribuicao(AIdAtribuicaoIdOrIdAtribuicao node)
    {
        defaultIn(node);
    }

    public void outAIdAtribuicaoIdOrIdAtribuicao(AIdAtribuicaoIdOrIdAtribuicao node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIdAtribuicaoIdOrIdAtribuicao(AIdAtribuicaoIdOrIdAtribuicao node)
    {
        inAIdAtribuicaoIdOrIdAtribuicao(node);
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        if(node.getAttr() != null)
        {
            node.getAttr().apply(this);
        }
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        outAIdAtribuicaoIdOrIdAtribuicao(node);
    }

    public void inATipoBaseTipo(ATipoBaseTipo node)
    {
        defaultIn(node);
    }

    public void outATipoBaseTipo(ATipoBaseTipo node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATipoBaseTipo(ATipoBaseTipo node)
    {
        inATipoBaseTipo(node);
        if(node.getTipoBase() != null)
        {
            node.getTipoBase().apply(this);
        }
        outATipoBaseTipo(node);
    }

    public void inATipoBrktTipo(ATipoBrktTipo node)
    {
        defaultIn(node);
    }

    public void outATipoBrktTipo(ATipoBrktTipo node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATipoBrktTipo(ATipoBrktTipo node)
    {
        inATipoBrktTipo(node);
        if(node.getTipo() != null)
        {
            node.getTipo().apply(this);
        }
        if(node.getLBracket() != null)
        {
            node.getLBracket().apply(this);
        }
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        if(node.getRBracket() != null)
        {
            node.getRBracket().apply(this);
        }
        outATipoBrktTipo(node);
    }

    public void inAInteiroTipoBase(AInteiroTipoBase node)
    {
        defaultIn(node);
    }

    public void outAInteiroTipoBase(AInteiroTipoBase node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAInteiroTipoBase(AInteiroTipoBase node)
    {
        inAInteiroTipoBase(node);
        if(node.getTInteiro() != null)
        {
            node.getTInteiro().apply(this);
        }
        outAInteiroTipoBase(node);
    }

    public void inABooleanoTipoBase(ABooleanoTipoBase node)
    {
        defaultIn(node);
    }

    public void outABooleanoTipoBase(ABooleanoTipoBase node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABooleanoTipoBase(ABooleanoTipoBase node)
    {
        inABooleanoTipoBase(node);
        if(node.getTBooleano() != null)
        {
            node.getTBooleano().apply(this);
        }
        outABooleanoTipoBase(node);
    }

    public void inARealTipoBase(ARealTipoBase node)
    {
        defaultIn(node);
    }

    public void outARealTipoBase(ARealTipoBase node)
    {
        defaultOut(node);
    }

    @Override
    public void caseARealTipoBase(ARealTipoBase node)
    {
        inARealTipoBase(node);
        if(node.getTReal() != null)
        {
            node.getTReal().apply(this);
        }
        outARealTipoBase(node);
    }

    public void inACadeiaTipoBase(ACadeiaTipoBase node)
    {
        defaultIn(node);
    }

    public void outACadeiaTipoBase(ACadeiaTipoBase node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACadeiaTipoBase(ACadeiaTipoBase node)
    {
        inACadeiaTipoBase(node);
        if(node.getTCadeia() != null)
        {
            node.getTCadeia().apply(this);
        }
        outACadeiaTipoBase(node);
    }

    public void inAArrayCompArrayComp(AArrayCompArrayComp node)
    {
        defaultIn(node);
    }

    public void outAArrayCompArrayComp(AArrayCompArrayComp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAArrayCompArrayComp(AArrayCompArrayComp node)
    {
        inAArrayCompArrayComp(node);
        if(node.getLBracket() != null)
        {
            node.getLBracket().apply(this);
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        if(node.getPipe() != null)
        {
            node.getPipe().apply(this);
        }
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        if(node.getRBracket() != null)
        {
            node.getRBracket().apply(this);
        }
        outAArrayCompArrayComp(node);
    }

    public void inADecProcedimentoDecProcedimento(ADecProcedimentoDecProcedimento node)
    {
        defaultIn(node);
    }

    public void outADecProcedimentoDecProcedimento(ADecProcedimentoDecProcedimento node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADecProcedimentoDecProcedimento(ADecProcedimentoDecProcedimento node)
    {
        inADecProcedimentoDecProcedimento(node);
        if(node.getAttr() != null)
        {
            node.getAttr().apply(this);
        }
        if(node.getProcedimento() != null)
        {
            node.getProcedimento().apply(this);
        }
        if(node.getColon() != null)
        {
            node.getColon().apply(this);
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        if(node.getLPar() != null)
        {
            node.getLPar().apply(this);
        }
        if(node.getParametros() != null)
        {
            node.getParametros().apply(this);
        }
        if(node.getRPar() != null)
        {
            node.getRPar().apply(this);
        }
        if(node.getComece() != null)
        {
            node.getComece().apply(this);
        }
        if(node.getComando() != null)
        {
            node.getComando().apply(this);
        }
        if(node.getTermine() != null)
        {
            node.getTermine().apply(this);
        }
        outADecProcedimentoDecProcedimento(node);
    }

    public void inADecFuncaoDecFuncao(ADecFuncaoDecFuncao node)
    {
        defaultIn(node);
    }

    public void outADecFuncaoDecFuncao(ADecFuncaoDecFuncao node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADecFuncaoDecFuncao(ADecFuncaoDecFuncao node)
    {
        inADecFuncaoDecFuncao(node);
        if(node.getFuncao() != null)
        {
            node.getFuncao().apply(this);
        }
        if(node.getColon() != null)
        {
            node.getColon().apply(this);
        }
        if(node.getTipo() != null)
        {
            node.getTipo().apply(this);
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        if(node.getLPar() != null)
        {
            node.getLPar().apply(this);
        }
        if(node.getParametros() != null)
        {
            node.getParametros().apply(this);
        }
        if(node.getRPar() != null)
        {
            node.getRPar().apply(this);
        }
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        if(node.getComece() != null)
        {
            node.getComece().apply(this);
        }
        if(node.getTermine() != null)
        {
            node.getTermine().apply(this);
        }
        outADecFuncaoDecFuncao(node);
    }

    public void inAParametrosParametros(AParametrosParametros node)
    {
        defaultIn(node);
    }

    public void outAParametrosParametros(AParametrosParametros node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAParametrosParametros(AParametrosParametros node)
    {
        inAParametrosParametros(node);
        if(node.getParametrosAux() != null)
        {
            node.getParametrosAux().apply(this);
        }
        outAParametrosParametros(node);
    }

    public void inAPipeParametroClosureParametrosAux(APipeParametroClosureParametrosAux node)
    {
        defaultIn(node);
    }

    public void outAPipeParametroClosureParametrosAux(APipeParametroClosureParametrosAux node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPipeParametroClosureParametrosAux(APipeParametroClosureParametrosAux node)
    {
        inAPipeParametroClosureParametrosAux(node);
        if(node.getParametro() != null)
        {
            node.getParametro().apply(this);
        }
        {
            List<PPipeParametro> copy = new ArrayList<PPipeParametro>(node.getPipeParametro());
            for(PPipeParametro e : copy)
            {
                e.apply(this);
            }
        }
        outAPipeParametroClosureParametrosAux(node);
    }

    public void inAPipeParametroPipeParametro(APipeParametroPipeParametro node)
    {
        defaultIn(node);
    }

    public void outAPipeParametroPipeParametro(APipeParametroPipeParametro node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPipeParametroPipeParametro(APipeParametroPipeParametro node)
    {
        inAPipeParametroPipeParametro(node);
        if(node.getPipe() != null)
        {
            node.getPipe().apply(this);
        }
        if(node.getParametro() != null)
        {
            node.getParametro().apply(this);
        }
        outAPipeParametroPipeParametro(node);
    }

    public void inAParametroParametro(AParametroParametro node)
    {
        defaultIn(node);
    }

    public void outAParametroParametro(AParametroParametro node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAParametroParametro(AParametroParametro node)
    {
        inAParametroParametro(node);
        if(node.getTipoParametro() != null)
        {
            node.getTipoParametro().apply(this);
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        outAParametroParametro(node);
    }

    public void inATipoBaseTipoParametro(ATipoBaseTipoParametro node)
    {
        defaultIn(node);
    }

    public void outATipoBaseTipoParametro(ATipoBaseTipoParametro node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATipoBaseTipoParametro(ATipoBaseTipoParametro node)
    {
        inATipoBaseTipoParametro(node);
        if(node.getTipoBase() != null)
        {
            node.getTipoBase().apply(this);
        }
        outATipoBaseTipoParametro(node);
    }

    public void inATipoParametroBrktTipoParametro(ATipoParametroBrktTipoParametro node)
    {
        defaultIn(node);
    }

    public void outATipoParametroBrktTipoParametro(ATipoParametroBrktTipoParametro node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATipoParametroBrktTipoParametro(ATipoParametroBrktTipoParametro node)
    {
        inATipoParametroBrktTipoParametro(node);
        if(node.getTipoParametro() != null)
        {
            node.getTipoParametro().apply(this);
        }
        if(node.getLBracket() != null)
        {
            node.getLBracket().apply(this);
        }
        if(node.getRBracket() != null)
        {
            node.getRBracket().apply(this);
        }
        outATipoParametroBrktTipoParametro(node);
    }

    public void inASeComandoComando(ASeComandoComando node)
    {
        defaultIn(node);
    }

    public void outASeComandoComando(ASeComandoComando node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASeComandoComando(ASeComandoComando node)
    {
        inASeComandoComando(node);
        if(node.getSe() != null)
        {
            node.getSe().apply(this);
        }
        if(node.getLPar() != null)
        {
            node.getLPar().apply(this);
        }
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        if(node.getRPar() != null)
        {
            node.getRPar().apply(this);
        }
        if(node.getComando() != null)
        {
            node.getComando().apply(this);
        }
        if(node.getSemicolon() != null)
        {
            node.getSemicolon().apply(this);
        }
        outASeComandoComando(node);
    }

    public void inASeSenaoComandoComando(ASeSenaoComandoComando node)
    {
        defaultIn(node);
    }

    public void outASeSenaoComandoComando(ASeSenaoComandoComando node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASeSenaoComandoComando(ASeSenaoComandoComando node)
    {
        inASeSenaoComandoComando(node);
        if(node.getSe() != null)
        {
            node.getSe().apply(this);
        }
        if(node.getLPar() != null)
        {
            node.getLPar().apply(this);
        }
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        if(node.getRPar() != null)
        {
            node.getRPar().apply(this);
        }
        if(node.getLeft() != null)
        {
            node.getLeft().apply(this);
        }
        if(node.getSenao() != null)
        {
            node.getSenao().apply(this);
        }
        if(node.getRight() != null)
        {
            node.getRight().apply(this);
        }
        outASeSenaoComandoComando(node);
    }

    public void inAEnquantoComando(AEnquantoComando node)
    {
        defaultIn(node);
    }

    public void outAEnquantoComando(AEnquantoComando node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAEnquantoComando(AEnquantoComando node)
    {
        inAEnquantoComando(node);
        if(node.getEnquanto() != null)
        {
            node.getEnquanto().apply(this);
        }
        if(node.getLPar() != null)
        {
            node.getLPar().apply(this);
        }
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        if(node.getRPar() != null)
        {
            node.getRPar().apply(this);
        }
        if(node.getComando() != null)
        {
            node.getComando().apply(this);
        }
        outAEnquantoComando(node);
    }

    public void inAIdAtribuicaoComando(AIdAtribuicaoComando node)
    {
        defaultIn(node);
    }

    public void outAIdAtribuicaoComando(AIdAtribuicaoComando node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIdAtribuicaoComando(AIdAtribuicaoComando node)
    {
        inAIdAtribuicaoComando(node);
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        if(node.getAttr() != null)
        {
            node.getAttr().apply(this);
        }
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        if(node.getSemicolon() != null)
        {
            node.getSemicolon().apply(this);
        }
        outAIdAtribuicaoComando(node);
    }

    public void inAChamadaProcComando(AChamadaProcComando node)
    {
        defaultIn(node);
    }

    public void outAChamadaProcComando(AChamadaProcComando node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAChamadaProcComando(AChamadaProcComando node)
    {
        inAChamadaProcComando(node);
        if(node.getChamadaProcedimento() != null)
        {
            node.getChamadaProcedimento().apply(this);
        }
        if(node.getSemicolon() != null)
        {
            node.getSemicolon().apply(this);
        }
        outAChamadaProcComando(node);
    }

    public void inABlocoComandosComando(ABlocoComandosComando node)
    {
        defaultIn(node);
    }

    public void outABlocoComandosComando(ABlocoComandosComando node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABlocoComandosComando(ABlocoComandosComando node)
    {
        inABlocoComandosComando(node);
        if(node.getBlocoComandos() != null)
        {
            node.getBlocoComandos().apply(this);
        }
        outABlocoComandosComando(node);
    }

    public void inABlocoComandosBlocoComandos(ABlocoComandosBlocoComandos node)
    {
        defaultIn(node);
    }

    public void outABlocoComandosBlocoComandos(ABlocoComandosBlocoComandos node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABlocoComandosBlocoComandos(ABlocoComandosBlocoComandos node)
    {
        inABlocoComandosBlocoComandos(node);
        if(node.getComece() != null)
        {
            node.getComece().apply(this);
        }
        {
            List<PDecVarOrConst> copy = new ArrayList<PDecVarOrConst>(node.getDecVarOrConst());
            for(PDecVarOrConst e : copy)
            {
                e.apply(this);
            }
        }
        {
            List<PComando> copy = new ArrayList<PComando>(node.getComando());
            for(PComando e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getTermine() != null)
        {
            node.getTermine().apply(this);
        }
        outABlocoComandosBlocoComandos(node);
    }

    public void inAIdValor(AIdValor node)
    {
        defaultIn(node);
    }

    public void outAIdValor(AIdValor node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIdValor(AIdValor node)
    {
        inAIdValor(node);
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        outAIdValor(node);
    }

    public void inAValorBrktsValor(AValorBrktsValor node)
    {
        defaultIn(node);
    }

    public void outAValorBrktsValor(AValorBrktsValor node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAValorBrktsValor(AValorBrktsValor node)
    {
        inAValorBrktsValor(node);
        if(node.getValor() != null)
        {
            node.getValor().apply(this);
        }
        if(node.getLBracket() != null)
        {
            node.getLBracket().apply(this);
        }
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        if(node.getRBracket() != null)
        {
            node.getRBracket().apply(this);
        }
        outAValorBrktsValor(node);
    }

    public void inABlocoExpressoesBlocoExpressoes(ABlocoExpressoesBlocoExpressoes node)
    {
        defaultIn(node);
    }

    public void outABlocoExpressoesBlocoExpressoes(ABlocoExpressoesBlocoExpressoes node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABlocoExpressoesBlocoExpressoes(ABlocoExpressoesBlocoExpressoes node)
    {
        inABlocoExpressoesBlocoExpressoes(node);
        if(node.getComece() != null)
        {
            node.getComece().apply(this);
        }
        {
            List<PDecCons> copy = new ArrayList<PDecCons>(node.getDecCons());
            for(PDecCons e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        if(node.getTermine() != null)
        {
            node.getTermine().apply(this);
        }
        outABlocoExpressoesBlocoExpressoes(node);
    }

    public void inAChamadaFuncaoChamadaFuncao(AChamadaFuncaoChamadaFuncao node)
    {
        defaultIn(node);
    }

    public void outAChamadaFuncaoChamadaFuncao(AChamadaFuncaoChamadaFuncao node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAChamadaFuncaoChamadaFuncao(AChamadaFuncaoChamadaFuncao node)
    {
        inAChamadaFuncaoChamadaFuncao(node);
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        if(node.getLPar() != null)
        {
            node.getLPar().apply(this);
        }
        if(node.getListaExp() != null)
        {
            node.getListaExp().apply(this);
        }
        if(node.getRPar() != null)
        {
            node.getRPar().apply(this);
        }
        outAChamadaFuncaoChamadaFuncao(node);
    }

    public void inAChamadaProcedimentoChamadaProcedimento(AChamadaProcedimentoChamadaProcedimento node)
    {
        defaultIn(node);
    }

    public void outAChamadaProcedimentoChamadaProcedimento(AChamadaProcedimentoChamadaProcedimento node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAChamadaProcedimentoChamadaProcedimento(AChamadaProcedimentoChamadaProcedimento node)
    {
        inAChamadaProcedimentoChamadaProcedimento(node);
        if(node.getLPar() != null)
        {
            node.getLPar().apply(this);
        }
        if(node.getListaExp() != null)
        {
            node.getListaExp().apply(this);
        }
        if(node.getRPar() != null)
        {
            node.getRPar().apply(this);
        }
        outAChamadaProcedimentoChamadaProcedimento(node);
    }

    public void inAListaExpListaExp(AListaExpListaExp node)
    {
        defaultIn(node);
    }

    public void outAListaExpListaExp(AListaExpListaExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAListaExpListaExp(AListaExpListaExp node)
    {
        inAListaExpListaExp(node);
        if(node.getListaExpAux() != null)
        {
            node.getListaExpAux().apply(this);
        }
        outAListaExpListaExp(node);
    }

    public void inAAuxListaExpAux(AAuxListaExpAux node)
    {
        defaultIn(node);
    }

    public void outAAuxListaExpAux(AAuxListaExpAux node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAuxListaExpAux(AAuxListaExpAux node)
    {
        inAAuxListaExpAux(node);
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        {
            List<PPipeExp> copy = new ArrayList<PPipeExp>(node.getPipeExp());
            for(PPipeExp e : copy)
            {
                e.apply(this);
            }
        }
        outAAuxListaExpAux(node);
    }

    public void inAPipeExpPipeExp(APipeExpPipeExp node)
    {
        defaultIn(node);
    }

    public void outAPipeExpPipeExp(APipeExpPipeExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPipeExpPipeExp(APipeExpPipeExp node)
    {
        inAPipeExpPipeExp(node);
        if(node.getPipe() != null)
        {
            node.getPipe().apply(this);
        }
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        outAPipeExpPipeExp(node);
    }

    public void inAIntegerNumber(AIntegerNumber node)
    {
        defaultIn(node);
    }

    public void outAIntegerNumber(AIntegerNumber node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIntegerNumber(AIntegerNumber node)
    {
        inAIntegerNumber(node);
        if(node.getIntegerConstant() != null)
        {
            node.getIntegerConstant().apply(this);
        }
        outAIntegerNumber(node);
    }

    public void inARealNumber(ARealNumber node)
    {
        defaultIn(node);
    }

    public void outARealNumber(ARealNumber node)
    {
        defaultOut(node);
    }

    @Override
    public void caseARealNumber(ARealNumber node)
    {
        inARealNumber(node);
        if(node.getFloatingConstant() != null)
        {
            node.getFloatingConstant().apply(this);
        }
        outARealNumber(node);
    }

    public void inABooleanBooleanExp(ABooleanBooleanExp node)
    {
        defaultIn(node);
    }

    public void outABooleanBooleanExp(ABooleanBooleanExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABooleanBooleanExp(ABooleanBooleanExp node)
    {
        inABooleanBooleanExp(node);
        if(node.getBooleanConstant() != null)
        {
            node.getBooleanConstant().apply(this);
        }
        outABooleanBooleanExp(node);
    }

    public void inACadeiaCadeiaExp(ACadeiaCadeiaExp node)
    {
        defaultIn(node);
    }

    public void outACadeiaCadeiaExp(ACadeiaCadeiaExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACadeiaCadeiaExp(ACadeiaCadeiaExp node)
    {
        inACadeiaCadeiaExp(node);
        if(node.getCadeiaConstant() != null)
        {
            node.getCadeiaConstant().apply(this);
        }
        outACadeiaCadeiaExp(node);
    }

    public void inAIntegerLiteral(AIntegerLiteral node)
    {
        defaultIn(node);
    }

    public void outAIntegerLiteral(AIntegerLiteral node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIntegerLiteral(AIntegerLiteral node)
    {
        inAIntegerLiteral(node);
        if(node.getIntegerConstant() != null)
        {
            node.getIntegerConstant().apply(this);
        }
        outAIntegerLiteral(node);
    }

    public void inARealLiteral(ARealLiteral node)
    {
        defaultIn(node);
    }

    public void outARealLiteral(ARealLiteral node)
    {
        defaultOut(node);
    }

    @Override
    public void caseARealLiteral(ARealLiteral node)
    {
        inARealLiteral(node);
        if(node.getFloatingConstant() != null)
        {
            node.getFloatingConstant().apply(this);
        }
        outARealLiteral(node);
    }

    public void inABooleanLiteral(ABooleanLiteral node)
    {
        defaultIn(node);
    }

    public void outABooleanLiteral(ABooleanLiteral node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABooleanLiteral(ABooleanLiteral node)
    {
        inABooleanLiteral(node);
        if(node.getBooleanConstant() != null)
        {
            node.getBooleanConstant().apply(this);
        }
        outABooleanLiteral(node);
    }

    public void inACadeiaLiteral(ACadeiaLiteral node)
    {
        defaultIn(node);
    }

    public void outACadeiaLiteral(ACadeiaLiteral node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACadeiaLiteral(ACadeiaLiteral node)
    {
        inACadeiaLiteral(node);
        if(node.getCadeiaConstant() != null)
        {
            node.getCadeiaConstant().apply(this);
        }
        outACadeiaLiteral(node);
    }

    public void inAMultiplicationMultiplicativeExp(AMultiplicationMultiplicativeExp node)
    {
        defaultIn(node);
    }

    public void outAMultiplicationMultiplicativeExp(AMultiplicationMultiplicativeExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMultiplicationMultiplicativeExp(AMultiplicationMultiplicativeExp node)
    {
        inAMultiplicationMultiplicativeExp(node);
        if(node.getMultiplicativeExp() != null)
        {
            node.getMultiplicativeExp().apply(this);
        }
        if(node.getStar() != null)
        {
            node.getStar().apply(this);
        }
        if(node.getNumber() != null)
        {
            node.getNumber().apply(this);
        }
        outAMultiplicationMultiplicativeExp(node);
    }

    public void inANumberMultiplicativeExp(ANumberMultiplicativeExp node)
    {
        defaultIn(node);
    }

    public void outANumberMultiplicativeExp(ANumberMultiplicativeExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANumberMultiplicativeExp(ANumberMultiplicativeExp node)
    {
        inANumberMultiplicativeExp(node);
        if(node.getNumber() != null)
        {
            node.getNumber().apply(this);
        }
        outANumberMultiplicativeExp(node);
    }

    public void inADivisionDividitiveExp(ADivisionDividitiveExp node)
    {
        defaultIn(node);
    }

    public void outADivisionDividitiveExp(ADivisionDividitiveExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADivisionDividitiveExp(ADivisionDividitiveExp node)
    {
        inADivisionDividitiveExp(node);
        if(node.getMultiplicativeExp() != null)
        {
            node.getMultiplicativeExp().apply(this);
        }
        if(node.getDiv() != null)
        {
            node.getDiv().apply(this);
        }
        if(node.getNumber() != null)
        {
            node.getNumber().apply(this);
        }
        outADivisionDividitiveExp(node);
    }

    public void inAModModExp(AModModExp node)
    {
        defaultIn(node);
    }

    public void outAModModExp(AModModExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAModModExp(AModModExp node)
    {
        inAModModExp(node);
        if(node.getMultiplicativeExp() != null)
        {
            node.getMultiplicativeExp().apply(this);
        }
        if(node.getMod() != null)
        {
            node.getMod().apply(this);
        }
        if(node.getNumber() != null)
        {
            node.getNumber().apply(this);
        }
        outAModModExp(node);
    }

    public void inAAdditiveExpAdditiveExp(AAdditiveExpAdditiveExp node)
    {
        defaultIn(node);
    }

    public void outAAdditiveExpAdditiveExp(AAdditiveExpAdditiveExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAdditiveExpAdditiveExp(AAdditiveExpAdditiveExp node)
    {
        inAAdditiveExpAdditiveExp(node);
        if(node.getAdditiveExp() != null)
        {
            node.getAdditiveExp().apply(this);
        }
        if(node.getPlus() != null)
        {
            node.getPlus().apply(this);
        }
        if(node.getDividitiveExp() != null)
        {
            node.getDividitiveExp().apply(this);
        }
        outAAdditiveExpAdditiveExp(node);
    }

    public void inASubtractiveExpSubtractiveExp(ASubtractiveExpSubtractiveExp node)
    {
        defaultIn(node);
    }

    public void outASubtractiveExpSubtractiveExp(ASubtractiveExpSubtractiveExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASubtractiveExpSubtractiveExp(ASubtractiveExpSubtractiveExp node)
    {
        inASubtractiveExpSubtractiveExp(node);
        if(node.getAdditiveExp() != null)
        {
            node.getAdditiveExp().apply(this);
        }
        if(node.getMinus() != null)
        {
            node.getMinus().apply(this);
        }
        if(node.getDividitiveExp() != null)
        {
            node.getDividitiveExp().apply(this);
        }
        outASubtractiveExpSubtractiveExp(node);
    }

    public void inABooleanExpExp(ABooleanExpExp node)
    {
        defaultIn(node);
    }

    public void outABooleanExpExp(ABooleanExpExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABooleanExpExp(ABooleanExpExp node)
    {
        inABooleanExpExp(node);
        if(node.getBooleanExp() != null)
        {
            node.getBooleanExp().apply(this);
        }
        outABooleanExpExp(node);
    }

    public void inACadeiaExpExp(ACadeiaExpExp node)
    {
        defaultIn(node);
    }

    public void outACadeiaExpExp(ACadeiaExpExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACadeiaExpExp(ACadeiaExpExp node)
    {
        inACadeiaExpExp(node);
        if(node.getCadeiaExp() != null)
        {
            node.getCadeiaExp().apply(this);
        }
        outACadeiaExpExp(node);
    }

    public void inAValorExp(AValorExp node)
    {
        defaultIn(node);
    }

    public void outAValorExp(AValorExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAValorExp(AValorExp node)
    {
        inAValorExp(node);
        if(node.getValor() != null)
        {
            node.getValor().apply(this);
        }
        outAValorExp(node);
    }

    public void inASurroundedExpExp(ASurroundedExpExp node)
    {
        defaultIn(node);
    }

    public void outASurroundedExpExp(ASurroundedExpExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASurroundedExpExp(ASurroundedExpExp node)
    {
        inASurroundedExpExp(node);
        if(node.getLPar() != null)
        {
            node.getLPar().apply(this);
        }
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        if(node.getRPar() != null)
        {
            node.getRPar().apply(this);
        }
        outASurroundedExpExp(node);
    }

    public void inAChamadaFuncaoExp(AChamadaFuncaoExp node)
    {
        defaultIn(node);
    }

    public void outAChamadaFuncaoExp(AChamadaFuncaoExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAChamadaFuncaoExp(AChamadaFuncaoExp node)
    {
        inAChamadaFuncaoExp(node);
        if(node.getChamadaFuncao() != null)
        {
            node.getChamadaFuncao().apply(this);
        }
        outAChamadaFuncaoExp(node);
    }

    public void inAArrayCompExp(AArrayCompExp node)
    {
        defaultIn(node);
    }

    public void outAArrayCompExp(AArrayCompExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAArrayCompExp(AArrayCompExp node)
    {
        inAArrayCompExp(node);
        if(node.getArrayComp() != null)
        {
            node.getArrayComp().apply(this);
        }
        outAArrayCompExp(node);
    }

    public void inAMinusExpExp(AMinusExpExp node)
    {
        defaultIn(node);
    }

    public void outAMinusExpExp(AMinusExpExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMinusExpExp(AMinusExpExp node)
    {
        inAMinusExpExp(node);
        if(node.getMinus() != null)
        {
            node.getMinus().apply(this);
        }
        if(node.getNumber() != null)
        {
            node.getNumber().apply(this);
        }
        outAMinusExpExp(node);
    }

    public void inASubtractiveExpExp(ASubtractiveExpExp node)
    {
        defaultIn(node);
    }

    public void outASubtractiveExpExp(ASubtractiveExpExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASubtractiveExpExp(ASubtractiveExpExp node)
    {
        inASubtractiveExpExp(node);
        if(node.getSubtractiveExp() != null)
        {
            node.getSubtractiveExp().apply(this);
        }
        outASubtractiveExpExp(node);
    }

    public void inAModExpExp(AModExpExp node)
    {
        defaultIn(node);
    }

    public void outAModExpExp(AModExpExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAModExpExp(AModExpExp node)
    {
        inAModExpExp(node);
        if(node.getModExp() != null)
        {
            node.getModExp().apply(this);
        }
        if(node.getNumber() != null)
        {
            node.getNumber().apply(this);
        }
        outAModExpExp(node);
    }

    public void inAEqualExpExp(AEqualExpExp node)
    {
        defaultIn(node);
    }

    public void outAEqualExpExp(AEqualExpExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAEqualExpExp(AEqualExpExp node)
    {
        inAEqualExpExp(node);
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        if(node.getEqual() != null)
        {
            node.getEqual().apply(this);
        }
        if(node.getLiteral() != null)
        {
            node.getLiteral().apply(this);
        }
        outAEqualExpExp(node);
    }

    public void inAGreaterExp(AGreaterExp node)
    {
        defaultIn(node);
    }

    public void outAGreaterExp(AGreaterExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAGreaterExp(AGreaterExp node)
    {
        inAGreaterExp(node);
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        if(node.getGreater() != null)
        {
            node.getGreater().apply(this);
        }
        if(node.getNumber() != null)
        {
            node.getNumber().apply(this);
        }
        outAGreaterExp(node);
    }

    public void inAGreaterEqualExp(AGreaterEqualExp node)
    {
        defaultIn(node);
    }

    public void outAGreaterEqualExp(AGreaterEqualExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAGreaterEqualExp(AGreaterEqualExp node)
    {
        inAGreaterEqualExp(node);
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        if(node.getGreaterEqual() != null)
        {
            node.getGreaterEqual().apply(this);
        }
        if(node.getNumber() != null)
        {
            node.getNumber().apply(this);
        }
        outAGreaterEqualExp(node);
    }

    public void inANotExp(ANotExp node)
    {
        defaultIn(node);
    }

    public void outANotExp(ANotExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANotExp(ANotExp node)
    {
        inANotExp(node);
        if(node.getNao() != null)
        {
            node.getNao().apply(this);
        }
        if(node.getBooleanExp() != null)
        {
            node.getBooleanExp().apply(this);
        }
        outANotExp(node);
    }

    public void inAAndExp(AAndExp node)
    {
        defaultIn(node);
    }

    public void outAAndExp(AAndExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAndExp(AAndExp node)
    {
        inAAndExp(node);
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        if(node.getE() != null)
        {
            node.getE().apply(this);
        }
        if(node.getBooleanExp() != null)
        {
            node.getBooleanExp().apply(this);
        }
        outAAndExp(node);
    }

    public void inAOrExp(AOrExp node)
    {
        defaultIn(node);
    }

    public void outAOrExp(AOrExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAOrExp(AOrExp node)
    {
        inAOrExp(node);
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        if(node.getOu() != null)
        {
            node.getOu().apply(this);
        }
        if(node.getBooleanExp() != null)
        {
            node.getBooleanExp().apply(this);
        }
        outAOrExp(node);
    }

    public void inABlocoExpressoesExp(ABlocoExpressoesExp node)
    {
        defaultIn(node);
    }

    public void outABlocoExpressoesExp(ABlocoExpressoesExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABlocoExpressoesExp(ABlocoExpressoesExp node)
    {
        inABlocoExpressoesExp(node);
        if(node.getBlocoExpressoes() != null)
        {
            node.getBlocoExpressoes().apply(this);
        }
        outABlocoExpressoesExp(node);
    }
}
