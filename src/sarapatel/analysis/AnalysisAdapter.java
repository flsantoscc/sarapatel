/* This file was generated by SableCC (http://www.sablecc.org/). */

package sarapatel.analysis;

import java.util.*;
import sarapatel.node.*;

public class AnalysisAdapter implements Analysis
{
    private Hashtable<Node,Object> in;
    private Hashtable<Node,Object> out;

    @Override
    public Object getIn(Node node)
    {
        if(this.in == null)
        {
            return null;
        }

        return this.in.get(node);
    }

    @Override
    public void setIn(Node node, Object o)
    {
        if(this.in == null)
        {
            this.in = new Hashtable<Node,Object>(1);
        }

        if(o != null)
        {
            this.in.put(node, o);
        }
        else
        {
            this.in.remove(node);
        }
    }

    @Override
    public Object getOut(Node node)
    {
        if(this.out == null)
        {
            return null;
        }

        return this.out.get(node);
    }

    @Override
    public void setOut(Node node, Object o)
    {
        if(this.out == null)
        {
            this.out = new Hashtable<Node,Object>(1);
        }

        if(o != null)
        {
            this.out.put(node, o);
        }
        else
        {
            this.out.remove(node);
        }
    }

    @Override
    public void caseStart(Start node)
    {
        defaultCase(node);
    }

    @Override
    public void caseABooleanTypeSpecifier(ABooleanTypeSpecifier node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAIntegerTypeSpecifier(AIntegerTypeSpecifier node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAFloatTypeSpecifier(AFloatTypeSpecifier node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAStringTypeSpecifier(AStringTypeSpecifier node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAIntegerSpecifier(AIntegerSpecifier node)
    {
        defaultCase(node);
    }

    @Override
    public void caseABooleanSpecifier(ABooleanSpecifier node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAStringSpecifier(AStringSpecifier node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAFloatSpecifier(AFloatSpecifier node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAIdentifierArrayDeclarator(AIdentifierArrayDeclarator node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAArrayArrayDeclarator(AArrayArrayDeclarator node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAArrayDeclaration(AArrayDeclaration node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTDigit(TDigit node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTLetter(TLetter node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTDot(TDot node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTComma(TComma node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTColon(TColon node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTSemicolon(TSemicolon node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTLPar(TLPar node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTRPar(TRPar node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTLBracket(TLBracket node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTRBracket(TRBracket node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTLBrace(TLBrace node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTRBrace(TRBrace node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTStar(TStar node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTDiv(TDiv node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTMod(TMod node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTPlus(TPlus node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTMinus(TMinus node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTAttr(TAttr node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTE(TE node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTOu(TOu node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTNao(TNao node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTGreater(TGreater node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTGreaterOrEqual(TGreaterOrEqual node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTEqual(TEqual node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTSe(TSe node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTSenao(TSenao node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTFuncao(TFuncao node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTProcedimento(TProcedimento node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTEnquanto(TEnquanto node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTComece(TComece node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTTermine(TTermine node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTVar(TVar node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTConst(TConst node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTImprima(TImprima node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTLeia(TLeia node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTSize(TSize node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTTInteiro(TTInteiro node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTTReal(TTReal node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTTCadeia(TTCadeia node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTTBooleano(TTBooleano node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTFloatingConstant(TFloatingConstant node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTIntegerConstant(TIntegerConstant node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTCadeiaConstant(TCadeiaConstant node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTBooleanConstant(TBooleanConstant node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTEol(TEol node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTBlank(TBlank node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTIdentifier(TIdentifier node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTComment(TComment node)
    {
        defaultCase(node);
    }

    @Override
    public void caseEOF(EOF node)
    {
        defaultCase(node);
    }

    @Override
    public void caseInvalidToken(InvalidToken node)
    {
        defaultCase(node);
    }

    public void defaultCase(@SuppressWarnings("unused") Node node)
    {
        // do nothing
    }
}
